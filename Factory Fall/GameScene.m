//
//  GameScene.m
//  practice
//
//  Created by Willie on 12/23/14.
//  Copyright (c) 2014 Fluxfire. All rights reserved.
//



#import "GameScene.h"
#import "ArcadeMenu.h"
#import "GameViewController.h"
#import "NMPointsLabel.h"
#import "MainMenu.h"
#import "FactoryBucksLabel.h"
#import "FBLabelLogic.h"
#import "RankLogic.h"
#import "ShopLogic.h"
#import "PowerUpLogic.h"
#import "PowerUpAmountsLabel.h"
#import "FruitOrVeggyLogic.h"
#import "VictoryPrizeScreen.h"
#import "Data.h"
#import "AtlastData.h"
#import "LoadingScreen.h"

#define IPHONE_4 ( fabs( ( double )[ [ UIScreen mainScreen ] bounds ].size.height - ( double )480 ) < DBL_EPSILON )
#define IPHONE_5 ( fabs( ( double )[ [ UIScreen mainScreen ] bounds ].size.height - ( double )568 ) < DBL_EPSILON )
#define IPHONE_6 ( fabs( ( double )[ [ UIScreen mainScreen ] bounds ].size.height - ( double )667 ) < DBL_EPSILON )
#define IPHONE_6_PLUS ( fabs( ( double )[ [ UIScreen mainScreen ] bounds ].size.height - ( double )736 ) < DBL_EPSILON )

#define kAdd9kProductIdentifier @"XC.com.FluxFire.FactoryFall.9KFB"
#define kAdd30kProductIdentifier @"XC.com.FluxFire.FactoryFall.30KFB"
#define kAdd45kProductIdentifier @"XC.com.FluxFire.FactoryFall.45KFB"
#define kAdd75kProductIdentifier @"XC.com.FluxFire.FactoryFall.75KFB"
#define kAdd150kProductIdentifier @"XC.com.FluxFire.FactoryFall.150KFB"
#define kAdd300kProductIdentifier @"XC.com.FluxFire.FactoryFall.300KFB"
#define kAddClockRefillProductIdentifier @"XC.com.FluxFire.FactoryFall.ClockRefill"
#define kAddGodModePackProductIdentifier @"XC.com.FluxFire.FactoryFall.GodModePack"
#define kAddHelpProductIdentifier @"XC.com.FluxFire.FactoryFall.Help"
#define kAddInvinciblePackProductIdentifier @"XC.com.FluxFire.FactoryFall.InvinciblePack"
#define kAddRefillLivesProductIdentifier @"XC.com.FluxFire.FactoryFall.RefillLives"
#define kAddRetryFromLossProductIdentifier @"XC.com.FluxFire.FactoryFall.RetryFromLoss"
#define kAddRetryPlus10ProductIdentifier @"XC.com.FluxFire.FactoryFall.RetryPlus10"
#define kAddReviveProductIdentifier @"XC.com.FluxFire.FactoryFall.Revive"
#define kAddSafePackProductIdentifier @"XC.com.FluxFire.FactoryFall.SafePack"
#define kAddUpgradeLivesProductIdentifier @"XC.com.FluxFire.FactoryFall.UpgradeLives"

static const CGFloat SpawnWidth = 32.0;
static const CGFloat SpawnHeight = 200;
static NSString * const kAnimalNodeName = @"movable";
int DPAmount;
int TPAmount;
int QPAmount;
int EL2Amount;
int EL3Amount;

@interface GameScene () <SKProductsRequestDelegate, SKPaymentTransactionObserver>

@property (strong, nonatomic) SKNode *gameLayer;
@property (strong, nonatomic) SKNode *foodsLayer;
@property (strong, nonatomic) SKNode *sensorLayer;
@property (strong, nonatomic) SKNode *spriteLayer;
@property (strong, nonatomic) SKNode *sequenceLayer;
@property (strong, nonatomic) SKNode *pauseLayer;
@property (strong, nonatomic) SKNode *reggyLayer;

//@property (strong, nonatomic) VictoryPrizeScreen *VictoryScreen;
//@property (strong, nonatomic) LoadingScreen *Lscene;


@end



@implementation GameScene {
    
    float g;
    float x;
    float y;
    float t;
    int z;
    int f;
    NSInteger hp;
    NSInteger foodNum;
    NSInteger hpNum;
    NSInteger hpCap;
    NSInteger dp;
    NSInteger ep;
    NSInteger humanHP;
    NSInteger humanHPNum;
    //SKAction *gravitySequence;
    SKAction *sideFoodAnimSequence;
    CGVector v;
    int cm;
    int fdNum;
    int raNum;
    int punchInt;
    int cycle;
    BOOL endB;
    BOOL fight;
    BOOL priorityClick;
    BOOL gameBegan;
    int jNum;
    int epNum;
    BOOL attack;
    int attackNum;
    int asNum;
    SKAction *autoSwipeF;
    SKAction *autoSwipeV;
    SKAction *autoSwipeO;
    //SKAction *flipSequnce;
    BOOL cantAnim;
    BOOL gameOver;
    float gr;
    float fd;
    int goldCDNum;
    
    
}

static const uint32_t foodCategory = 0x1 << 0;
static const uint32_t foodCategory1 = 0x1 << 1;
static const uint32_t foodCategory2 = 0x1 << 2;
static const uint32_t foodCategory3 = 0x1 << 3;
static const uint32_t foodCategory4 = 0x1 << 4;
static const uint32_t foodCategory5 = 0x1 << 5;
static const uint32_t foodCategory6 = 0x1 << 6;
static const uint32_t foodCategory7 = 0x1 << 7;
static const uint32_t foodCategory8 = 0x1 << 8;
static const uint32_t foodCategory9 = 0x1 << 9;
static const uint32_t foodCategory10 = 0x1 << 10;
static const uint32_t foodCategory11 = 0x1 << 11;
static const uint32_t leftSensorCategory = 0x1 << 12;
static const uint32_t rightSensorCategory = 0x1 << 13;
static const uint32_t bottomSensorCategory = 0x1 << 14;
static const uint32_t reggyBotCategory = 0x1 << 15;
static const uint32_t eatRadiusCategory = 0x1 << 16;
static const uint32_t foodBlowerCategory = 0x1 << 17;
static const uint32_t fakeFoodCategory = 0x1 << 18;
static const uint32_t batCategory = 0x1 << 19;
static const uint32_t wallCategory = 0x1 << 20;
//static const uint32_t backgroundCategory = 0x1 << 4;

#pragma mark - Start Up
 
- (id)initWithSize:(CGSize)size {
    
    if ((self = [super initWithSize:size])) {
        
        self.physicsWorld.contactDelegate = self;
        self.physicsWorld.gravity = CGVectorMake(0, 0);
        self.anchorPoint = CGPointMake(0.5, 0.5);
        
        yourSoundAction = [SKAction playSoundFileNamed:@"ConfettiSound" waitForCompletion:NO];
        mainMenuSprites = [self textureAtlasNamed:@"MainMenuSprites"];
        buttonSprites = [self textureAtlasNamed:@"ButtonSprites"];
        gameSceneSpritesOne = [self textureAtlasNamed:@"GameSceneSpritesOne"];
        //gameSceneSpritesTwo = [self textureAtlasNamed:@"GameSceneSpritesTwo"];
        gameSceneSpritesThree = [self textureAtlasNamed:@"GameSceneSpritesThree"];
        gameSceneSpritesFour = [self textureAtlasNamed:@"GameSceneSpritesFour"];
        gameSceneSpritesFive = [self textureAtlasNamed:@"GameSceneSpritesFive"];
        gameSceneSpritesSix = [self textureAtlasNamed:@"GameSceneSpritesSix"];
        gameSceneSpritesSeven = [self textureAtlasNamed:@"GameSceneSpritesSeven"];
        //gameSceneSpritesEight = [self textureAtlasNamed:@"GameSceneSpritesEight"];
        gameSceneSpritesNine = [self textureAtlasNamed:@"GameSceneSpritesNine"];
        //gameSceneSpritesTen = [self textureAtlasNamed:@"GameSceneSpritesTen"];
        reggyTauntSprites = [self textureAtlasNamed:@"ReggyTauntSprites"];
        foodSprites = [self textureAtlasNamed:@"FoodSprites"];
        //confettiAnimSprites3 = [self textureAtlasNamed:@"ConfettiAnimSprites3"];
        //confettiAnimSprites4 = [self textureAtlasNamed:@"ConfettiAnimSprites4"];
        powerUpAnimSprites1 = [self textureAtlasNamed:@"PowerUpAnimSprites1"];
        /*congradSpritesOne = [self textureAtlasNamed:@"CongradsBoardSpritesOne"];
        congradSpritesTwo = [self textureAtlasNamed:@"CongradBoardSpritesTwo"];
        congradSpritesThree = [self textureAtlasNamed:@"CongradsBoardSpritesThree"];
        congradSpritesFive = [self textureAtlasNamed:@"CongradsBoardsSpritesFive"];
        congradSpritesFour = [self textureAtlasNamed:@"CongradBoardSpritesFour"];
        congranSpritesFour = [self textureAtlasNamed:@"CongradsNoardSpritesFour"];
        congradSpritesSix = [self textureAtlasNamed:@"CongradsBoardSpritesSix"];
        congradSpritesSeven = [self textureAtlasNamed:@"CongradsBoardSpritesSeven"];
        congradSpritesEight = [self textureAtlasNamed:@"CongradsBoardSpritesEight"];
        congradSpritesNine = [self textureAtlasNamed:@"CongradsBoardSpritesNine"];
        congradSpritesTen = [self textureAtlasNamed:@"CongradsBoardSpritesTen"];
        congradSpritesEleven = [self textureAtlasNamed:@"CongradsBoardSpritesEleven"];
        congradSpritesTwelve = [self textureAtlasNamed:@"CongradsBoardSpritesTwelve"];
        congradSpritesThirteen = [self textureAtlasNamed:@"CongradsBoardSpritesThirteen"];
        congradSpritesFourteen = [self textureAtlasNamed:@"CongradsBoardSpritesFourteen"];
        congradSpritesFifteen = [self textureAtlasNamed:@"CongradsBoardSpritesFifthTeen"];
        congradSpritesSixteen = [self textureAtlasNamed:@"CongradsBoardSpritesSixteen"];
        prizeShineSprites = [self textureAtlasNamed:@"PrizeShineSprites"];
        pauseMenuObjectiveSprites = [self textureAtlasNamed:@"PauseMenuObjectiveSprites"];
        pauseMenuFoodSprites = [self textureAtlasNamed:@"PauseMenuFoodsSprites"];
        reggyAnimSprites = [self textureAtlasNamed:@"ReggyAnimSprites"];*/
        
        
        backgroundTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneBackground"];
        background = [SKSpriteNode spriteNodeWithTexture:backgroundTexture];
        [background setName:@"background"];
        background.name = @"background";
        background.size = CGSizeMake(background.frame.size.width/s, background.frame.size.height / s);
        background.zPosition = 1.1;
        [self addChild:background];
        
        self.gameLayer = [SKNode node];
        [self addChild:self.gameLayer];
        
        CGPoint layerPosition = CGPointMake(-SpawnWidth*1/2, SpawnHeight*1/2);
        
        self.foodsLayer = [SKNode node];
        self.foodsLayer.position = layerPosition;
        
        [self.gameLayer addChild:self.foodsLayer];
        
        self.spriteLayer = [SKNode node];
        self.spriteLayer.position = CGPointZero;
        
        [self.gameLayer addChild:self.spriteLayer];
        
        self.sequenceLayer = [SKNode node];
        self.sequenceLayer.position = CGPointZero;
        
        [self.spriteLayer addChild:self.sequenceLayer];
        
        CGPoint sensorPosition = CGPointMake(CGRectGetMidX(self.frame),CGRectGetMidY(self.frame));
        
        self.sensorLayer = [SKNode node];
        self.sensorLayer.position = sensorPosition;
        
        [self.gameLayer addChild:self.sensorLayer];
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"ClickSound" ofType:@"wav"];
        clickSound = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        clickSound.delegate = self;
        
        NSString *sound1 = [[NSBundle mainBundle]pathForResource:@"dink" ofType:@"wav"];
        dink = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound1]  error:NULL];
        dink.delegate = self;
        
    }
    return self;
}
- (SKTextureAtlas *)textureAtlasNamed:(NSString *)fileName
{
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        if( [ [ UIScreen mainScreen ] respondsToSelector: @selector( nativeBounds ) ] )
        {
            if (IPHONE_4) {
                s = 2;
                fileName = [NSString stringWithFormat:@"%@", fileName];
                
            }
            if (IPHONE_5) {
                s = 2;
                fileName = [NSString stringWithFormat:@"%@-568", fileName];
                
            }else if (IPHONE_6) {
                s = 2;
                fileName = [NSString stringWithFormat:@"%@-667", fileName];
                
            } else if (IPHONE_6_PLUS) {
                s = 3;
                fileName = [NSString stringWithFormat:@"%@-736", fileName];
                
            } else {
                
                fileName = fileName;
                
            }
            
        } else {
            fileName = [NSString stringWithFormat:@"%@-ipad", fileName];
        }
    }
    SKTextureAtlas *textureAtlas = [SKTextureAtlas atlasNamed:fileName];
    
    return textureAtlas;
}
-(void)didMoveToView:(SKView *)view {
    
    UISwipeGestureRecognizer * leftSwipe = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(leftSwiped)];
    [leftSwipe setDirection:UISwipeGestureRecognizerDirectionLeft];
    [leftSwipe setNumberOfTouchesRequired:1];
    [self.view addGestureRecognizer:leftSwipe];
    
    UISwipeGestureRecognizer * rightSwipe = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(rightSwiped)];
    [rightSwipe setDirection:UISwipeGestureRecognizerDirectionRight];
    [rightSwipe setNumberOfTouchesRequired:1];
    [self.view addGestureRecognizer:rightSwipe];
    
    UISwipeGestureRecognizer * downSwipe = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(downSwiped)];
    [downSwipe setDirection:UISwipeGestureRecognizerDirectionDown];
    [downSwipe setNumberOfTouchesRequired:1];
    [self.view addGestureRecognizer:downSwipe];
    
    [self labelsandLogic];
    [self rightSensorLayerSprite];
    [self leftSensorLayerSprite];
    [self bottomSensorLayerSprite];
    [self sprites];
    [self sideSprites];
    [self startGameBlinkAction];
    //[self reggyAnims];
    
    if (prizeAquired == YES) {
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"PrizeCollected" ofType:@"wav"];
        prizeCollected = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        prizeCollected.delegate = self;
        prizeCollected.volume = 1.0;
        [prizeCollected play];
        [self gameOverSprites];
    }
    if (((currentGameNumber == 4 & maxPlaysLvl == 0) || (currentGameNumber == 9 & maxPlaysLvl == 1)) && (helpActivated == NO)) {
        
        helpButtonTexture = [buttonSprites textureNamed:@"FFGameSceneBuyHelpButton1"];
        
        helpButton = [SKSpriteNode spriteNodeWithTexture:helpButtonTexture];
        helpButton.position = CGPointMake(self.frame.size.width/2.9, -self.frame.size.height/2.4);
        helpButton.size = CGSizeMake(helpButton.frame.size.width/s, helpButton.frame.size.height / s);
        helpButton.zPosition = 102.6;
        helpButton.name = @"help";
        [self.spriteLayer addChild:helpButton];
        
        SKAction *buttonSpin1 = [SKAction animateWithTextures:HELPBUTTON_ANIM1_START timePerFrame:0.08333333];
        SKAction *buttonSpin2 = [SKAction animateWithTextures:HELPBUTTON_ANIM2_START timePerFrame:0.08333333];
        SKAction *buttonSequence = [SKAction sequence:@[[SKAction waitForDuration:10],buttonSpin1,[SKAction waitForDuration:5],buttonSpin2]];
        SKAction *blinkSequence = [SKAction sequence:@[[SKAction fadeAlphaTo:0.1 duration:0.2],[SKAction fadeAlphaTo:1 duration:0.2]]];
        [helpButton runAction:[SKAction repeatActionForever:buttonSequence] withKey:@"helpButtonSpin"];
        [helpButton runAction:[SKAction repeatAction:blinkSequence count:15] withKey:@"helpButtonBlink"];
        
    }
    
} //--Done--//
-(void)givePowerUps {
    
    ShopLogic *buy1 = [[ShopLogic alloc]init];
    [buy1 buyDP];
    
    ShopLogic *buy2 = [[ShopLogic alloc]init];
    [buy2 buyEL1];
    
    ShopLogic *buy3 = [[ShopLogic alloc]init];
    [buy3 buyHG10];
    
    ShopLogic *buy4 = [[ShopLogic alloc]init];
    [buy4 buyHS10];
    
}
-(void)labelsandLogic {
    
    
    
    
    FruitOrVeggyLogic *loadData = [[FruitOrVeggyLogic alloc]init];
    [loadData loadInitialData];
    
    Data *load = [[Data alloc]init];
    [load loadTopScore];
    
    RankLogic *loadHelp = [[RankLogic alloc]init];
    [loadHelp loadHelpActivated];
    
    RankLogic *canPlayChk = [[RankLogic alloc]init];
    [canPlayChk canPlayCheck];
    
    RankLogic *foodArrayData = [[RankLogic alloc]init];
    [foodArrayData foodsTextures];
    
    
    timesOpened = [[NSUserDefaults standardUserDefaults] integerForKey:@"timesOpened"];
    timesOpened++;
    
    
    if (timesOpened == 1) {
        [self givePowerUps];
        timesOpened++;
        NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];
        [defaults setInteger:timesOpened forKey:@"timesOpened"];
        [defaults synchronize];
    }
    
    NSUserDefaults* tdefaults = [NSUserDefaults standardUserDefaults];
    [tdefaults setInteger:timesOpened forKey:@"timesOpened"];
    [tdefaults synchronize];
    
    SKLabelNode *asNumLabel = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
    asNumLabel.name = @"asNumLabel";
    asNumLabel.position = CGPointMake(self.frame.size.width/3.8, self.frame.size.height/2.16);
    asNumLabel.colorBlendFactor = 1;
    asNumLabel.fontColor = [UIColor whiteColor];
    asNumLabel.zPosition = 210;
    asNumLabel.fontSize = 25;
    [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
    [self addChild:asNumLabel];
    
    asNumLabel.hidden = YES;
    
    SKLabelNode *goldCountDown = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
    goldCountDown.name = @"goldCountDown";
    goldCountDown.position = CGPointZero;
    goldCountDown.colorBlendFactor = 1;
    goldCountDown.fontColor = [UIColor whiteColor];
    goldCountDown.zPosition = 210;
    goldCountDown.fontSize = 50;
    goldCDNum = 10;
    [goldCountDown setText:[NSString stringWithFormat:@"%d", goldCDNum]];
    [self addChild:goldCountDown];
    
    goldCountDown.hidden = YES;
    
    PowerUpAmountsLabel *dpLabel = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    dpLabel.name = @"dpLabel";
    dpLabel.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    dpLabel.zPosition = 210;
    dpLabel.fontSize = 50;
    [dpLabel setPoints:DPInteger];
    [self addChild:dpLabel];
    
    dpLabel.hidden = YES;
    
    
    PowerUpAmountsLabel *dpLabel2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    dpLabel2.name = @"dpLabel2";
    dpLabel2.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    dpLabel2.colorBlendFactor = 1;
    dpLabel2.fontColor = [UIColor blackColor];
    dpLabel2.zPosition = 209;
    dpLabel2.fontSize = 50;
    [dpLabel2 setPoints:DPInteger];
    [self addChild:dpLabel2];
    
    dpLabel2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *tpLabel = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    tpLabel.name = @"tpLabel";
    tpLabel.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/17);
    tpLabel.zPosition = 210;
    tpLabel.fontSize = 50;
    [tpLabel setPoints:TPInteger];
    [self addChild:tpLabel];
    
    tpLabel.hidden = YES;
    
    
    
    PowerUpAmountsLabel *tpLabel2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    tpLabel2.name = @"tpLabel2";
    tpLabel2.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/17);
    tpLabel2.colorBlendFactor = 1;
    tpLabel2.fontColor = [UIColor blackColor];
    tpLabel2.zPosition = 209;
    tpLabel2.fontSize = 50;
    [tpLabel2 setPoints:TPInteger];
    [self addChild:tpLabel2];
    
    tpLabel2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *qpLabel = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    qpLabel.name = @"qpLabel";
    qpLabel.position = CGPointMake(-self.frame.size.width/40, self.frame.size.height/5.4);
    qpLabel.zPosition = 210;
    qpLabel.fontSize = 50;
    [qpLabel setPoints:QPInteger];
    [self addChild:qpLabel];
    
    qpLabel.hidden = YES;
    
    
    PowerUpAmountsLabel *qpLabel2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    qpLabel2.name = @"qpLabel2";
    qpLabel2.position = CGPointMake(-self.frame.size.width/40, self.frame.size.height/5.4);
    qpLabel2.colorBlendFactor = 1;
    qpLabel2.fontColor = [UIColor blackColor];
    qpLabel2.zPosition = 209;
    qpLabel2.fontSize = 50;
    [qpLabel2 setPoints:QPInteger];
    [self addChild:qpLabel2];
    
    qpLabel2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *el1Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    el1Label.name = @"el1Label";
    el1Label.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    el1Label.zPosition = 210;
    el1Label.fontSize = 50;
    [el1Label setPoints:EL1Integer];
    [self addChild:el1Label];
    
    el1Label.hidden = YES;
    
    
    
    PowerUpAmountsLabel *el1Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    el1Label2.name = @"el1Label2";
    el1Label2.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    el1Label2.colorBlendFactor = 1;
    el1Label2.fontColor = [UIColor blackColor];
    el1Label2.zPosition = 209;
    el1Label2.fontSize = 50;
    [el1Label2 setPoints:EL1Integer];
    [self addChild:el1Label2];
    
    el1Label2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *el2Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    el2Label.name = @"el2Label";
    el2Label.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/17);
    el2Label.zPosition = 210;
    el2Label.fontSize = 50;
    [el2Label setPoints:EL2Integer];
    [self addChild:el2Label];
    
    el2Label.hidden = YES;
    
    
    
    PowerUpAmountsLabel *el2Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    el2Label2.name = @"el2Label2";
    el2Label2.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/17);
    el2Label2.colorBlendFactor = 1;
    el2Label2.fontColor = [UIColor blackColor];
    el2Label2.zPosition = 209;
    el2Label2.fontSize = 50;
    [el2Label2 setPoints:EL2Integer];
    [self addChild:el2Label2];
    
    el2Label2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *el3Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    el3Label.name = @"el3Label";
    el3Label.position = CGPointMake(-self.frame.size.width/40, self.frame.size.height/5.4);
    el3Label.zPosition = 210;
    el3Label.fontSize = 50;
    [el3Label setPoints:EL3Integer];
    [self addChild:el3Label];
    
    el3Label.hidden = YES;
    
    
    
    PowerUpAmountsLabel *el3Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    el3Label2.name = @"el3Label2";
    el3Label2.position = CGPointMake(-self.frame.size.width/40, self.frame.size.height/5.4);
    el3Label2.colorBlendFactor = 1;
    el3Label2.fontColor = [UIColor blackColor];
    el3Label2.zPosition = 209;
    el3Label2.fontSize = 50;
    [el3Label2 setPoints:EL3Integer];
    [self addChild:el3Label2];
    
    el3Label2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hg10Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    hg10Label.name = @"hg10Label";
    hg10Label.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    hg10Label.zPosition = 210;
    hg10Label.fontSize = 50;
    [hg10Label setPoints:HG10Integer];
    [self addChild:hg10Label];
    
    hg10Label.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hg10Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    hg10Label2.name = @"hg10Label2";
    hg10Label2.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    hg10Label2.colorBlendFactor = 1;
    hg10Label2.fontColor = [UIColor blackColor];
    hg10Label2.zPosition = 209;
    hg10Label2.fontSize = 50;
    [hg10Label2 setPoints:HG10Integer];
    [self addChild:hg10Label2];
    
    hg10Label2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hg20Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    hg20Label.name = @"hg20Label";
    hg20Label.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/17);
    hg20Label.zPosition = 210;
    hg20Label.fontSize = 50;
    [hg20Label setPoints:HG20Integer];
    [self addChild:hg20Label];
    
    hg20Label.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hg20Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    hg20Label2.name = @"hg20Label2";
    hg20Label2.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/17);
    hg20Label2.colorBlendFactor = 1;
    hg20Label2.fontColor = [UIColor blackColor];
    hg20Label2.zPosition = 209;
    hg20Label2.fontSize = 50;
    [hg20Label2 setPoints:HG20Integer];
    [self addChild:hg20Label2];
    
    hg20Label2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hg30Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    hg30Label.name = @"hg30Label";
    hg30Label.position = CGPointMake(-self.frame.size.width/40, self.frame.size.height/5.4);
    hg30Label.zPosition = 210;
    hg30Label.fontSize = 50;
    [hg30Label setPoints:HG30Integer];
    [self addChild:hg30Label];
    
    hg30Label.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hg30Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    hg30Label2.name = @"hg30Label2";
    hg30Label2.position = CGPointMake(-self.frame.size.width/40, self.frame.size.height/5.4);
    hg30Label2.colorBlendFactor = 1;
    hg30Label2.fontColor = [UIColor blackColor];
    hg30Label2.zPosition = 209;
    hg30Label2.fontSize = 50;
    [hg30Label2 setPoints:HG30Integer];
    [self addChild:hg30Label2];
    
    hg30Label2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hs10Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    hs10Label.name = @"hs10Label";
    hs10Label.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    hs10Label.zPosition = 210;
    hs10Label.fontSize = 50;
    [hs10Label setPoints:HS10Integer];
    [self addChild:hs10Label];
    
    hs10Label.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hs10Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    hs10Label2.name = @"hs10Label2";
    hs10Label2.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    hs10Label2.colorBlendFactor = 1;
    hs10Label2.fontColor = [UIColor blackColor];
    hs10Label2.zPosition = 209;
    hs10Label2.fontSize = 50;
    [hs10Label2 setPoints:HS10Integer];
    [self addChild:hs10Label2];
    
    hs10Label2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hs20Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    hs20Label.name = @"hs20Label";
    hs20Label.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/17);
    hs20Label.zPosition = 210;
    hs20Label.fontSize = 50;
    [hs20Label setPoints:HS20Integer];
    [self addChild:hs20Label];
    
    hs20Label.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hs20Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    hs20Label2.name = @"hs20Label2";
    hs20Label2.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/17);
    hs20Label2.colorBlendFactor = 1;
    hs20Label2.fontColor = [UIColor blackColor];
    hs20Label2.zPosition = 209;
    hs20Label2.fontSize = 50;
    [hs20Label2 setPoints:HS20Integer];
    [self addChild:hs20Label2];
    
    hs20Label2.hidden = YES;
    
    
    
    PowerUpAmountsLabel *hs30Label = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"DimitriSwank"];
    hs30Label.name = @"hs30Label";
    hs30Label.position = CGPointMake(-self.frame.size.width/40, self.frame.size.height/5.4);
    hs30Label.zPosition = 210;
    hs30Label.fontSize = 50;
    [hs30Label setPoints:HG30Integer];
    [self addChild:hs30Label];
    
    hs30Label.hidden = YES;
    
    PowerUpAmountsLabel *hs30Label2 = [PowerUpAmountsLabel powerUpsLabelWithFontNamed:@"Dimitri"];
    hs30Label2.name = @"hs30Label2";
    hs30Label2.position = CGPointMake(-self.frame.size.width/40, self.frame.size.height/5.4);
    hs30Label2.colorBlendFactor = 1;
    hs30Label2.fontColor = [UIColor blackColor];
    hs30Label2.zPosition = 209;
    hs30Label2.fontSize = 50;
    [hs30Label2 setPoints:HG30Integer];
    [self addChild:hs30Label2];
    
    hs30Label2.hidden = YES;
    if (rankNumber < 27) {
    NMPointsLabel *pointsLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    pointsLabel.name = @"pointsLabel";
    pointsLabel.position = CGPointMake(-self.frame.size.width/70, self.frame.size.height/2.77);
    pointsLabel.colorBlendFactor = 1;
    pointsLabel.fontColor = [UIColor blackColor];
    pointsLabel.fontSize = 20;
    pointsLabel.zPosition = 100.1;
    [self addChild:pointsLabel];
    
    NMPointsLabel *pointsLabel2 = [NMPointsLabel pointsLabelWithFontNamed:@"Dimitri"];
    pointsLabel2.name = @"pointsLabel2";
    pointsLabel2.position = CGPointMake(-self.frame.size.width/70, self.frame.size.height/2.77);
    pointsLabel2.colorBlendFactor = 1;
    pointsLabel2.fontColor = [UIColor colorWithRed:(1) green:(0.80) blue:(0.11) alpha:1];
    pointsLabel2.fontSize = 20;
    pointsLabel2.zPosition = 100;
    [self addChild:pointsLabel2];
    }
    NMPointsLabel *gameOverPointsLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    gameOverPointsLabel.name = @"gameOverPointsLabel";
    gameOverPointsLabel.position = CGPointMake(-self.frame.size.width/7, self.frame.size.height/7.8);
    gameOverPointsLabel.fontSize = 20;
    gameOverPointsLabel.zPosition = 102.5;
    gameOverPointsLabel.hidden = YES;
    [self addChild:gameOverPointsLabel];
    
    NMPointsLabel *gameOverPointsLabel2 = [NMPointsLabel pointsLabelWithFontNamed:@"Dimitri"];
    gameOverPointsLabel2.name = @"gameOverPointsLabel2";
    gameOverPointsLabel2.position = CGPointMake(-self.frame.size.width/7, self.frame.size.height/7.8);
    gameOverPointsLabel2.fontSize = 20;
    gameOverPointsLabel2.zPosition = 102.4;
    gameOverPointsLabel2.hidden = YES;
    [self addChild:gameOverPointsLabel2];
    
    NMPointsLabel *countDownLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    countDownLabel.name = @"countDownLabel";
    countDownLabel.position = CGPointMake(0, -self.frame.size.height/2.76);
    countDownLabel.fontSize = 50;
    countDownLabel.zPosition = 102.5;
    [self addChild:countDownLabel];
    countDownLabel.hidden = YES;
    
    NMPointsLabel *foodCollectedLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    foodCollectedLabel.name = @"foodCollectedLabel";
    foodCollectedLabel.position = CGPointMake(self.frame.size.height/200, -self.frame.size.height/2.1);
    foodCollectedLabel.fontSize = 20;
    foodCollectedLabel.zPosition = 102.5;
    [self addChild:foodCollectedLabel];
    foodCollectedLabel.hidden = YES;
    
    NMPointsLabel *fruitsCollectedLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    fruitsCollectedLabel.name = @"fruitsCollectedLabel";
    fruitsCollectedLabel.position = CGPointMake(-self.frame.size.width/4, -self.frame.size.height/2.5);
    fruitsCollectedLabel.fontSize = 20;
    fruitsCollectedLabel.zPosition = 102.5;
    [self addChild:fruitsCollectedLabel];
    fruitsCollectedLabel.hidden = YES;
    
    NMPointsLabel *vegetablesCollectedLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    vegetablesCollectedLabel.name = @"vegetablesCollectedLabel";
    vegetablesCollectedLabel.position = CGPointMake(self.frame.size.width/3.8, -self.frame.size.height/2.5);
    vegetablesCollectedLabel.fontSize = 20;
    vegetablesCollectedLabel.zPosition = 102.5;
    [self addChild:vegetablesCollectedLabel];
    vegetablesCollectedLabel.hidden = YES;
    
    NMPointsLabel *othersCollectedLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    othersCollectedLabel.name = @"othersCollectedLabel";
    othersCollectedLabel.position = CGPointMake(self.frame.size.height/200, -self.frame.size.height/2.1);
    othersCollectedLabel.fontSize = 20;
    othersCollectedLabel.zPosition = 102.5;
    [self addChild:othersCollectedLabel];
    othersCollectedLabel.hidden = YES;
    
    NMPointsLabel *foodsCountDownLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    foodsCountDownLabel.name = @"foodsCountDownLabel";
    foodsCountDownLabel.position = CGPointMake(self.frame.size.height/200, -self.frame.size.height/3.25);
    foodsCountDownLabel.fontSize = 25;
    foodsCountDownLabel.zPosition = 102.5;
    [self addChild:foodsCountDownLabel];
    foodsCountDownLabel.hidden = YES;
    
    NMPointsLabel *topLabel = [NMPointsLabel pointsLabelWithFontNamed:@"DimitriSwank"];
    topLabel.position = CGPointMake(-self.frame.size.width/18, self.frame.size.height/22);
    topLabel.fontSize = 20;
    topLabel.zPosition = 102.5;
    topLabel.name = @"topLabel";
    topLabel.fontColor = [UIColor blackColor];
    topLabel.colorBlendFactor = 1;
    [self addChild:topLabel];
    [topLabel setPoints:scoreInput];
    
    NMPointsLabel *topLabel2 = [NMPointsLabel pointsLabelWithFontNamed:@"Dimitri"];
    topLabel2.position = CGPointMake(-self.frame.size.width/18, self.frame.size.height/22);
    topLabel2.fontSize = 20;
    topLabel2.zPosition = 102.4;
    topLabel2.name = @"topLabel2";
    topLabel2.fontColor = [UIColor greenColor];
    topLabel2.colorBlendFactor = 1;
    [topLabel2 setPoints:scoreInput];
    [self addChild:topLabel2];
    topLabel.hidden = YES;
    topLabel2.hidden = YES;
    
    FactoryBucksLabel *amountLabel = [FactoryBucksLabel FBLabelWithFontNamed:@"DimitriSwank"];
    amountLabel.name = @"amountLabel";
    amountLabel.position = CGPointMake(self.frame.size.width/10, -self.frame.size.height/40);
    amountLabel.zPosition = 102.5;
    amountLabel.fontSize = 20;
    amountLabel.fontColor = [UIColor blackColor];
    amountLabel.colorBlendFactor = 1;
    [amountLabel setPoints:amountFB];
    [self addChild:amountLabel];
    amountLabel.hidden = YES;
    
    FactoryBucksLabel *kasbE = [FactoryBucksLabel FBLabelWithFontNamed:@"Dimitri"];
    kasbE.name = @"kasbE";
    kasbE.position = CGPointMake(self.frame.size.width/10, -self.frame.size.height/40);
    kasbE.zPosition = 102.4;
    kasbE.fontSize = 20;
    kasbE.fontColor = [UIColor greenColor];
    kasbE.colorBlendFactor = 1;
    [kasbE setPoints:amountFB];
    [self addChild:kasbE];
    kasbE.hidden = YES;
    
    beatObj = NO;
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setBool:beatObj forKey:@"beatObj"];
    [defaults synchronize];
    
    NSUserDefaults *defaultTaunt = [NSUserDefaults standardUserDefaults];
    canTaunt = [defaultTaunt boolForKey:@"canTaunt"];
    
    sprite.physicsBody.velocity = CGVectorMake(0, 0);
    
    autoSwipeF = [SKAction moveTo:CGPointMake(-500, y) duration:0.5];
    autoSwipeV = [SKAction moveTo:CGPointMake(500, y) duration:0.5];
    autoSwipeO = [SKAction moveTo:CGPointMake(sprite.position.x, -500) duration:0.5];
    
    
    if (canActivateDP == YES || canActivateTP == YES || canActivateQP == YES || canActivateEL1 == YES || canActivateEL2 == YES || canActivateEL3 == YES || canActivateHG10 == YES || canActivateHG20 == YES || canActivateHG30 == YES || canActivateHS10 == YES || canActivateHS20 == YES || canActivateHS30 == YES) {
        
        powerUpHolderTexture = [gameSceneSpritesFive textureNamed:@"FFGameScenePowerUpAnimHolder"];
        
        powerUpHolder = [SKSpriteNode spriteNodeWithTexture:powerUpHolderTexture];
        powerUpHolder.position = CGPointZero;
        powerUpHolder.size = CGSizeMake(powerUpHolder.frame.size.width/s, powerUpHolder.frame.size.height / s);
        powerUpHolder.zPosition = 4.9;
        [self.spriteLayer addChild:powerUpHolder];
        
    }
    
    if (tauntInt <= 0) {
    tauntInt = 5;
    }
    attack = YES;
    asNum = 0;
    attackNum = 0;
    gameBegan = NO;
    resumeFromLoss = NO;
    canBlock = NO;
    canSwipe = YES;
    canEat = NO;
    goDelay = NO;
    cycle = 0;
    fdNum = 0;
    f = 5;
    self.rightWay = YES;
    self.bronzeDrop = NO;
    self.silverDrop = NO;
    self.goldDrop = NO;
    if (prizeAquired == NO) {
    payAmount = 0;
    pay = NO;
    pay500 = NO;
    pay750 = NO;
    pay1000 = NO;
    pay1250 = NO;
    pay2000 = NO;
    pay3000 = NO;
    pay4000 = NO;
    pay5000 = NO;
    pay6000 = NO;
    pay7000 = NO;
    pay8000 = NO;
    pay9000 = NO;
    showGoldGloves = NO;
    showGoldEagle = NO;
    showGoldAcorn = NO;
    showGoldApple = NO;
    showGoldBar = NO;
    showGoldChalice = NO;
    showGoldEagle = NO;
    showGoldGolfClub = NO;
    showGoldMicrophone = NO;
    showGoldSwords = NO;
    showGoldUnicron = NO;
    showGoldWatch = NO;
        
    SKTextureAtlas *tutorialSprites = [self textureAtlasNamed:@"Tutorial"];
    SKTexture *tutTexture = [tutorialSprites textureNamed:@"Tutorial4"];
    SKSpriteNode *tut = [SKSpriteNode spriteNodeWithTexture:tutTexture];
    tut.position = CGPointZero;
    tut.zPosition = 19;
    tut.name = @"tutorial";
    tut.size = CGSizeMake(tut.frame.size.width/s, tut.frame.size.height/s);
    [self.spriteLayer addChild:tut];
    
    }
    canHelp = NO;
    canBat = NO;
    if (rankNumber >= 27) {
        canActivateDP = NO;
        canActivateTP = NO;
        canActivateQP = NO;
        canActivateHS10 = NO;
        canActivateHS20 = NO;
        canActivateHS30 = NO;
        canActivateEL1 = NO;
        canActivateEL2 = NO;
        canActivateEL3 = NO;
        canActivateHG10 = NO;
        canActivateHG20 = NO;
        canActivateHG30 = NO;
        bossBattleIntro1 = [self textureAtlasNamed:@"BossBattleIntro1"];
        lightningAttackSprites1 = [self textureAtlasNamed:@"LightningAttackSprites1"];
        lightningAttackSprites2 = [self textureAtlasNamed:@"LightningAttackSprites2"];
        lightningAttackSprites3 = [self textureAtlasNamed:@"LightningAttackSprites3"];
        lightningAttackSprites4 = [self textureAtlasNamed:@"LightningAttackSprites4"];
        lightningAttackSprites5 = [self textureAtlasNamed:@"LightningAttackSprites5"];
        ReggyBatPull = [self textureAtlasNamed:@"ReggyBatPull"];
        ReggyWave = [self textureAtlasNamed:@"ReggyWaveSprites"];
        ReggySmashSprites = [self textureAtlasNamed:@"ReggySmashSprites"];
        ReggyFoodFallSprites = [self textureAtlasNamed:@"ReggyFoodFallSprites"];
        ReggyEatSprites = [self textureAtlasNamed:@"ReggyEatSprites"];
        ReggySheildSprites = [self textureAtlasNamed:@"ReggySheildSprites"];
        ReggyMotherBoardSprites = [self textureAtlasNamed:@"MyMotherBoardSprites"];
        ReggyBigMistake = [self textureAtlasNamed:@"BogMistakeSprites"];
        ReggySpareMe = [self textureAtlasNamed:@"SpareMeSprites"];
        ReggyWeakHumans = [self textureAtlasNamed:@"WeakHumansSprites"];
        ReggyReggyBoom = [self textureAtlasNamed:@"ReggyBoomSprites"];
        EnergyPullSprites = [self textureAtlasNamed:@"EnergyPullSprites"];
        HealthBarSprites = [self textureAtlasNamed:@"HealthBarSprites"];
        shadeAnimSprites = [self textureAtlasNamed:@"ShadeAnimSprites"];
        creditSprites = [self textureAtlasNamed:@"CreditSprites"];
    }
       
    
    NSUserDefaults *defaults1 = [NSUserDefaults standardUserDefaults];
    rankNumber = [defaults1 integerForKey:@"rankNumber"];
    NSLog(@"rankNumberCheck:" @"%ld", (long)rankNumber);
    
    if (rankNumber > topRank) {
        topRank = rankNumber;
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        [defaults setInteger:topRank forKey:@"topRank"];
        [defaults synchronize];
    }
    
} //--LabelForPauseMenu--//
-(void)startGameBlinkAction {
    
    startGameTexture = [buttonSprites textureNamed:@"FFGameSceneStartGame"];
    
    startGame = [SKSpriteNode spriteNodeWithTexture:startGameTexture];
    startGame.size = CGSizeMake(startGame.frame.size.width/s, startGame.frame.size.height / s);
    startGame.position = CGPointZero;
    startGame.name = @"StartGame";
    startGame.zPosition = 100;
    [self.spriteLayer addChild:startGame];
    
    SKAction *startGameFade = [SKAction fadeAlphaTo:0.1 duration:1];
    SKAction *startGameColor = [SKAction fadeAlphaTo:1.0 duration:1];
    SKAction *startGameSequence = [SKAction sequence:@[startGameFade,startGameColor]];
    SKAction *startGameActionRepeatForever = [SKAction repeatActionForever:startGameSequence];
    [startGame runAction:startGameActionRepeatForever];
    
    if (rankNumber == 27) {
        [clouds removeAllActions];
        [startGame removeFromParent];
        [startGame removeAllActions];
        [self reggyBossBattleIntroOne];
        [self healthBars];
    }
    
    if (rankNumber == 28) {
        [clouds removeAllActions];
        [startGame removeFromParent];
        [startGame removeAllActions];
        [self reggyBossBattleIntroTwo];
        [self healthBars];
        
    }
    
    if (rankNumber == 29) {
        [clouds removeAllActions];
        [startGame removeFromParent];
        [startGame removeAllActions];
        [self reggyBossBattleIntroThree];
        [self healthBars];
        
    }
    
} //--Done--//
-(void)handleNodesAtLocation:(CGPoint)location {
    NSArray* nodes = [[self spriteLayer] nodesAtPoint:location];
    for(SKNode * node in nodes)
    {
        if ([[node name] isEqualToString:@"StartGame"] && (self.spriteLayer.paused == NO))
        {
            [clickSound play];
            gameBegan = YES;
            
            
            SKAction *hideTutorial = [SKAction fadeAlphaTo:0.0 duration:1];
            SKAction *showTutorial = [SKAction fadeAlphaTo:1.0 duration:1];
            
            
            SKAction *tutorialSequence = [SKAction sequence:@[[SKAction runBlock:^{
                
                foodDFoodSKTexture = [gameSceneSpritesNine textureNamed:@"FoodDropperAnim0001"];
                foodDFoodSK = [SKSpriteNode spriteNodeWithTexture:foodDFoodSKTexture];
                foodDFoodSK.position = CGPointMake(0, 0);
                foodDFoodSK.zPosition = 2;
                [self.spriteLayer addChild:foodDFoodSK];
                
                
                SKAction *bGAction = [SKAction animateWithTextures:FOODDROPPERSPRITES_ANIM_START timePerFrame:5];
                SKAction *moveUp = [SKAction moveToY:38 duration:60];
                sequenceFBG = [SKAction sequence:@[bGAction,moveUp]];
                [foodDFoodSK runAction:sequenceFBG];
                
                sideFoodTexture = [gameSceneSpritesNine textureNamed:@"SidePipeAnim0001"];
                
                sideFood = [SKSpriteNode spriteNodeWithTexture:sideFoodTexture];
                sideFood.position = CGPointZero;
                sideFood.zPosition = 2;
                [self.spriteLayer addChild:sideFood];
                
                SKAction *sideFoodAnim = [SKAction animateWithTextures:SIDEPIPEFOOD_ANIM1_START timePerFrame:0.083333333];
                SKAction *sideFoodAnimConst = [SKAction animateWithTextures:SIDEPIPEFOOD_ANIM2_START timePerFrame:0.083333333];
                SKAction *repeatAcion = [SKAction repeatActionForever:sideFoodAnimConst];
                sideFoodAnimSequence = [SKAction sequence:@[sideFoodAnim,repeatAcion]];
                [sideFood runAction:sideFoodAnimSequence];
                
                /*SKAction *bgAni1 = [SKAction animateWithTextures:BACKGROUND_ANIM1_START timePerFrame:0.083333333];
                 SKAction *bgAni2 = [SKAction animateWithTextures:BACKGROUND_ANIM2_START timePerFrame:0.083333333];
                 SKAction *repeatBGAni2 = [SKAction repeatActionForever:bgAni2];
                 SKAction *bgSeq = [SKAction sequence:@[bgAni1,repeatBGAni2]];
                 [backgroundAnim runAction:bgSeq];*/
                
                
                [[self.spriteLayer childNodeWithName:@"tutorial"] removeFromParent];
                
                SKTextureAtlas *tutorialSprites = [self textureAtlasNamed:@"Tutorial"];
                SKTexture *tutTexture = [tutorialSprites textureNamed:@"Tutorial5"];
                SKSpriteNode *tut = [SKSpriteNode spriteNodeWithTexture:tutTexture];
                tut.position = CGPointZero;
                tut.zPosition = 19;
                tut.name = @"tutorial";
                tut.size = CGSizeMake(tut.frame.size.width/s, tut.frame.size.height/s);
                [self.spriteLayer addChild:tut];
                
                
            }],showTutorial, hideTutorial, showTutorial, hideTutorial]];
            [tutorial runAction:tutorialSequence completion:^{
                [self countdownGo];
            }];
            [startGame removeFromParent];
            
                [helpButton removeFromParent];
            
        }
        if ([[node name] isEqualToString:@"buyRetry1"])
        {
            
            [self buyRetryFromLossClick];
            
        }
        if ([[node name] isEqualToString:@"buyRetry2"])
             {
                 
            [self buyRetryPlus10Click];
                 
        }
        if ([[node name] isEqualToString:@"Fight"] && priorityClick == NO)
        {
            [clickSound play];
            [self removeActionForKey:@"Fire"];
            [beginBattle removeFromParent];
            [unlockableLock1 removeAllActions];
            unlockableLock1.alpha = 1.0;
            [unlockableLock2 removeAllActions];
            unlockableLock2.alpha = 1.0;
            [unlockableLock3 removeAllActions];
            unlockableLock3.alpha = 1.0;
            fight = YES;
            
                if (rankNumber == 27) {
                    
                    [reggyFace runAction:[SKAction sequence:@[[SKAction waitForDuration:0.416666666666667],[SKAction removeFromParent]]]];
                    
                    [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:A4_Anim_Start timePerFrame:0.083333333333]]] completion:^{
                        [self battleSequence1];
                    }];
                }
                
                if (rankNumber == 28) {
                    [reggyFace removeFromParent];
                     [ReggyBot removeFromParent];
                    [self battleSequence2];
                    
                }
                
                if (rankNumber == 29) {
                    [reggyFace removeFromParent];
                    [ReggyBot removeFromParent];
                    [self battleSequence3];
                    
                }
                
            [self countdownGo];
        }
        if ([[node name] isEqualToString:@"revive"])
        {
            [clickSound play];
            [self buyReviveClick];
            
        }
        if ([[node name] isEqualToString:@"3xText"] && fight == NO)
        {
            [dink play];
            priorityClick = YES;
            [antiFreezeLockText removeFromParent];
            [criticalHitLockText removeFromParent];
            [threeXDamageLockText removeFromParent];
            
            threeXDamageLockTextTexture = [buttonSprites textureNamed:@"TripleDamageLockText"];
            threeXDamageLockText = [SKSpriteNode spriteNodeWithTexture:threeXDamageLockTextTexture];
            threeXDamageLockText.size = CGSizeMake(threeXDamageLockText.frame.size.width/s, threeXDamageLockText.frame.size.height / s);
            threeXDamageLockText.position = CGPointZero;
            threeXDamageLockText.zPosition = 999;
            threeXDamageLockText.name = @"closeText";
            [self.spriteLayer addChild:threeXDamageLockText];
            
            if (cantLock1Blink == NO) {
                cantLock1Blink = YES;
                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
                [defaults setBool:cantLock1Blink forKey:@"cantLock1Blink"];
                [defaults synchronize];
                [unlockableLock1 removeAllActions];
                unlockableLock1.alpha = 1.0;
            }
        }
        if ([[node name] isEqualToString:@"critText"] && fight == NO)
        {
            [dink play];
            priorityClick = YES;
            [antiFreezeLockText removeFromParent];
            [criticalHitLockText removeFromParent];
            [threeXDamageLockText removeFromParent];
            
            criticalHitLockTextTexture = [buttonSprites textureNamed:@"CriticalPunchLockText"];
            criticalHitLockText = [SKSpriteNode spriteNodeWithTexture:criticalHitLockTextTexture];
            criticalHitLockText.size = CGSizeMake(criticalHitLockText.frame.size.width/s, criticalHitLockText.frame.size.height / s);
            criticalHitLockText.position = CGPointZero;
            criticalHitLockText.zPosition = 999;
            criticalHitLockText.name = @"closeText";
            [self.spriteLayer addChild:criticalHitLockText];
            
            if (cantLock2Blink == NO) {
                cantLock2Blink = YES;
                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
                [defaults setBool:cantLock2Blink forKey:@"cantLock2Blink"];
                [defaults synchronize];
                [unlockableLock2 removeAllActions];
                unlockableLock2.alpha = 1.0;
            }
            
        }
        if ([[node name] isEqualToString:@"antiText"] && fight == NO)
        {
            [dink play];
            priorityClick = YES;
            [antiFreezeLockText removeFromParent];
            [criticalHitLockText removeFromParent];
            [threeXDamageLockText removeFromParent];
            
            antiFreezeLockTextTexture = [buttonSprites textureNamed:@"AntiFreezeLockText"];
            antiFreezeLockText = [SKSpriteNode spriteNodeWithTexture:antiFreezeLockTextTexture];
            antiFreezeLockText.size = CGSizeMake(antiFreezeLockText.frame.size.width/s, antiFreezeLockText.frame.size.height / s);
            antiFreezeLockText.position = CGPointZero;
            antiFreezeLockText.zPosition = 999;
            antiFreezeLockText.name = @"closeText";
            [self.spriteLayer addChild:antiFreezeLockText];
            
            if (cantLock3Blink == NO) {
                cantLock3Blink = YES;
                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
                [defaults setBool:cantLock3Blink forKey:@"cantLock3Blink"];
                [defaults synchronize];
                [unlockableLock3 removeAllActions];
                unlockableLock3.alpha = 1.0;
            }
            
        }
        if ([[node name] isEqualToString:@"closeText"])
        {
            [dink play];
            [self runAction:[SKAction sequence:@[[SKAction waitForDuration:0.1],[SKAction runBlock:^{priorityClick = NO;}]]]];
            [antiFreezeLockText removeFromParent];
            [criticalHitLockText removeFromParent];
            [threeXDamageLockText removeFromParent];
            
        }
        if ([[node name] isEqualToString:@"objCash"])
        {
            [dink play];
            Data *FBCount = [[Data alloc]init];
            [FBCount loadAmountFB];
            FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
            FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
            [amountLabel removeAllActions];
            [kasbE removeAllActions];
            amountLabel.hidden = YES;
            kasbE.hidden = YES;
            amountLabel.alpha = 1;
            kasbE.alpha = 1;
            [node removeFromParent];
            [node removeAllActions];
            //[objMoney2 removeFromParent];
            //[objMoney2 removeAllActions];
            [amountLabel setPoints:amountFB];
            [kasbE setPoints:amountLabel.amount];
            amountLabel.hidden = NO;
            kasbE.hidden = NO;
            
        }
        if ([[node name] isEqualToString:@"CongradsOk"])
        {
            [dink play];
            [congradsOk removeFromParent];
            [lvlNumber removeActionForKey:@"LVLPop"];
            congradSpritesOne = nil;
            congradSpritesTwo = nil;
            //congradSpritesThree = nil;
            congranSpritesFour = nil;
            congradSpritesFive = nil;
            congradSpritesSix = nil;
            congradSpritesSeven = nil;
            congradSpritesEight = nil;
            congradSpritesTen =  nil;
            congradSpritesEleven =  nil;
            congradSpritesTwelve = nil;
            
            SKTextureAtlas *congradSpritesThree = [self textureAtlasNamed:@"CongradsBoardSpritesThree"];
            
            keyTexture = [congradSpritesThree textureNamed:@"keyAnim0001"];
            
            key = [SKSpriteNode spriteNodeWithTexture:keyTexture];
            key.size = CGSizeMake(key.frame.size.width/s, key.frame.size.height / s);
            key.position = CGPointZero;
            key.zPosition = 1001.09;
            [self.spriteLayer addChild:key];
            
            if (rankNumber == 2) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlTwo_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            if (rankNumber == 5) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlThree_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            if (rankNumber == 8) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlFour_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            if (rankNumber == 11) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlFive_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            if (rankNumber == 14) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlSix_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            if (rankNumber == 17) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlSeven_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            if (rankNumber == 20) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlEight_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            if (rankNumber == 23) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlNine_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            if (rankNumber == 26) {
                
                SKAction *lvlAnim = [SKAction animateWithTextures:LvlTen_Anim3_START timePerFrame:0.08333333];
                [lvlNumber runAction:lvlAnim completion:^{[self runAction:[SKAction sequence:@[[SKAction runBlock:^{
                    
                    [self gameOverSprites];
                    
                    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                    [amountLabel removeAllActions];
                    [kasbE removeAllActions];
                    amountLabel.hidden = YES;
                    kasbE.hidden = YES;
                    [amountLabel setPoints:amountFB];
                    [kasbE setPoints:amountLabel.amount];
                    amountLabel.hidden = NO;
                    kasbE.hidden = NO;
                    
                }]]]];}];
                
            }
            
            SKAction *keyAnim = [SKAction animateWithTextures:Key_Anim_START timePerFrame:0.08333333];
            [key runAction:keyAnim];
        }
        else if ([[node name] isEqualToString:@"ReplayButton"])
        {
            [dink play];
            [self goToNormalMode];
        }
        else if ([[node name] isEqualToString:@"retryBB"])
        {
            [clickSound play];
            [self goToNormalMode];
        }
        else if ([[node name] isEqualToString:@"DestroyBot"])
        {
            [clickSound play];
            [self reggyDeath];
        }
        else if ([[node name] isEqualToString:@"SpareBot"])
        {
            [clickSound play];
            [self weakHumans];
        }
        else if ([[node name] isEqualToString:@"LMUPGB"])
        {
            //[dink play];
            
            if (maxPlaysLvl == 0) {
                [self performSelector:@selector(buyUpgradeLivesClick) withObject:self afterDelay:0.5];
            }
            if (maxPlaysLvl == 1) {
                [self performSelector:@selector(buyRefillLivesClick) withObject:self afterDelay:0.5];
            }
            
        }
        else if ([[node name] isEqualToString:@"help"])
        {
            [dink play];
            [self buyHelpClick];
        }
        else if ([[node name] isEqualToString:@"NextButton"])
        {
            [dink play];
            NSUserDefaults *defaults0 = [NSUserDefaults standardUserDefaults];
            beatObj = [defaults0 boolForKey:@"beatObj"];
            
            NSUserDefaults *defaults1 = [NSUserDefaults standardUserDefaults];
            rankNumber = [defaults1 integerForKey:@"rankNumber"];
            NSLog(@"NextRankNumber:" @"%ld", (long)rankNumber);
            
                rankNumber++;
                beatObj = NO;
                NSUserDefaults *defaults01 = [NSUserDefaults standardUserDefaults];
                [defaults01 setInteger:rankNumber forKey:@"rankNumber"];
                [defaults01 synchronize];
                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
                [defaults setBool:beatObj forKey:@"beatObj"];
                [defaults synchronize];
                NSLog(@"NextRankNumber:" @"%ld", (long)rankNumber);
            
            if (rankNumber < 27) {
                [self performSelector:@selector(goToLoadingScreen) withObject:self afterDelay:0.125];
            } else {
                [self performSelector:@selector(goToNormalMode) withObject:self afterDelay:0.125];
            }
        }
        else if ([[node name] isEqualToString:@"continueBB"])
        {
            [clickSound play];
            NSUserDefaults *defaults0 = [NSUserDefaults standardUserDefaults];
            beatObj = [defaults0 boolForKey:@"beatObj"];
            
            NSUserDefaults *defaults1 = [NSUserDefaults standardUserDefaults];
            rankNumber = [defaults1 integerForKey:@"rankNumber"];
            NSLog(@"NextRankNumber:" @"%ld", (long)rankNumber);
            
            rankNumber++;
            beatObj = NO;
            NSUserDefaults *defaults01 = [NSUserDefaults standardUserDefaults];
            [defaults01 setInteger:rankNumber forKey:@"rankNumber"];
            [defaults01 synchronize];
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            [defaults setBool:beatObj forKey:@"beatObj"];
            [defaults synchronize];
            NSLog(@"NextRankNumber:" @"%ld", (long)rankNumber);
            
            if (rankNumber < 27) {
                [self performSelector:@selector(goToLoadingScreen) withObject:self afterDelay:0.125];
            } else {
                [self performSelector:@selector(goToNormalMode) withObject:self afterDelay:0.125];
            }
        }
        else if ([[node name] isEqualToString:@"OK"])
        {
            [ok removeFromParent];
            NMPointsLabel *gameOC = (NMPointsLabel *)[self childNodeWithName:@"gameOC"];
            NMPointsLabel *gameOC2 = (NMPointsLabel *)[self childNodeWithName:@"gameOC2"];
            [gameOC removeFromParent];
            [gameOC2 removeFromParent];
            [self performSelector:@selector(gameOverSprites) withObject:self afterDelay:1];
        }
        else if ([[node name] isEqualToString:@"Restart"])
        {
            [dink play];
            [self restartGame];
        }
        else if ([[node name] isEqualToString:@"Home"])
        {
            
            [dink play];
            [self goToHomeScreen];
            
        }
        else if ([[node name] isEqualToString:@"HomePM"])
        {
            
            [dink play];
            [self leaveGame2];
            
        }
        else if ([[node name] isEqualToString:@"HomeButton"])
        {
            
            [dink play];
            [self goToHomeScreen];
            
        }
        else if ([[node name] isEqualToString:@"Pause"])
        {
            [dink play];
            [pause removeFromParent];
            gameSceneSpritesEight = [self textureAtlasNamed:@"GameSceneSpritesEight"];
            
            self.pauseLayer = [SKNode node];
            self.pauseLayer.position = CGPointZero;
            
            [self.spriteLayer addChild:self.pauseLayer];
            
            [hourGlass10SP removeFromParent];
            [hourGlass20SP removeFromParent];
            [hourGlass30SP removeFromParent];
            [doublePointsSP removeFromParent];
            [triplePointsSP removeFromParent];
            [quadPointsSP removeFromParent];
            [headStart10SP removeFromParent];
            [headStart20SP removeFromParent];
            [headStart30SP removeFromParent];
            [extraLife1SP removeFromParent];
            [extraLife2SP removeFromParent];
            [extraLife3SP removeFromParent];
            self.spriteLayer.paused = YES;
            self.sequenceLayer.paused = YES;
            [sprite removeAllActions];
            //flipSequnce.speed = 0;
            sprite.physicsBody.dynamic = NO;
            freeze = NO;
            if (invalidateTimer == YES) {
                [timer invalidate];
                [timer05 invalidate];
                [timer15 invalidate];
                [timer2 invalidate];
            }
            //[self removeActionForKey:@"G1"];
            
                [self pauseGame];
            
        }
        else if ([[node name] isEqualToString:@"Resume"])
        {
            [dink play];
            [self.pauseLayer removeFromParent];
            [self.pauseLayer removeAllChildren];
            [self.pauseLayer removeAllActions];
            gameSceneSpritesEight = nil;
            
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
            
            
            invalidateTimer = NO;
            
            
            [self unPause];
            
        }
        else if ([[node name] isEqualToString:@"PMFactoryBucksButton"])
        {
            [dink play];
            [levelFoods removeFromParent];
            [objectives removeFromParent];
            [pdScene removeFromParent];
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            [factoryBucksTitleBox removeFromParent];
            [buy300k removeFromParent];
            [buy150k removeFromParent];
            [buy45k removeFromParent];
            [buy75k removeFromParent];
            [buy30k removeFromParent];
            [buy9k removeFromParent];
            [sidePD removeFromParent];
            [sidePM removeFromParent];
            [sideSR removeFromParent];
            [sideEL removeFromParent];
            [sideHS removeFromParent];
            [sideCS removeFromParent];
            [self factoryBucksScene];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
            
        }
        else if ([[node name] isEqualToString:@"buy300k"])
        {
            [dink play];
            [self buy300kClick];
        }
        else if ([[node name] isEqualToString:@"buy150k"])
        {
            [dink play];
            [self buy150kClick];
        }
        else if ([[node name] isEqualToString:@"buy75k"])
        {
            [dink play];
            [self buy75kClick];
        }
        else if ([[node name] isEqualToString:@"buy45k"])
        {
            [dink play];
            [self buy45kClick];
        }
        else if ([[node name] isEqualToString:@"buy30k"])
        {
            [dink play];
            [self buy30kClick];
        }
        else if ([[node name] isEqualToString:@"buy9k"])
        {
            [dink play];
            [self buy9kClick];
        }
        else if ([[node name] isEqualToString:@"PMPowerUpsButton"])
        {
            [dink play];
            [levelFoods removeFromParent];
            [objectives removeFromParent];
            [pdScene removeFromParent];
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            [factoryBucksTitleBox removeFromParent];
            [buy300k removeFromParent];
            [buy150k removeFromParent];
            [buy45k removeFromParent];
            [buy75k removeFromParent];
            [buy30k removeFromParent];
            [buy9k removeFromParent];
            [sidePD removeFromParent];
            [sidePM removeFromParent];
            [sideSR removeFromParent];
            [sideEL removeFromParent];
            [sideHS removeFromParent];
            [sideCS removeFromParent];
            [self powerUpsScene];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
            
        }
        else if ([[node name] isEqualToString:@"BackButton"])
        {
            
            [dink play];
            [self goToArcadeScreen];
            
        }
        else if ([[node name] isEqualToString:@"ObjButton"])
        {
            pauseMenuObjectiveSprites = [self textureAtlasNamed:@"PauseMenuObjectiveSprites"];
            [dink play];
            [levelFoods removeFromParent];
            [objectives removeFromParent];
            [pdScene removeFromParent];
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            [factoryBucksTitleBox removeFromParent];
            [buy300k removeFromParent];
            [buy150k removeFromParent];
            [buy45k removeFromParent];
            [buy75k removeFromParent];
            [buy30k removeFromParent];
            [buy9k removeFromParent];
            [sidePD removeFromParent];
            [sidePM removeFromParent];
            [sideSR removeFromParent];
            [sideEL removeFromParent];
            [sideHS removeFromParent];
            [sideCS removeFromParent];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
            if (rankNumber == 0) {
                
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ1"];
                
            }
            if (rankNumber == 1) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ2"];
                
            }
            if (rankNumber == 2) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ3"];
                
            }
            if (rankNumber == 3) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ4"];
                
            }
            if (rankNumber == 4) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ5"];
                
            }
            if (rankNumber == 5) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ6"];
                
            }
            if (rankNumber == 6) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ7"];
                
            }
            if (rankNumber == 7) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ8"];
                
            }
            if (rankNumber == 8) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ9"];
                
            }
            if (rankNumber == 9) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ10"];
                
            }
            if (rankNumber == 10) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ11"];
                
            }
            if (rankNumber == 11) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ12"];
                
            }
            if (rankNumber == 12) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ13"];
                
            }
            if (rankNumber == 13) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ14"];
                
            }
            if (rankNumber == 14) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ15"];
                
            }
            if (rankNumber == 15) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ16"];
                
            }
            if (rankNumber == 16) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ17"];
                
            }
            if (rankNumber == 17) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ18"];
                
            }
            if (rankNumber == 18) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ19"];
                
            }
            if (rankNumber == 19) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ20"];
                
            }
            if (rankNumber == 20) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ21"];
                
            }
            if (rankNumber == 21) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ22"];
                
            }
            if (rankNumber == 22) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ23"];
                
            }
            if (rankNumber == 23) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ24"];
                
            }
            if (rankNumber == 24) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ25"];
                
            }
            if (rankNumber == 25) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ26"];
                
            }
            if (rankNumber == 26) {
                objectivesTexture = [pauseMenuObjectiveSprites textureNamed:@"FFGameScenePauseMenuOBJ27"];
                
            }
            
                objectives = [SKSpriteNode spriteNodeWithTexture:objectivesTexture];
                objectives.position = CGPointZero;
                objectives.size = CGSizeMake(objectives.frame.size.width/s, objectives.frame.size.height / s);
                objectives.zPosition = 3444;
                [self.pauseLayer addChild:objectives];
            
            [objectiveButton removeFromParent];
            
            
            foodButtonTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuFoodsButton"];
            
            foodButton = [SKSpriteNode spriteNodeWithTexture:foodButtonTexture];
            foodButton.position = CGPointMake(0, -self.frame.size.height/2.2);
            foodButton.size = CGSizeMake(foodButton.frame.size.width/s, foodButton.frame.size.height / s);
            foodButton.zPosition = 134.5;
            foodButton.name = @"FoodButton";
            [self.pauseLayer addChild:foodButton];
            
        }
        else if ([[node name] isEqualToString:@"FoodButton"])
        {
            
            //pauseMenuFoodSprites = [self textureAtlasNamed:@"PauseMenuFoodsSprites"];
            [dink play];
            [levelFoods removeFromParent];
            [objectives removeFromParent];
            [pdScene removeFromParent];
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            [factoryBucksTitleBox removeFromParent];
            [buy300k removeFromParent];
            [buy150k removeFromParent];
            [buy45k removeFromParent];
            [buy75k removeFromParent];
            [buy30k removeFromParent];
            [buy9k removeFromParent];
            [sidePD removeFromParent];
            [sidePM removeFromParent];
            [sideSR removeFromParent];
            [sideEL removeFromParent];
            [sideHS removeFromParent];
            [sideCS removeFromParent];
            [objectives removeFromParent];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
            if (rankNumber == 0 || rankNumber == 1 || rankNumber == 2) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS1"];
            }
            if (rankNumber == 3 || rankNumber == 4 || rankNumber == 5) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS2"];
                
            }
            if (rankNumber == 6 || rankNumber == 7 || rankNumber == 8) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS3"];
                
            }
            if (rankNumber == 9 || rankNumber == 10 || rankNumber == 11) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS4"];
                
            }
            if (rankNumber == 12 || rankNumber == 13 || rankNumber == 14) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS5"];
                
            }
            if (rankNumber == 15 || rankNumber == 16 || rankNumber == 17) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS6"];
                
            }
            if (rankNumber == 18 || rankNumber == 19 || rankNumber == 20) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS7"];
                
            }
            if (rankNumber == 21 || rankNumber == 22 || rankNumber == 23) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS8"];
                
            }
            if (rankNumber == 24 || rankNumber == 25 || rankNumber == 26) {
                
                levelFoodsTexture = [pauseMenuFoodSprites textureNamed:@"FFGameScenePauseMenuFOODS9"];
                
            }
            
                levelFoods = [SKSpriteNode spriteNodeWithTexture:levelFoodsTexture];
                levelFoods.position = CGPointZero;
                levelFoods.size = CGSizeMake(levelFoods.frame.size.width/s, levelFoods.frame.size.height / s);
                levelFoods.zPosition = 3444;
                [self.pauseLayer addChild:levelFoods];
            
            [foodButton removeFromParent];
            
            
            objectiveButtonTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuObjectivesButton"];
            
            objectiveButton = [SKSpriteNode spriteNodeWithTexture:objectiveButtonTexture];
            objectiveButton.position = CGPointMake(0, -self.frame.size.height/2.2);
            objectiveButton.size = CGSizeMake(objectiveButton.frame.size.width/s, objectiveButton.frame.size.height / s);
            objectiveButton.zPosition = 134.5;
            objectiveButton.name = @"ObjButton";
            [self.pauseLayer addChild:objectiveButton];
            
        }
        else if ([[node name] isEqualToString:@"PMBack"])
        {
            
            [dink play];
            [self leaveGame];
            
        }
        else if ([[node name] isEqualToString:@"okPSAM"])
        {
            [dink play];
            if (beatObj == NO) {
                RankLogic *incCGN = [[RankLogic alloc]init];
                [incCGN increment1];
            }
            
            if ((currentGameNumber > 4 & maxPlaysLvl == 0) || (currentGameNumber > 9 & maxPlaysLvl == 1)) {
                goDelay = YES;
                canPlay = NO;
                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
                [defaults setBool:canPlay forKey:@"canPlay"];
                [defaults synchronize];
                [self retrySprites];
                [self getDate];
                [self waitTime];
            }
            [self goToArcadeScreen];
            
        }
        else if ([[node name] isEqualToString:@"okPSH"])
        {
            [dink play];
            if (beatObj == NO) {
                RankLogic *incCGN = [[RankLogic alloc]init];
                [incCGN increment1];
            }
            
            if ((currentGameNumber > 4 & maxPlaysLvl == 0) || (currentGameNumber > 9 & maxPlaysLvl == 1)) {
                goDelay = YES;
                canPlay = NO;
                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
                [defaults setBool:canPlay forKey:@"canPlay"];
                [defaults synchronize];
                [self retrySprites];
                [self getDate];
                [self waitTime];
            }
            [self goToHomeScreen];
            
        }
        else if ([[node name] isEqualToString:@"okPSRS"])
        {
            [dink play];
            if (beatObj == NO) {
                RankLogic *incCGN = [[RankLogic alloc]init];
                [incCGN increment1];
            }
            
            if ((currentGameNumber > 4 & maxPlaysLvl == 0) || (currentGameNumber > 9 & maxPlaysLvl == 1)) {
                goDelay = YES;
                canPlay = NO;
                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
                [defaults setBool:canPlay forKey:@"canPlay"];
                [defaults synchronize];
                [self retrySprites];
                [self getDate];
                [self waitTime];
            }
            [self goToNormalMode];
            
        }
        else if ([[node name] isEqualToString:@"cancelPS"])
        {
            [dink play];
            [leaveGamePS removeFromParent];
            [okPS removeFromParent];
            [cancelPS removeFromParent];
            
            self.pauseLayer = [SKNode node];
            self.pauseLayer.position = CGPointZero;
            
            [self.spriteLayer addChild:self.pauseLayer];
            
            [self pauseGame];
            
        }
        else if ([[node name] isEqualToString:@"DoublePoints"] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO))
        {
            
            [dink play];
            ShopLogic *DPCheck = [[ShopLogic alloc]init];
            [DPCheck usedDP];
            
            SKAction *activate = [SKAction performSelector:@selector(activatedDP) onTarget:self];
            
            [self runAction:activate];
            
        }
        else if ([[node name] isEqualToString:@"TriplePoints"] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO))
        {
            [dink play];
            ShopLogic *TPCheck = [[ShopLogic alloc]init];
            [TPCheck usedTP];
            
            SKAction *activate = [SKAction performSelector:@selector(activatedTP) onTarget:self];
            
            [self runAction:activate];
        }
        else if ([[node name] isEqualToString:@"QuadPoints"] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO))
        {
            
            ShopLogic *QPCheck = [[ShopLogic alloc]init];
            [QPCheck usedQP];
            
            SKAction *activate = [SKAction performSelector:@selector(activatedQP) onTarget:self];
            
            
            [self runAction:activate];
            
        }
        else if ([[node name] isEqualToString:@"ExtraLives1"] & (self.activateEL1 == NO) & (self.activateEL2 == NO) & (self.activateEL3 == NO))
        {
            [dink play];
            ShopLogic *EL1Check = [[ShopLogic alloc]init];
            [EL1Check usedEL1];
            
            SKAction *activate = [SKAction performSelector:@selector(activatedEL1) onTarget:self];
            
            
            [self runAction:activate];
        }
        else if ([[node name] isEqualToString:@"ExtraLives2"] & (self.activateEL1 == NO) & (self.activateEL2 == NO) & (self.activateEL3 == NO))
        {
            
            [dink play];
            ShopLogic *EL2Check = [[ShopLogic alloc]init];
            [EL2Check usedEL2];
            
            SKAction *activate = [SKAction performSelector:@selector(activatedEL2) onTarget:self];
            
            [self runAction:activate];
            
        }
        else if ([[node name] isEqualToString:@"ExtraLives3"] & (self.activateEL1 == NO) & (self.activateEL2 == NO) & (self.activateEL3 == NO))
        {
            
            [dink play];
            ShopLogic *EL3Check = [[ShopLogic alloc]init];
            [EL3Check usedEL3];
            
            SKAction *activate = [SKAction performSelector:@selector(activatedEL3) onTarget:self];
            
            [self runAction:activate];
            
        }
        else if ([[node name] isEqualToString:@"HourGlass10"] & (self.activateHG10 == NO) & (self.activateHG20 == NO) & (self.activateHG30 == NO))
        {
            [dink play];
            [self HourGlass10Activate];
        }
        else if ([[node name] isEqualToString:@"HourGlass20"] & (self.activateHG10 == NO) & (self.activateHG20 == NO) & (self.activateHG30 == NO))
        {
            [dink play];
            [self HourGlass20Activate];
        }
        else if ([[node name] isEqualToString:@"HourGlass30"] & (self.activateHG10 == NO) & (self.activateHG20 == NO) & (self.activateHG30 == NO))
        {
            [dink play];
            [self HourGlass30Activate];
        }
        else if ([[node name] isEqualToString:@"HeadStart10"] & (self.activateHS10 == NO) & (self.activateHS20 == NO) & (self.activateHS30 == NO))
        {
            [dink play];
            [self HeadStart10Activate];
        }
        else if ([[node name] isEqualToString:@"HeadStart20"] & (self.activateHS10 == NO) & (self.activateHS20 == NO) & (self.activateHS30 == NO))
        {
            [dink play];
            [self HeadStart20Activate];
        }
        else if ([[node name] isEqualToString:@"HeadStart30"] & (self.activateHS10 == NO) & (self.activateHS20 == NO) & (self.activateHS30 == NO))
        {
            [dink play];
            [self HeadStart30Activate];
        }
        else if ([[node name] isEqualToString:@"PackageDeals"])
        {
            [dink play];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            [dpLabel setPoints:DPInteger];
            [tpLabel setPoints:TPInteger];
            [qpLabel setPoints:QPInteger];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            [dpLabel2 setPoints:DPInteger];
            [tpLabel2 setPoints:TPInteger];
            [qpLabel2 setPoints:QPInteger];
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
        
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [pdScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            
            pdSceneTexture = [gameSceneSpritesEight textureNamed:@"FFGameScenePauseMenuPDBoard"];
            
            pdScene = [SKSpriteNode spriteNodeWithTexture:pdSceneTexture];
            pdScene.position = CGPointZero;
            pdScene.size = CGSizeMake(pdScene.frame.size.width/s, pdScene.frame.size.height / s);
            pdScene.zPosition = 200;
            [self.pauseLayer addChild:pdScene];
            
            puBuy1Texture = [buttonSprites textureNamed:@"ShopBuyButton"];
            
            puBuy1 = [SKSpriteNode spriteNodeWithTexture:puBuy1Texture];
            puBuy1.position = CGPointMake(self.frame.size.width/4, self.frame.size.height/5);
            puBuy1.size = CGSizeMake(puBuy1.frame.size.width/s, puBuy1.frame.size.height / s);
            puBuy1.zPosition = 201;
            puBuy1.name = @"BuySP";
            [self.pauseLayer addChild:puBuy1];
            
            puBuy2Texture = [buttonSprites textureNamed:@"ShopBuyButton"];
            
            puBuy2 = [SKSpriteNode spriteNodeWithTexture:puBuy2Texture];
            puBuy2.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/23);
            puBuy2.size = CGSizeMake(puBuy2.frame.size.width/s, puBuy2.frame.size.height / s);
            puBuy2.zPosition = 201;
            puBuy2.name = @"BuyIP";
            [self.pauseLayer addChild:puBuy2];
            
            puBuy3Texture = [buttonSprites textureNamed:@"ShopBuyButton"];
            
            puBuy3 = [SKSpriteNode spriteNodeWithTexture:puBuy3Texture];
            puBuy3.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/3.8);
            puBuy3.size = CGSizeMake(puBuy3.frame.size.width/s, puBuy3.frame.size.height / s);
            puBuy3.zPosition = 201;
            puBuy3.name = @"BuyGP";
            [self.pauseLayer addChild:puBuy3];
        }
        else if ([[node name] isEqualToString:@"BuySP"])
        {
            [dink play];
            [self buySafePackClick];
        }
        else if ([[node name] isEqualToString:@"BuyIP"])
        {
            [dink play];
            [self buyInvincibleModeClick];
        }
        else if ([[node name] isEqualToString:@"BuyGP"])
        {
            [dink play];
            [self buyGodModePackClick];
        }
        else if ([[node name] isEqualToString:@"PointsMultiplier"])
        {
            [dink play];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            [dpLabel setPoints:DPInteger];
            [tpLabel setPoints:TPInteger];
            [qpLabel setPoints:QPInteger];
            qpLabel.hidden = NO;
            tpLabel.hidden = NO;
            dpLabel.hidden = NO;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = NO;
            tpLabel2.hidden = NO;
            dpLabel2.hidden = NO;
            [dpLabel2 setPoints:DPInteger];
            [tpLabel2 setPoints:TPInteger];
            [qpLabel2 setPoints:QPInteger];
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
            
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [pdScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            
            pmSceneTexture = [gameSceneSpritesEight textureNamed:@"FFGameScenePauseMenuPMBoard"];
            
            pmScene = [SKSpriteNode spriteNodeWithTexture:pmSceneTexture];
            pmScene.position = CGPointZero;
            pmScene.size = CGSizeMake(pmScene.frame.size.width/s, pmScene.frame.size.height / s);
            pmScene.zPosition = 200;
            [self.pauseLayer addChild:pmScene];
            
            puBuy1Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuySR30"];
            
            puBuy1 = [SKSpriteNode spriteNodeWithTexture:puBuy1Texture];
            puBuy1.position = CGPointMake(self.frame.size.width/4, self.frame.size.height/5);
            puBuy1.size = CGSizeMake(puBuy1.frame.size.width/s, puBuy1.frame.size.height / s);
            puBuy1.zPosition = 201;
            puBuy1.name = @"BuyQP";
            [self.pauseLayer addChild:puBuy1];
            
            puBuy2Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuySR20"];
            
            puBuy2 = [SKSpriteNode spriteNodeWithTexture:puBuy2Texture];
            puBuy2.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/23);
            puBuy2.size = CGSizeMake(puBuy2.frame.size.width/s, puBuy2.frame.size.height / s);
            puBuy2.zPosition = 201;
            puBuy2.name = @"BuyTP";
            [self.pauseLayer addChild:puBuy2];
            
            puBuy3Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuySR10"];
            
            puBuy3 = [SKSpriteNode spriteNodeWithTexture:puBuy3Texture];
            puBuy3.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/3.8);
            puBuy3.size = CGSizeMake(puBuy3.frame.size.width/s, puBuy3.frame.size.height / s);
            puBuy3.zPosition = 201;
            puBuy3.name = @"BuyDP";
            [self.pauseLayer addChild:puBuy3];
        }
        else if ([[node name] isEqualToString:@"BuyDP"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyDPCheck];
            if (boughtDP == YES) {
                boughtDP = NO;
                NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
                NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
                
                [dpLabel setPoints:dpLabel.number + 1];
                [dpLabel2 setPoints:dpLabel2.number + 1];
                
                ShopLogic *saveDP = [[ShopLogic alloc]init];
                [saveDP loadDPInteger];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 3000];
                [kasbE setPoints:kasbE.amount - 3000];
                
                FactoryBucksLabel *decrement3000 = [[FactoryBucksLabel alloc]init];
                [decrement3000 decrementBy3000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"BuyTP"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyTPCheck];
            if (boughtTP == YES) {
                boughtTP = NO;
                PowerUpAmountsLabel *tpLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel"];
                PowerUpAmountsLabel *tpLabel2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel2"];
                
                [tpLabel setPoints:tpLabel.number + 1];
                [tpLabel2 setPoints:tpLabel2.number + 1];
                
                ShopLogic *saveTP = [[ShopLogic alloc]init];
                [saveTP loadTPInteger];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 6000];
                [kasbE setPoints:kasbE.amount - 6000];
                
                FactoryBucksLabel *decrement6000 = [[FactoryBucksLabel alloc]init];
                [decrement6000 decrementBy6000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"BuyQP"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyQPCheck];
            if (boughtQP == YES) {
                boughtQP = NO;
                PowerUpAmountsLabel *qpLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"qpLabel"];
                PowerUpAmountsLabel *qpLabel2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"qpLabel2"];
                
                [qpLabel setPoints:qpLabel.number + 1];
                [qpLabel2 setPoints:qpLabel2.number + 1];
                
                ShopLogic *saveQP = [[ShopLogic alloc]init];
                [saveQP loadQPInteger];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 9000];
                [kasbE setPoints:kasbE.amount - 9000];
                
                FactoryBucksLabel *decrement9000 = [[FactoryBucksLabel alloc]init];
                [decrement9000 decrementBy9000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"ExtraLives"])
        {
            [dink play];
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = NO;
            el2Label.hidden = NO;
            el3Label.hidden = NO;
            [el1Label setPoints:EL1Integer];
            [el2Label setPoints:EL2Integer];
            [el3Label setPoints:EL3Integer];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = NO;
            el2Label2.hidden = NO;
            el3Label2.hidden = NO;
            [el1Label2 setPoints:EL1Integer];
            [el2Label2 setPoints:EL2Integer];
            [el3Label2 setPoints:EL3Integer];
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
            
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [pdScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            
            elSceneTexture = [gameSceneSpritesEight textureNamed:@"FFGameScenePauseMenuELBoard"];
            
            elScene = [SKSpriteNode spriteNodeWithTexture:elSceneTexture];
            elScene.position = CGPointZero;
            elScene.size = CGSizeMake(elScene.frame.size.width/s, elScene.frame.size.height / s);
            elScene.zPosition = 200;
            [self.pauseLayer addChild:elScene];
            
            puBuy4Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyEL3"];
            
            puBuy4 = [SKSpriteNode spriteNodeWithTexture:puBuy4Texture];
            puBuy4.position = CGPointMake(self.frame.size.width/4, self.frame.size.height/5);
            puBuy4.size = CGSizeMake(puBuy4.frame.size.width/s, puBuy4.frame.size.height / s);
            puBuy4.zPosition = 201;
            puBuy4.name = @"BuyEL3";
            [self.pauseLayer addChild:puBuy4];
            
            puBuy5Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyEL2"];
            
            puBuy5 = [SKSpriteNode spriteNodeWithTexture:puBuy5Texture];
            puBuy5.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/23);
            puBuy5.size = CGSizeMake(puBuy5.frame.size.width/s, puBuy5.frame.size.height / s);
            puBuy5.zPosition = 201;
            puBuy5.name = @"BuyEL2";
            [self.pauseLayer addChild:puBuy5];
            
            puBuy6Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyEL1"];
            
            puBuy6 = [SKSpriteNode spriteNodeWithTexture:puBuy6Texture];
            puBuy6.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/3.7);
            puBuy6.size = CGSizeMake(puBuy6.frame.size.width/s, puBuy6.frame.size.height / s);
            puBuy6.zPosition = 201;
            puBuy6.name = @"BuyEL1";
            [self.pauseLayer addChild:puBuy6];
        }
        else if ([[node name] isEqualToString:@"BuyEL1"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyEL1Check];
            if (boughtEL1 == YES) {
                boughtEL1 = NO;
                PowerUpAmountsLabel *el1Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el1Label"];
                PowerUpAmountsLabel *el1Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el1Label2"];
                
                [el1Label setPoints:el1Label.number + 1];
                [el1Label2 setPoints:el1Label2.number + 1];
                
                ShopLogic *saveEL1 = [[ShopLogic alloc]init];
                [saveEL1 loadEL1Integer];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 3000];
                [kasbE setPoints:kasbE.amount - 3000];
                
                FactoryBucksLabel *decrement3000 = [[FactoryBucksLabel alloc]init];
                [decrement3000 decrementBy3000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"BuyEL2"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyEL2Check];
            if (boughtEL2 == YES) {
                boughtEL2 = NO;
                PowerUpAmountsLabel *el2Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label"];
                PowerUpAmountsLabel *el2Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label2"];
                
                [el2Label setPoints:el2Label.number + 1];
                [el2Label2 setPoints:el2Label2.number + 1];
                
                ShopLogic *saveEL2 = [[ShopLogic alloc]init];
                [saveEL2 loadEL2Integer];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 6000];
                [kasbE setPoints:kasbE.amount - 6000];
                
                FactoryBucksLabel *decrement6000 = [[FactoryBucksLabel alloc]init];
                [decrement6000 decrementBy6000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"BuyEL3"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyEL3Check];
            if (boughtEL3 == YES) {
                boughtEL3 = NO;
                PowerUpAmountsLabel *el3Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el3Label"];
                PowerUpAmountsLabel *el3Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el3Label2"];
                
                [el3Label setPoints:el3Label.number + 1];
                [el3Label2 setPoints:el3Label2.number + 1];
                
                ShopLogic *saveEL3 = [[ShopLogic alloc]init];
                [saveEL3 loadEL3Integer];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 9000];
                [kasbE setPoints:kasbE.amount - 9000];
                
                FactoryBucksLabel *decrement9000 = [[FactoryBucksLabel alloc]init];
                [decrement9000 decrementBy9000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"SpeedReducer"])
        {
            [dink play];
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = NO;
            hg20Label.hidden = NO;
            hg30Label.hidden = NO;
            [hg10Label setPoints:HG10Integer];
            [hg20Label setPoints:HG20Integer];
            [hg30Label setPoints:HG30Integer];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = YES;
            hs20Label.hidden = YES;
            hs30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = NO;
            hg20Label2.hidden = NO;
            hg30Label2.hidden = NO;
            [hg10Label2 setPoints:HG10Integer];
            [hg20Label2 setPoints:HG20Integer];
            [hg30Label2 setPoints:HG30Integer];
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = YES;
            hs20Label2.hidden = YES;
            hs30Label2.hidden = YES;
            
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [pdScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            
            srSceneTexture = [gameSceneSpritesEight textureNamed:@"FFGameScenePauseMenuSRBoard"];
            
            srScene = [SKSpriteNode spriteNodeWithTexture:srSceneTexture];
            srScene.position = CGPointZero;
            srScene.size = CGSizeMake(srScene.frame.size.width/s, srScene.frame.size.height / s);
            srScene.zPosition = 200;
            [self.pauseLayer addChild:srScene];
            
            puBuy7Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyQP"];
            
            puBuy7 = [SKSpriteNode spriteNodeWithTexture:puBuy7Texture];
            puBuy7.position = CGPointMake(self.frame.size.width/4, self.frame.size.height/5.3);
            puBuy7.size = CGSizeMake(puBuy7.frame.size.width/s, puBuy7.frame.size.height / s);
            puBuy7.zPosition = 201;
            puBuy7.name = @"BuySR30";
            [self.pauseLayer addChild:puBuy7];
            
            puBuy8Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyTP"];
            
            puBuy8 = [SKSpriteNode spriteNodeWithTexture:puBuy8Texture];
            puBuy8.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/23);
            puBuy8.size = CGSizeMake(puBuy8.frame.size.width/s, puBuy8.frame.size.height / s);
            puBuy8.zPosition = 201;
            puBuy8.name = @"BuySR20";
            [self.pauseLayer addChild:puBuy8];
            
            puBuy9Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyDP"];
            
            puBuy9 = [SKSpriteNode spriteNodeWithTexture:puBuy9Texture];
            puBuy9.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/3.6);
            puBuy9.size = CGSizeMake(puBuy9.frame.size.width/s, puBuy9.frame.size.height / s);
            puBuy9.zPosition = 201;
            puBuy9.name = @"BuySR10";
            [self.pauseLayer addChild:puBuy9];
        }
        else if ([[node name] isEqualToString:@"BuySR30"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyHG30Check];
            if (boughtHG30 == YES) {
                boughtHG30 = NO;
                PowerUpAmountsLabel *hg30Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg30Label"];
                PowerUpAmountsLabel *hg30Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg30Label2"];
                
                [hg30Label setPoints:hg30Label.number + 1];
                [hg30Label2 setPoints:hg30Label2.number + 1];
                
                ShopLogic *saveHG30 = [[ShopLogic alloc]init];
                [saveHG30 loadHG30Integer];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 20000];
                [kasbE setPoints:kasbE.amount - 20000];
                
                FactoryBucksLabel *decrement20000 = [[FactoryBucksLabel alloc]init];
                [decrement20000 decrementBy20000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"BuySR20"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyHG20Check];
            if (boughtHG20 == YES) {
                boughtHG20 = NO;
                PowerUpAmountsLabel *hg20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label"];
                PowerUpAmountsLabel *hg20Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label2"];
                
                [hg20Label setPoints:hg20Label.number + 1];
                [hg20Label2 setPoints:hg20Label2.number + 1];
                
                ShopLogic *saveHG20 = [[ShopLogic alloc]init];
                [saveHG20 loadHG20Integer];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 10000];
                [kasbE setPoints:kasbE.amount - 10000];
                
                FactoryBucksLabel *decrement10000 = [[FactoryBucksLabel alloc]init];
                [decrement10000 decrementBy10000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"BuySR10"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyHG10Check];
            if (boughtHG10 == YES) {
                boughtHG10 = NO;
                PowerUpAmountsLabel *hg10Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg10Label"];
                PowerUpAmountsLabel *hg10Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg10Label2"];
                
                [hg10Label setPoints:hg10Label.number + 1];
                [hg10Label2 setPoints:hg10Label2.number + 1];
                
                ShopLogic *saveHG10 = [[ShopLogic alloc]init];
                [saveHG10 loadHG10Integer];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 6000];
                [kasbE setPoints:kasbE.amount - 6000];
                
                FactoryBucksLabel *decrement6000 = [[FactoryBucksLabel alloc]init];
                [decrement6000 decrementBy6000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"HeadStart"])
        {
            [dink play];
            NMPointsLabel *hs10Label = (NMPointsLabel *)[self childNodeWithName:@"hs10Label"];
            NMPointsLabel *hs20Label = (NMPointsLabel *)[self childNodeWithName:@"hs20Label"];
            NMPointsLabel *hs30Label = (NMPointsLabel *)[self childNodeWithName:@"hs30Label"];
            hs10Label.hidden = NO;
            hs20Label.hidden = NO;
            hs30Label.hidden = NO;
            [hs10Label setPoints:HS10Integer];
            [hs20Label setPoints:HS20Integer];
            [hs30Label setPoints:HS30Integer];
            NMPointsLabel *qpLabel = (NMPointsLabel *)[self childNodeWithName:@"qpLabel"];
            NMPointsLabel *tpLabel = (NMPointsLabel *)[self childNodeWithName:@"tpLabel"];
            NMPointsLabel *dpLabel = (NMPointsLabel *)[self childNodeWithName:@"dpLabel"];
            qpLabel.hidden = YES;
            tpLabel.hidden = YES;
            dpLabel.hidden = YES;
            NMPointsLabel *el1Label = (NMPointsLabel *)[self childNodeWithName:@"el1Label"];
            NMPointsLabel *el2Label = (NMPointsLabel *)[self childNodeWithName:@"el2Label"];
            NMPointsLabel *el3Label = (NMPointsLabel *)[self childNodeWithName:@"el3Label"];
            el1Label.hidden = YES;
            el2Label.hidden = YES;
            el3Label.hidden = YES;
            NMPointsLabel *hg10Label = (NMPointsLabel *)[self childNodeWithName:@"hg10Label"];
            NMPointsLabel *hg20Label = (NMPointsLabel *)[self childNodeWithName:@"hg20Label"];
            NMPointsLabel *hg30Label = (NMPointsLabel *)[self childNodeWithName:@"hg30Label"];
            hg10Label.hidden = YES;
            hg20Label.hidden = YES;
            hg30Label.hidden = YES;
            NMPointsLabel *qpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"qpLabel2"];
            NMPointsLabel *tpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"tpLabel2"];
            NMPointsLabel *dpLabel2 = (NMPointsLabel *)[self childNodeWithName:@"dpLabel2"];
            qpLabel2.hidden = YES;
            tpLabel2.hidden = YES;
            dpLabel2.hidden = YES;
            NMPointsLabel *el1Label2 = (NMPointsLabel *)[self childNodeWithName:@"el1Label2"];
            NMPointsLabel *el2Label2 = (NMPointsLabel *)[self childNodeWithName:@"el2Label2"];
            NMPointsLabel *el3Label2 = (NMPointsLabel *)[self childNodeWithName:@"el3Label2"];
            el1Label2.hidden = YES;
            el2Label2.hidden = YES;
            el3Label2.hidden = YES;
            NMPointsLabel *hg10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg10Label2"];
            NMPointsLabel *hg20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg20Label2"];
            NMPointsLabel *hg30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hg30Label2"];
            hg10Label2.hidden = YES;
            hg20Label2.hidden = YES;
            hg30Label2.hidden = YES;
            NMPointsLabel *hs10Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs10Label2"];
            NMPointsLabel *hs20Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs20Label2"];
            NMPointsLabel *hs30Label2 = (NMPointsLabel *)[self childNodeWithName:@"hs30Label2"];
            hs10Label2.hidden = NO;
            hs20Label2.hidden = NO;
            hs30Label2.hidden = NO;
            [hs10Label2 setPoints:HS10Integer];
            [hs20Label2 setPoints:HS20Integer];
            [hs30Label2 setPoints:HS30Integer];
            
            [pmScene removeFromParent];
            [srScene removeFromParent];
            [elScene removeFromParent];
            [trScene removeFromParent];
            [pdScene removeFromParent];
            [puBuy1 removeFromParent];
            [puBuy2 removeFromParent];
            [puBuy3 removeFromParent];
            [puBuy4 removeFromParent];
            [puBuy5 removeFromParent];
            [puBuy6 removeFromParent];
            [puBuy7 removeFromParent];
            [puBuy8 removeFromParent];
            [puBuy9 removeFromParent];
            [puBuy10 removeFromParent];
            [puBuy11 removeFromParent];
            [puBuy12 removeFromParent];
            
            trSceneTexture = [gameSceneSpritesEight textureNamed:@"FFGameScenePauseMenuTRBoard"];
            
            trScene = [SKSpriteNode spriteNodeWithTexture:trSceneTexture];
            trScene.position = CGPointZero;
            trScene.size = CGSizeMake(trScene.frame.size.width/s, trScene.frame.size.height / s);
            trScene.zPosition = 200;
            [self.pauseLayer addChild:trScene];
            
            puBuy10Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyTR30"];
            
            puBuy10 = [SKSpriteNode spriteNodeWithTexture:puBuy10Texture];
            puBuy10.position = CGPointMake(self.frame.size.width/4, self.frame.size.height/5.3);
            puBuy10.size = CGSizeMake(puBuy10.frame.size.width/s, puBuy10.frame.size.height / s);
            puBuy10.zPosition = 201;
            puBuy10.name = @"BuyTR30";
            [self.pauseLayer addChild:puBuy10];
            
            puBuy11Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyTR20"];
            
            puBuy11 = [SKSpriteNode spriteNodeWithTexture:puBuy11Texture];
            puBuy11.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/23);
            puBuy11.size = CGSizeMake(puBuy11.frame.size.width/s, puBuy11.frame.size.height / s);
            puBuy11.zPosition = 201;
            puBuy11.name = @"BuyTR20";
            [self.pauseLayer addChild:puBuy11];
            
            puBuy12Texture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBuyTR10"];
            
            puBuy12 = [SKSpriteNode spriteNodeWithTexture:puBuy12Texture];
            puBuy12.position = CGPointMake(self.frame.size.width/4, -self.frame.size.height/3.6);
            puBuy12.size = CGSizeMake(puBuy12.frame.size.width/s, puBuy12.frame.size.height / s);
            puBuy12.zPosition = 201;
            puBuy12.name = @"BuyTR10";
            [self.pauseLayer addChild:puBuy12];
        }
        else if ([[node name] isEqualToString:@"BuyTR30"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyHS30Check];
            if (boughtHS30 == YES) {
                boughtHS30 = NO;
                PowerUpAmountsLabel *hs30Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs30Label"];
                PowerUpAmountsLabel *hs30Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs30Label2"];
                
                [hs30Label setPoints:hs30Label.number + 1];
                [hs30Label2 setPoints:hs30Label2.number + 1];
                
                ShopLogic *saveHS30 = [[ShopLogic alloc]init];
                [saveHS30 loadHS30Integer];
                
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 20000];
                [kasbE setPoints:kasbE.amount - 20000];
                
                FactoryBucksLabel *decrement20000 = [[FactoryBucksLabel alloc]init];
                [decrement20000 decrementBy20000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
                
                
            }
        }
        else if ([[node name] isEqualToString:@"BuyTR20"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyHS20Check];
            if (boughtHS20 == YES) {
                boughtHS20 = NO;
                PowerUpAmountsLabel *hs20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label"];
                PowerUpAmountsLabel *hs20Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label2"];
                
                [hs20Label setPoints:hs20Label.number + 1];
                [hs20Label2 setPoints:hs20Label2.number + 1];
                
                ShopLogic *saveHS20 = [[ShopLogic alloc]init];
                [saveHS20 loadHS20Integer];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 10000];
                [kasbE setPoints:kasbE.amount - 10000];
                
                FactoryBucksLabel *decrement10000 = [[FactoryBucksLabel alloc]init];
                [decrement10000 decrementBy10000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
        else if ([[node name] isEqualToString:@"BuyTR10"])
        {
            [dink play];
            FBLabelLogic *FBAmountCheck = [[FBLabelLogic alloc]init];
            [FBAmountCheck buyHS10Check];
            if (boughtHS10 == YES) {
                boughtHS10 = NO;
                PowerUpAmountsLabel *hs10Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs10Label"];
                PowerUpAmountsLabel *hs10Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs10Label2"];
                
                [hs10Label setPoints:hs10Label.number + 1];
                [hs10Label2 setPoints:hs10Label2.number + 1];
                
                ShopLogic *saveHS10 = [[ShopLogic alloc]init];
                [saveHS10 loadHS10Integer];
                
                FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
                FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
                
                [amountLabel setPoints:amountLabel.amount - 6000];
                [kasbE setPoints:kasbE.amount - 6000];
                
                FactoryBucksLabel *decrement6000 = [[FactoryBucksLabel alloc]init];
                [decrement6000 decrementBy6000];
                
                Data *save = [[Data alloc]init];
                [save saveAmountFB];
            }
        }
    }
} //--Make Sure all buttons are in correlation with intended code and that there are no glitches--//
-(void)handleNodesAtLocation1:(CGPoint)location1 {
    NSArray* nodes1 = [[self reggyLayer] nodesAtPoint:location1];
    for(SKNode * node in nodes1)
    {
        if ([[node name] isEqualToString:@"reggyBot"])
        {
            if (punchInt >= 0) {
                
                //punchLabel = (SKLabelNode *)[self childNodeWithName:@"punchLabel"];
                punchLabel.text = [NSString stringWithFormat:@"%li", (long)punchInt--];
            
                punchTexture = [lightningAttackSprites5 textureNamed:@"PunchAnim1"];
                punch = [SKSpriteNode spriteNodeWithTexture:punchTexture];
                punch.size = CGSizeMake(punch.frame.size.width/s, punch.frame.size.height / s);
                punch.position = location1;
                punch.zPosition = 120;
                [self.reggyLayer addChild:punch];
                
                
                SKAction *punchSeq = [SKAction sequence:@[[SKAction animateWithTextures:Punch_Anim_Start timePerFrame:0.08333333333],[SKAction removeFromParent]]];
                [punch runAction:punchSeq];
                
                
            [healthBar removeFromParent];
            
           // NSArray *damage = @[@"1Damage",@"2Damage",@"3Damage",@"4Damage",@"5Damage",@"6Damage",@"7Damage"];
            
            if (critHit == YES) {
                dp = arc4random() % (2) + 1;
                hp += dp;
                //damageStringValue = [damage objectAtIndex:dp - 1];
                NSLog(@"HPValue:"@"%li", (long)hp);
            }
            
            if (critHit == NO) {
                dp = 1;
                hp += dp;
                //damageStringValue = [damage objectAtIndex:dp - 1];
                NSLog(@"HPValue:"@"%li", (long)hp);
            }
            
            if (hp < 395 /*397*/) {
                NSString *currentelement = [reggyHP objectAtIndex:hp];
                healthBarTexture = [HealthBarSprites textureNamed:currentelement];
                healthBar = [SKSpriteNode spriteNodeWithTexture:healthBarTexture];
                healthBar.size = CGSizeMake(healthBar.frame.size.width/s, healthBar.frame.size.height / s);
                healthBar.position = CGPointZero;
                healthBar.zPosition = 998;
                [self.spriteLayer addChild:healthBar];
            }
            
            /*damageValueTexture = [HealthBarSprites textureNamed:damageStringValue];
            damageValue = [SKSpriteNode spriteNodeWithTexture:damageValueTexture];
            damageValue.size = CGSizeMake(damageValue.frame.size.width/2, damageValue.frame.size.height / 2);
            damageValue.position = CGPointZero;
            damageValue.zPosition = 5;
            [self.spriteLayer addChild:damageValue];
            SKAction *plus1Shrink = [SKAction scaleTo:0.1 duration:1];
            SKAction *plus1Fade = [SKAction fadeAlphaTo:0.1 duration:1];
            SKAction *plus1Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
            SKAction *plus1Group = [SKAction group:@[plus1Shrink, plus1Fade, plus1Move]];
            SKAction *plus1Remove = [SKAction removeFromParent];
            SKAction *plus1Sequence = [SKAction sequence:@[plus1Group, plus1Remove]];
            [damageValue runAction:plus1Sequence];*/
            
            
                [reggyBarCount removeFromParent];
                
                hpNum -= dp;
                
                reggyBarCount = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
                reggyBarCount.position = CGPointMake(0, self.frame.size.height/2.6);
                reggyBarCount.name = @"reggyBarCount";
                reggyBarCount.colorBlendFactor = 1;
                reggyBarCount.fontColor = [UIColor whiteColor];
                reggyBarCount.zPosition = 1000;
                reggyBarCount.fontSize = 10;
                reggyBarCount.text = [NSString stringWithFormat:@"%@ %li %@",@"Battle 1    ",(long)hpNum, @"/ 400"];
                [self.spriteLayer addChild:reggyBarCount];
            
            if (rankNumber == 27 & hpNum <= 300) {
                
                [self.reggyLayer removeFromParent];
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                [self removeActionForKey:@"shake1"];
                [self removeActionForKey:@"shake2"];
                
                ReggyBotTexture = [HealthBarSprites textureNamed:@"ReggyDefeat"];
                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height / s);
                ReggyBot.position = CGPointZero;
                ReggyBot.zPosition = 3.2;
                [self.spriteLayer addChild:ReggyBot];
                
                [self continueBattle];
                endB = YES;
                
            }
            
            if (rankNumber == 28 & hpNum <= 200) {
                
                [self.reggyLayer removeFromParent];
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                [self removeActionForKey:@"shake1"];
                [self removeActionForKey:@"shake2"];
                
                ReggyBotTexture = [HealthBarSprites textureNamed:@"ReggyDefeat"];
                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height / s);
                ReggyBot.position = CGPointZero;
                ReggyBot.zPosition = 3.2;
                [self.spriteLayer addChild:ReggyBot];
                
                [self continueBattle];
                endB = YES;
                
            }
            
            if (rankNumber == 29 & hpNum <= 0) {
                
                [healthBar removeFromParent];
                [self.reggyLayer removeFromParent];
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                [self removeActionForKey:@"shake1"];
                [self removeActionForKey:@"shake2"];
                
                [self spareMeAnim];
                
                endB = YES;
            }
            
            }
        }
    }
}
-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event{
    for (UITouch* touch in touches)
    {
        CGPoint location = [touch locationInNode:[self spriteLayer]];
        
        [self handleNodesAtLocation:location];
        
        CGPoint location1 = [touch locationInNode:[self reggyLayer]];
        
        [self handleNodesAtLocation1:location1];
        
    }
    
    [super touchesEnded:touches withEvent:event];
} //--Done--//
-(void)leftSensorLayerSprite {
    
    [leftSensor removeFromParent];
    UIColor *sensorColor = [UIColor redColor];
    double sensorWidth = 100.0;
    
    leftSensor = [SKSpriteNode spriteNodeWithColor:sensorColor size:CGSizeMake(sensorWidth, self.frame.size.height)];
    leftSensor.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:leftSensor.size];
    leftSensor.alpha = 0.0;
    leftSensor.zPosition = 200;
    leftSensor.physicsBody.dynamic = NO;
    if (self.rightWay == YES) {
        leftSensor.position = CGPointMake(-self.frame.size.width/1.7, 0);
    }
    if (self.rightWay == NO) {
        leftSensor.position = CGPointMake(self.frame.size.width/1.7, 0);
    }
    [self.sensorLayer addChild:leftSensor];
    leftSensor.physicsBody.categoryBitMask = leftSensorCategory;
    
    
    
} //--Done--//
-(void)rightSensorLayerSprite {
    
    [rightSensor removeFromParent];
    UIColor *sensorColor = [UIColor blueColor];
    double sensorWidth = 100.0;
    
    rightSensor = [SKSpriteNode spriteNodeWithColor:sensorColor size:CGSizeMake(sensorWidth, self.frame.size.height)];
    rightSensor.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:rightSensor.size];
    rightSensor.alpha = 0.0;
    rightSensor.zPosition = 200;
    rightSensor.physicsBody.dynamic = NO;
    if (self.rightWay == YES) {
        rightSensor.position = CGPointMake(self.frame.size.width/1.7, 0);
    }
    if (self.rightWay == NO) {
        rightSensor.position = CGPointMake(-self.frame.size.width/1.7, 0);
    }
    [self.sensorLayer addChild:rightSensor];
    rightSensor.physicsBody.categoryBitMask = rightSensorCategory;
    
    
} //--Done--//
-(void)bottomSensorLayerSprite {
    
    UIColor *sensorColor = [UIColor redColor];
    double sensorWidth = 10.0;
    
    bottomSensor =[SKSpriteNode spriteNodeWithColor:sensorColor size:CGSizeMake(self.frame.size.width, sensorWidth)];
    bottomSensor.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:bottomSensor.size];
    bottomSensor.alpha = 0.0;
    bottomSensor.zPosition = 152525.0;
    bottomSensor.physicsBody.dynamic = NO;
    bottomSensor.position = CGPointMake(0, -self.frame.size.height/6);
    [self.sensorLayer addChild:bottomSensor];
    bottomSensor.physicsBody.categoryBitMask = bottomSensorCategory;
    
    
} //--Done--//

#pragma mark - Timers

-(void)time2 {
    invalidateTimer = YES;
        [timer15 invalidate];
        timer2 = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(decrementCountDownLabel2) userInfo:nil repeats:YES];
}
-(void)decrementCountDownLabel2 {
    NMPointsLabel *foodsCountDownLabel = (NMPointsLabel *)[self childNodeWithName:@"foodsCountDownLabel"];
    [foodsCountDownLabel decrementTimerText:foodsCountDownLabel.number];
    if (foodsCountDownLabel.secondsCount == 0) {
        [timer2 invalidate];
        [self performSelector:@selector(gameOver) withObject:nil afterDelay:0.5];
    }
    [self dropCheck];
}
-(void)time {
    invalidateTimer = YES;
    timer = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(decrementCountDownLabel) userInfo:nil repeats:YES];
}
-(void)decrementCountDownLabel {
    NMPointsLabel *countDownLabel = (NMPointsLabel *)[self childNodeWithName:@"countDownLabel"];
    [countDownLabel decrementTimerText:countDownLabel.number];
    if (countDownLabel.secondsCount == 0) {
        NSLog(@"hitZero");
        [timer invalidate];
        [self performSelector:@selector(gameOver) withObject:nil afterDelay:0.5];
    }
    [self dropCheck];
} //--Done--//

 #pragma mark - In Game

-(void)handlePoints {
    
    NMPointsLabel *pointsLabel = (NMPointsLabel *)[self childNodeWithName:@"pointsLabel"];
    NMPointsLabel *pointsLabel2 = (NMPointsLabel *)[self childNodeWithName:@"pointsLabel2"];
    
    SKTextureAtlas *gameSceneSpritesTen = [self textureAtlasNamed:@"GameSceneSpritesTen"];
    
    pointsLabel.zPosition = 100.1;
    pointsLabel2.zPosition = 100;
    
    NMPointsLabel *gameOverPointsLabel = (NMPointsLabel *)[self childNodeWithName:@"gameOverPointsLabel"];
    
    gameOverPointsLabel.zPosition = 100;
    
    NSString *sound = [[NSBundle mainBundle]pathForResource:@"Ching" ofType:@"wav"];
    ching = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
    ching.delegate = self;
    ching.volume = 1.0;
    [ching play];
    
    if (self.isWorth1Point == YES) {
        [pointsLabel incrementBy1];
        [pointsLabel2 incrementBy1];
        [gameOverPointsLabel incrementBy1];
        SKTexture *plus1Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus1"];
        SKSpriteNode *plus1 = [SKSpriteNode spriteNodeWithTexture:plus1Texture];
        plus1.position = CGPointMake(0, 75);
        plus1.size = CGSizeMake(plus1.frame.size.width/s, plus1.frame.size.height / s);
        plus1.zPosition = 2;
        [self.spriteLayer addChild:plus1];
        SKAction *plus1Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus1Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus1Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus1Group = [SKAction group:@[plus1Shrink, plus1Fade, plus1Move]];
        SKAction *plus1Remove = [SKAction removeFromParent];
        SKAction *plus1Sequence = [SKAction sequence:@[plus1Group, plus1Remove]];
        [plus1 runAction:plus1Sequence];
        
    }
    if (self.isWorth2Points == YES) {
        [pointsLabel incrementBy2];
        [pointsLabel2 incrementBy2];
        [gameOverPointsLabel incrementBy2];
        SKTexture *plus2Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus2"];
        SKSpriteNode *plus2 = [SKSpriteNode spriteNodeWithTexture:plus2Texture];
        plus2.size = CGSizeMake(plus2.frame.size.width/s, plus2.frame.size.height / s);
        plus2.position = CGPointMake(0, 75);
        plus2.zPosition = 2;
        [self.spriteLayer addChild:plus2];
        SKAction *plus2Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus2Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus2Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus2Group = [SKAction group:@[plus2Shrink, plus2Fade, plus2Move]];
        SKAction *plus2Remove = [SKAction removeFromParent];
        SKAction *plus2Sequence = [SKAction sequence:@[plus2Group, plus2Remove]];
        [plus2 runAction:plus2Sequence];
    }
    if (self.isWorth3Points == YES) {
        [pointsLabel incrementBy3];
        [pointsLabel2 incrementBy3];
        [gameOverPointsLabel incrementBy3];
        SKTexture *plus3Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus3"];
        SKSpriteNode *plus3 = [SKSpriteNode spriteNodeWithTexture:plus3Texture];
        plus3.size = CGSizeMake(plus3.frame.size.width/s, plus3.frame.size.height / s);
        plus3.position = CGPointMake(0, 75);
        plus3.zPosition = 2;
        [self.spriteLayer addChild:plus3];
        SKAction *plus3Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus3Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus3Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus3Group = [SKAction group:@[plus3Shrink, plus3Fade, plus3Move]];
        SKAction *plus3Remove = [SKAction removeFromParent];
        SKAction *plus3Sequence = [SKAction sequence:@[plus3Group, plus3Remove]];
        [plus3 runAction:plus3Sequence];
    }
    if (self.isWorth4Points == YES) {
        [pointsLabel incrementBy4];
        [pointsLabel2 incrementBy4];
        [gameOverPointsLabel incrementBy4];
        SKTexture *plus4Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus4"];
        SKSpriteNode *plus4 = [SKSpriteNode spriteNodeWithTexture:plus4Texture];
        plus4.size = CGSizeMake(plus4.frame.size.width/s, plus4.frame.size.height / s);
        plus4.position = CGPointMake(0, 75);
        plus4.zPosition = 2;
        [self.spriteLayer addChild:plus4];
        SKAction *plus4Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus4Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus4Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus4Group = [SKAction group:@[plus4Shrink, plus4Fade, plus4Move]];
        SKAction *plus4Remove = [SKAction removeFromParent];
        SKAction *plus4Sequence = [SKAction sequence:@[plus4Group, plus4Remove]];
        [plus4 runAction:plus4Sequence];
    }
    if (self.isWorth5Points == YES) {
        [pointsLabel incrementBy5];
        [pointsLabel2 incrementBy5];
        [gameOverPointsLabel incrementBy5];
        SKTexture *plus5Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus5"];
        SKSpriteNode *plus5 = [SKSpriteNode spriteNodeWithTexture:plus5Texture];
        plus5.size = CGSizeMake(plus5.frame.size.width/s, plus5.frame.size.height / s);
        plus5.position = CGPointMake(0, 75);
        plus5.zPosition = 2;
        [self.spriteLayer addChild:plus5];
        SKAction *plus5Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus5Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus5Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus5Group = [SKAction group:@[plus5Shrink, plus5Fade, plus5Move]];
        SKAction *plus5Remove = [SKAction removeFromParent];
        SKAction *plus5Sequence = [SKAction sequence:@[plus5Group, plus5Remove]];
        [plus5 runAction:plus5Sequence];
    }
    if (self.isWorth6Points == YES) {
        [pointsLabel incrementBy6];
        [pointsLabel2 incrementBy6];
        [gameOverPointsLabel incrementBy6];
        SKTexture *plus6Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus6"];
        SKSpriteNode *plus6 = [SKSpriteNode spriteNodeWithTexture:plus6Texture];
        plus6.size = CGSizeMake(plus6.frame.size.width/s, plus6.frame.size.height / s);
        plus6.position = CGPointMake(0, 75);
        plus6.zPosition = 2;
        [self.spriteLayer addChild:plus6];
        SKAction *plus6Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus6Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus6Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus6Group = [SKAction group:@[plus6Shrink, plus6Fade, plus6Move]];
        SKAction *plus6Remove = [SKAction removeFromParent];
        SKAction *plus6Sequence = [SKAction sequence:@[plus6Group, plus6Remove]];
        [plus6 runAction:plus6Sequence];
    }
    if (self.isWorth7Points == YES) {
        [pointsLabel incrementBy7];
        [pointsLabel2 incrementBy7];
        [gameOverPointsLabel incrementBy7];
        SKTexture *plus7Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus7"];
        SKSpriteNode *plus7 = [SKSpriteNode spriteNodeWithTexture:plus7Texture];
        plus7.size = CGSizeMake(plus7.frame.size.width/s, plus7.frame.size.height / s);
        plus7.position = CGPointMake(0, 75);
        plus7.zPosition = 2;
        [self.spriteLayer addChild:plus7];
        SKAction *plus7Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus7Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus7Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus7Group = [SKAction group:@[plus7Shrink, plus7Fade, plus7Move]];
        SKAction *plus7Remove = [SKAction removeFromParent];
        SKAction *plus7Sequence = [SKAction sequence:@[plus7Group, plus7Remove]];
        [plus7 runAction:plus7Sequence];
    }
    if (self.isWorth8Points == YES) {
        [pointsLabel incrementBy8];
        [pointsLabel2 incrementBy8];
        [gameOverPointsLabel incrementBy8];
        SKTexture *plus8Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus8"];
        SKSpriteNode *plus8 = [SKSpriteNode spriteNodeWithTexture:plus8Texture];
        plus8.size = CGSizeMake(plus8.frame.size.width/s, plus8.frame.size.height / s);
        plus8.position = CGPointMake(0, 75);
        plus8.zPosition = 2;
        [self.spriteLayer addChild:plus8];
        SKAction *plus8Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus8Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus8Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus8Group = [SKAction group:@[plus8Shrink, plus8Fade, plus8Move]];
        SKAction *plus8Remove = [SKAction removeFromParent];
        SKAction *plus8Sequence = [SKAction sequence:@[plus8Group, plus8Remove]];
        [plus8 runAction:plus8Sequence];
    }
    if (self.isWorth9Points == YES) {
        [pointsLabel incrementBy9];
        [pointsLabel2 incrementBy9];
        [gameOverPointsLabel incrementBy9];
        SKTexture *plus9Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus9"];
        SKSpriteNode *plus9 = [SKSpriteNode spriteNodeWithTexture:plus9Texture];
        plus9.size = CGSizeMake(plus9.frame.size.width/s, plus9.frame.size.height / s);
        plus9.position = CGPointMake(0, 75);
        plus9.zPosition = 2;
        [self.spriteLayer addChild:plus9];
        SKAction *plus9Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus9Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus9Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus9Group = [SKAction group:@[plus9Shrink, plus9Fade, plus9Move]];
        SKAction *plus9Remove = [SKAction removeFromParent];
        SKAction *plus9Sequence = [SKAction sequence:@[plus9Group, plus9Remove]];
        [plus9 runAction:plus9Sequence];
    }
    if (self.isWorth10Points == YES) {
        [pointsLabel incrementBy10];
        [pointsLabel2 incrementBy10];
        [gameOverPointsLabel incrementBy10];
        SKTexture *plus10Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus10"];
        SKSpriteNode *plus10 = [SKSpriteNode spriteNodeWithTexture:plus10Texture];
        plus10.size = CGSizeMake(plus10.frame.size.width/s, plus10.frame.size.height / s);
        plus10.position = CGPointMake(0, 75);
        plus10.zPosition = 2;
        [self.spriteLayer addChild:plus10];
        SKAction *plus10Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus10Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus10Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus10Group = [SKAction group:@[plus10Shrink, plus10Fade, plus10Move]];
        SKAction *plus10Remove = [SKAction removeFromParent];
        SKAction *plus10Sequence = [SKAction sequence:@[plus10Group, plus10Remove]];
        [plus10 runAction:plus10Sequence];
    }
    if (self.isWorth11Points == YES) {
        [pointsLabel incrementBy11];
        [pointsLabel2 incrementBy11];
        [gameOverPointsLabel incrementBy11];
        SKTexture *plus11Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus11"];
        SKSpriteNode *plus11 = [SKSpriteNode spriteNodeWithTexture:plus11Texture];
        plus11.size = CGSizeMake(plus11.frame.size.width/s, plus11.frame.size.height / s);
        plus11.position = CGPointMake(0, 75);
        plus11.zPosition = 2;
        [self.spriteLayer addChild:plus11];
        SKAction *plus11Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus11Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus11Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus11Group = [SKAction group:@[plus11Shrink, plus11Fade, plus11Move]];
        SKAction *plus11Remove = [SKAction removeFromParent];
        SKAction *plus11Sequence = [SKAction sequence:@[plus11Group, plus11Remove]];
        [plus11 runAction:plus11Sequence];
    }
    if (self.isWorth12Points == YES) {
        [pointsLabel incrementBy12];
        [pointsLabel2 incrementBy12];
        [gameOverPointsLabel incrementBy12];
        SKTexture *plus12Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus12"];
        SKSpriteNode *plus12 = [SKSpriteNode spriteNodeWithTexture:plus12Texture];
        plus12.size = CGSizeMake(plus12.frame.size.width/s, plus12.frame.size.height / s);
        plus12.position = CGPointMake(0, 75);
        plus12.zPosition = 2;
        [self.spriteLayer addChild:plus12];
        SKAction *plus12Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus12Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus12Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus12Group = [SKAction group:@[plus12Shrink, plus12Fade, plus12Move]];
        SKAction *plus12Remove = [SKAction removeFromParent];
        SKAction *plus12Sequence = [SKAction sequence:@[plus12Group, plus12Remove]];
        [plus12 runAction:plus12Sequence];
    }
    if (self.isWorth13Points == YES) {
        [pointsLabel incrementBy13];
        [pointsLabel2 incrementBy13];
        [gameOverPointsLabel incrementBy13];
        SKTexture *plus13Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus13"];
        SKSpriteNode *plus13 = [SKSpriteNode spriteNodeWithTexture:plus13Texture];
        plus13.size = CGSizeMake(plus13.frame.size.width/s, plus13.frame.size.height / s);
        plus13.position = CGPointMake(0, 75);
        plus13.zPosition = 2;
        [self.spriteLayer addChild:plus13];
        SKAction *plus13Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus13Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus13Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus13Group = [SKAction group:@[plus13Shrink, plus13Fade, plus13Move]];
        SKAction *plus13Remove = [SKAction removeFromParent];
        SKAction *plus13Sequence = [SKAction sequence:@[plus13Group, plus13Remove]];
        [plus13 runAction:plus13Sequence];
    }
    if (self.isWorth14Points == YES) {
        [pointsLabel incrementBy14];
        [pointsLabel2 incrementBy14];
        [gameOverPointsLabel incrementBy14];
        SKTexture *plus14Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus14"];
        SKSpriteNode *plus14 = [SKSpriteNode spriteNodeWithTexture:plus14Texture];
        plus14.size = CGSizeMake(plus14.frame.size.width/s, plus14.frame.size.height / s);
        plus14.position = CGPointMake(0, 75);
        plus14.zPosition = 2;
        [self.spriteLayer addChild:plus14];
        SKAction *plus14Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus14Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus14Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus14Group = [SKAction group:@[plus14Shrink, plus14Fade, plus14Move]];
        SKAction *plus14Remove = [SKAction removeFromParent];
        SKAction *plus14Sequence = [SKAction sequence:@[plus14Group, plus14Remove]];
        [plus14 runAction:plus14Sequence];
    }
    if (self.isWorth15Points == YES) {
        [pointsLabel incrementBy15];
        [pointsLabel2 incrementBy15];
        [gameOverPointsLabel incrementBy15];
        SKTexture *plus15Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus15"];
        SKSpriteNode *plus15 = [SKSpriteNode spriteNodeWithTexture:plus15Texture];
        plus15.size = CGSizeMake(plus15.frame.size.width/s, plus15.frame.size.height / s);
        plus15.position = CGPointMake(0, 75);
        plus15.zPosition = 2;
        [self.spriteLayer addChild:plus15];
        SKAction *plus15Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus15Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus15Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus15Group = [SKAction group:@[plus15Shrink, plus15Fade, plus15Move]];
        SKAction *plus15Remove = [SKAction removeFromParent];
        SKAction *plus15Sequence = [SKAction sequence:@[plus15Group, plus15Remove]];
        [plus15 runAction:plus15Sequence];
    }
    if (self.isWorth16Points == YES) {
        [pointsLabel incrementBy16];
        [pointsLabel2 incrementBy16];
        [gameOverPointsLabel incrementBy16];
        SKTexture *plus16Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus16"];
        SKSpriteNode *plus16 = [SKSpriteNode spriteNodeWithTexture:plus16Texture];
        plus16.size = CGSizeMake(plus16.frame.size.width/s, plus16.frame.size.height / s);
        plus16.position = CGPointMake(0, 75);
        plus16.zPosition = 2;
        [self.spriteLayer addChild:plus16];
        SKAction *plus16Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus16Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus16Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus16Group = [SKAction group:@[plus16Shrink, plus16Fade, plus16Move]];
        SKAction *plus16Remove = [SKAction removeFromParent];
        SKAction *plus16Sequence = [SKAction sequence:@[plus16Group, plus16Remove]];
        [plus16 runAction:plus16Sequence];
    }
    if (self.isWorth17Points == YES) {
        [pointsLabel incrementBy17];
        [pointsLabel2 incrementBy17];
        [gameOverPointsLabel incrementBy17];
        SKTexture *plus17Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus17"];
        SKSpriteNode *plus17 = [SKSpriteNode spriteNodeWithTexture:plus17Texture];
        plus17.size = CGSizeMake(plus17.frame.size.width/s, plus17.frame.size.height / s);
        plus17.position = CGPointMake(0, 75);
        plus17.zPosition = 2;
        [self.spriteLayer addChild:plus17];
        SKAction *plus17Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus17Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus17Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus17Group = [SKAction group:@[plus17Shrink, plus17Fade, plus17Move]];
        SKAction *plus17Remove = [SKAction removeFromParent];
        SKAction *plus17Sequence = [SKAction sequence:@[plus17Group, plus17Remove]];
        [plus17 runAction:plus17Sequence];
    }
    if (self.isWorth18Points == YES) {
        [pointsLabel incrementBy18];
        [pointsLabel2 incrementBy18];
        [gameOverPointsLabel incrementBy18];
        SKTexture *plus18Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus18"];
        SKSpriteNode *plus18 = [SKSpriteNode spriteNodeWithTexture:plus18Texture];
        plus18.size = CGSizeMake(plus18.frame.size.width/s, plus18.frame.size.height / s);
        plus18.position = CGPointMake(0, 75);
        plus18.zPosition = 2;
        [self.spriteLayer addChild:plus18];
        SKAction *plus18Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus18Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus18Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus18Group = [SKAction group:@[plus18Shrink, plus18Fade, plus18Move]];
        SKAction *plus18Remove = [SKAction removeFromParent];
        SKAction *plus18Sequence = [SKAction sequence:@[plus18Group, plus18Remove]];
        [plus18 runAction:plus18Sequence];
    }
    if (self.isWorth19Points == YES) {
        [pointsLabel incrementBy19];
        [pointsLabel2 incrementBy19];
        [gameOverPointsLabel incrementBy19];
        SKTexture *plus19Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus19"];
        SKSpriteNode *plus19 = [SKSpriteNode spriteNodeWithTexture:plus19Texture];
        plus19.size = CGSizeMake(plus19.frame.size.width/s, plus19.frame.size.height / s);
        plus19.position = CGPointMake(0, 75);
        plus19.zPosition = 2;
        [self.spriteLayer addChild:plus19];
        SKAction *plus19Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus19Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus19Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus19Group = [SKAction group:@[plus19Shrink, plus19Fade, plus19Move]];
        SKAction *plus19Remove = [SKAction removeFromParent];
        SKAction *plus19Sequence = [SKAction sequence:@[plus19Group, plus19Remove]];
        [plus19 runAction:plus19Sequence];
    }
    if (self.isWorth20Points == YES) {
        [pointsLabel incrementBy20];
        [pointsLabel2 incrementBy20];
        [gameOverPointsLabel incrementBy20];
        SKTexture *plus20Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus20"];
        SKSpriteNode *plus20 = [SKSpriteNode spriteNodeWithTexture:plus20Texture];
        plus20.size = CGSizeMake(plus20.frame.size.width/s, plus20.frame.size.height / s);
        plus20.position = CGPointMake(0, 75);
        plus20.zPosition = 2;
        [self.spriteLayer addChild:plus20];
        SKAction *plus20Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus20Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus20Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus20Group = [SKAction group:@[plus20Shrink, plus20Fade, plus20Move]];
        SKAction *plus20Remove = [SKAction removeFromParent];
        SKAction *plus20Sequence = [SKAction sequence:@[plus20Group, plus20Remove]];
        [plus20 runAction:plus20Sequence];
    }
    if (self.isWorth21Points == YES) {
        [pointsLabel incrementBy21];
        [pointsLabel2 incrementBy21];
        [gameOverPointsLabel incrementBy21];
        SKTexture *plus21Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus21"];
        SKSpriteNode *plus21 = [SKSpriteNode spriteNodeWithTexture:plus21Texture];
        plus21.size = CGSizeMake(plus21.frame.size.width/s, plus21.frame.size.height / s);
        plus21.position = CGPointMake(0, 75);
        plus21.zPosition = 2;
        [self.spriteLayer addChild:plus21];
        SKAction *plus21Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus21Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus21Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus21Group = [SKAction group:@[plus21Shrink, plus21Fade, plus21Move]];
        SKAction *plus21Remove = [SKAction removeFromParent];
        SKAction *plus21Sequence = [SKAction sequence:@[plus21Group, plus21Remove]];
        [plus21 runAction:plus21Sequence];
    }
    if (self.isWorth22Points == YES) {
        [pointsLabel incrementBy22];
        [pointsLabel2 incrementBy22];
        [gameOverPointsLabel incrementBy22];
        SKTexture *plus22Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus22"];
        SKSpriteNode *plus22 = [SKSpriteNode spriteNodeWithTexture:plus22Texture];
        plus22.size = CGSizeMake(plus22.frame.size.width/s, plus22.frame.size.height / s);
        plus22.position = CGPointMake(0, 75);
        plus22.zPosition = 2;
        [self.spriteLayer addChild:plus22];
        SKAction *plus22Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus22Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus22Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus22Group = [SKAction group:@[plus22Shrink, plus22Fade, plus22Move]];
        SKAction *plus22Remove = [SKAction removeFromParent];
        SKAction *plus22Sequence = [SKAction sequence:@[plus22Group, plus22Remove]];
        [plus22 runAction:plus22Sequence];
    }
    if (self.isWorth23Points == YES) {
        [pointsLabel incrementBy23];
        [pointsLabel2 incrementBy23];
        [gameOverPointsLabel incrementBy23];
        SKTexture *plus23Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus23"];
        SKSpriteNode *plus23 = [SKSpriteNode spriteNodeWithTexture:plus23Texture];
        plus23.size = CGSizeMake(plus23.frame.size.width/s, plus23.frame.size.height / s);
        plus23.position = CGPointMake(0, 75);
        plus23.zPosition = 2;
        [self.spriteLayer addChild:plus23];
        SKAction *plus23Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus23Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus23Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus23Group = [SKAction group:@[plus23Shrink, plus23Fade, plus23Move]];
        SKAction *plus23Remove = [SKAction removeFromParent];
        SKAction *plus23Sequence = [SKAction sequence:@[plus23Group, plus23Remove]];
        [plus23 runAction:plus23Sequence];
    }
    if (self.isWorth24Points == YES) {
        [pointsLabel incrementBy24];
        [pointsLabel2 incrementBy24];
        [gameOverPointsLabel incrementBy24];
        SKTexture *plus24Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus24"];
        SKSpriteNode *plus24 = [SKSpriteNode spriteNodeWithTexture:plus24Texture];
        plus24.size = CGSizeMake(plus24.frame.size.width/s, plus24.frame.size.height / s);
        plus24.position = CGPointMake(0, 75);
        plus24.zPosition = 2;
        [self.spriteLayer addChild:plus24];
        SKAction *plus24Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus24Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus24Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus24Group = [SKAction group:@[plus24Shrink, plus24Fade, plus24Move]];
        SKAction *plus24Remove = [SKAction removeFromParent];
        SKAction *plus24Sequence = [SKAction sequence:@[plus24Group, plus24Remove]];
        [plus24 runAction:plus24Sequence];
    }
    if (self.isWorth25Points == YES) {
        [pointsLabel incrementBy25];
        [pointsLabel2 incrementBy25];
        [gameOverPointsLabel incrementBy25];
        SKTexture *plus25Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus25"];
        SKSpriteNode *plus25 = [SKSpriteNode spriteNodeWithTexture:plus25Texture];
        plus25.size = CGSizeMake(plus25.frame.size.width/s, plus25.frame.size.height / s);
        plus25.position = CGPointMake(0, 75);
        plus25.zPosition = 2;
        [self.spriteLayer addChild:plus25];
        SKAction *plus25Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus25Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus25Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus25Group = [SKAction group:@[plus25Shrink, plus25Fade, plus25Move]];
        SKAction *plus25Remove = [SKAction removeFromParent];
        SKAction *plus25Sequence = [SKAction sequence:@[plus25Group, plus25Remove]];
        [plus25 runAction:plus25Sequence];
    }
    if (self.isWorth26Points == YES) {
        [pointsLabel incrementBy26];
        [pointsLabel2 incrementBy26];
        [gameOverPointsLabel incrementBy26];
        SKTexture *plus26Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus26"];
        SKSpriteNode *plus26 = [SKSpriteNode spriteNodeWithTexture:plus26Texture];
        plus26.size = CGSizeMake(plus26.frame.size.width/s, plus26.frame.size.height / s);
        plus26.position = CGPointMake(0, 75);
        plus26.zPosition = 2;
        [self.spriteLayer addChild:plus26];
        SKAction *plus26Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus26Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus26Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus26Group = [SKAction group:@[plus26Shrink, plus26Fade, plus26Move]];
        SKAction *plus26Remove = [SKAction removeFromParent];
        SKAction *plus26Sequence = [SKAction sequence:@[plus26Group, plus26Remove]];
        [plus26 runAction:plus26Sequence];
    }
    if (self.isWorth27Points == YES) {
        [pointsLabel incrementBy27];
        [pointsLabel2 incrementBy27];
        [gameOverPointsLabel incrementBy27];
        SKTexture *plus27Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus27"];
        SKSpriteNode *plus27 = [SKSpriteNode spriteNodeWithTexture:plus27Texture];
        plus27.size = CGSizeMake(plus27.frame.size.width/s, plus27.frame.size.height / s);
        plus27.position = CGPointMake(0, 75);
        plus27.zPosition = 2;
        [self.spriteLayer addChild:plus27];
        SKAction *plus27Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus27Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus27Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus27Group = [SKAction group:@[plus27Shrink, plus27Fade, plus27Move]];
        SKAction *plus27Remove = [SKAction removeFromParent];
        SKAction *plus27Sequence = [SKAction sequence:@[plus27Group, plus27Remove]];
        [plus27 runAction:plus27Sequence];
    }
    if (self.isWorth28Points == YES) {
        [pointsLabel incrementBy28];
        [pointsLabel2 incrementBy28];
        [gameOverPointsLabel incrementBy28];
        SKTexture *plus28Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus28"];
        SKSpriteNode *plus28 = [SKSpriteNode spriteNodeWithTexture:plus28Texture];
        plus28.size = CGSizeMake(plus28.frame.size.width/s, plus28.frame.size.height / s);
        plus28.position = CGPointMake(0, 75);
        plus28.zPosition = 2;
        [self.spriteLayer addChild:plus28];
        SKAction *plus28Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus28Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus28Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus28Group = [SKAction group:@[plus28Shrink, plus28Fade, plus28Move]];
        SKAction *plus28Remove = [SKAction removeFromParent];
        SKAction *plus28Sequence = [SKAction sequence:@[plus28Group, plus28Remove]];
        [plus28 runAction:plus28Sequence];
    }
    if (self.isWorth29Points == YES) {
        [pointsLabel incrementBy29];
        [pointsLabel2 incrementBy29];
        [gameOverPointsLabel incrementBy29];
        SKTexture *plus29Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus29"];
        SKSpriteNode *plus29 = [SKSpriteNode spriteNodeWithTexture:plus29Texture];
        plus29.size = CGSizeMake(plus29.frame.size.width/s, plus29.frame.size.height / s);
        plus29.position = CGPointMake(0, 75);
        plus29.zPosition = 2;
        [self.spriteLayer addChild:plus29];
        SKAction *plus29Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus29Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus29Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus29Group = [SKAction group:@[plus29Shrink, plus29Fade, plus29Move]];
        SKAction *plus29Remove = [SKAction removeFromParent];
        SKAction *plus29Sequence = [SKAction sequence:@[plus29Group, plus29Remove]];
        [plus29 runAction:plus29Sequence];
    }
    if (self.isWorth30Points == YES) {
        [pointsLabel incrementBy30];
        [pointsLabel2 incrementBy30];
        [gameOverPointsLabel incrementBy30];
        SKTexture *plus30Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus30"];
        SKSpriteNode *plus30 = [SKSpriteNode spriteNodeWithTexture:plus30Texture];
        plus30.size = CGSizeMake(plus30.frame.size.width/s, plus30.frame.size.height / s);
        plus30.position = CGPointMake(0, 75);
        plus30.zPosition = 2;
        [self.spriteLayer addChild:plus30];
        SKAction *plus30Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus30Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus30Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus30Group = [SKAction group:@[plus30Shrink, plus30Fade, plus30Move]];
        SKAction *plus30Remove = [SKAction removeFromParent];
        SKAction *plus30Sequence = [SKAction sequence:@[plus30Group, plus30Remove]];
        [plus30 runAction:plus30Sequence];
    }
    if (self.isWorth31Points == YES) {
        [pointsLabel incrementBy31];
        [pointsLabel2 incrementBy31];
        [gameOverPointsLabel incrementBy31];
        SKTexture *plus31Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus31"];
        SKSpriteNode *plus31 = [SKSpriteNode spriteNodeWithTexture:plus31Texture];
        plus31.size = CGSizeMake(plus31.frame.size.width/s, plus31.frame.size.height / s);
        plus31.position = CGPointMake(0, 75);
        plus31.zPosition = 2;
        [self.spriteLayer addChild:plus31];
        SKAction *plus31Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus31Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus31Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus31Group = [SKAction group:@[plus31Shrink, plus31Fade, plus31Move]];
        SKAction *plus31Remove = [SKAction removeFromParent];
        SKAction *plus31Sequence = [SKAction sequence:@[plus31Group, plus31Remove]];
        [plus31 runAction:plus31Sequence];
    }
    if (self.isWorth32Points == YES) {
        [pointsLabel incrementBy32];
        [pointsLabel2 incrementBy32];
        [gameOverPointsLabel incrementBy32];
        SKTexture *plus32Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus32"];
        SKSpriteNode *plus32 = [SKSpriteNode spriteNodeWithTexture:plus32Texture];
        plus32.size = CGSizeMake(plus32.frame.size.width/s, plus32.frame.size.height / s);
        plus32.position = CGPointMake(0, 75);
        plus32.zPosition = 2;
        [self.spriteLayer addChild:plus32];
        SKAction *plus32Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus32Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus32Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus32Group = [SKAction group:@[plus32Shrink, plus32Fade, plus32Move]];
        SKAction *plus32Remove = [SKAction removeFromParent];
        SKAction *plus32Sequence = [SKAction sequence:@[plus32Group, plus32Remove]];
        [plus32 runAction:plus32Sequence];
    }
    if (self.isWorth33Points == YES) {
        [pointsLabel incrementBy33];
        [pointsLabel2 incrementBy33];
        [gameOverPointsLabel incrementBy33];
        SKTexture *plus33Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus33"];
        SKSpriteNode *plus33 = [SKSpriteNode spriteNodeWithTexture:plus33Texture];
        plus33.size = CGSizeMake(plus33.frame.size.width/s, plus33.frame.size.height / s);
        plus33.position = CGPointMake(0, 75);
        plus33.zPosition = 2;
        [self.spriteLayer addChild:plus33];
        SKAction *plus33Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus33Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus33Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus33Group = [SKAction group:@[plus33Shrink, plus33Fade, plus33Move]];
        SKAction *plus33Remove = [SKAction removeFromParent];
        SKAction *plus33Sequence = [SKAction sequence:@[plus33Group, plus33Remove]];
        [plus33 runAction:plus33Sequence];
    }
    if (self.isWorth34Points == YES) {
        [pointsLabel incrementBy34];
        [pointsLabel2 incrementBy34];
        [gameOverPointsLabel incrementBy34];
        SKTexture *plus34Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus34"];
        SKSpriteNode *plus34 = [SKSpriteNode spriteNodeWithTexture:plus34Texture];
        plus34.size = CGSizeMake(plus34.frame.size.width/s, plus34.frame.size.height / s);
        plus34.position = CGPointMake(0, 75);
        plus34.zPosition = 2;
        [self.spriteLayer addChild:plus34];
        SKAction *plus3Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus3Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus3Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus3Group = [SKAction group:@[plus3Shrink, plus3Fade, plus3Move]];
        SKAction *plus3Remove = [SKAction removeFromParent];
        SKAction *plus3Sequence = [SKAction sequence:@[plus3Group, plus3Remove]];
        [plus34 runAction:plus3Sequence];
    }
    if (self.isWorth35Points == YES) {
        [pointsLabel incrementBy35];
        [pointsLabel2 incrementBy35];
        [gameOverPointsLabel incrementBy35];
        SKTexture *plus35Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus35"];
        SKSpriteNode *plus35 = [SKSpriteNode spriteNodeWithTexture:plus35Texture];
        plus35.size = CGSizeMake(plus35.frame.size.width/s, plus35.frame.size.height / s);
        plus35.position = CGPointMake(0, 75);
        plus35.zPosition = 2;
        [self.spriteLayer addChild:plus35];
        SKAction *plus35Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus35Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus35Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus35Group = [SKAction group:@[plus35Shrink, plus35Fade, plus35Move]];
        SKAction *plus35Remove = [SKAction removeFromParent];
        SKAction *plus35Sequence = [SKAction sequence:@[plus35Group, plus35Remove]];
        [plus35 runAction:plus35Sequence];
    }
    if (self.isWorth36Points == YES) {
        [pointsLabel incrementBy36];
        [pointsLabel2 incrementBy36];
        [gameOverPointsLabel incrementBy36];
        SKTexture *plus36Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus36"];
        SKSpriteNode *plus36 = [SKSpriteNode spriteNodeWithTexture:plus36Texture];
        plus36.size = CGSizeMake(plus36.frame.size.width/s, plus36.frame.size.height / s);
        plus36.position = CGPointMake(0, 75);
        plus36.zPosition = 2;
        [self.spriteLayer addChild:plus36];
        SKAction *plus36Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus36Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus36Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus36Group = [SKAction group:@[plus36Shrink, plus36Fade, plus36Move]];
        SKAction *plus36Remove = [SKAction removeFromParent];
        SKAction *plus36Sequence = [SKAction sequence:@[plus36Group, plus36Remove]];
        [plus36 runAction:plus36Sequence];
    }
    if (self.isWorth37Points == YES) {
        [pointsLabel incrementBy37];
        [pointsLabel2 incrementBy37];
        [gameOverPointsLabel incrementBy37];
        SKTexture *plus37Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus37"];
        SKSpriteNode *plus37 = [SKSpriteNode spriteNodeWithTexture:plus37Texture];
        plus37.size = CGSizeMake(plus37.frame.size.width/s, plus37.frame.size.height / s);
        plus37.position = CGPointMake(0, 75);
        plus37.zPosition = 2;
        [self.spriteLayer addChild:plus37];
        SKAction *plus37Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus37Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus37Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus37Group = [SKAction group:@[plus37Shrink, plus37Fade, plus37Move]];
        SKAction *plus37Remove = [SKAction removeFromParent];
        SKAction *plus37Sequence = [SKAction sequence:@[plus37Group, plus37Remove]];
        [plus37 runAction:plus37Sequence];
    }
    if (self.isWorth38Points == YES) {
        [pointsLabel incrementBy38];
        [pointsLabel2 incrementBy38];
        [gameOverPointsLabel incrementBy38];
        SKTexture *plus38Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus38"];
        SKSpriteNode *plus38 = [SKSpriteNode spriteNodeWithTexture:plus38Texture];
        plus38.size = CGSizeMake(plus38.frame.size.width/s, plus38.frame.size.height / s);
        plus38.position = CGPointMake(0, 75);
        plus38.zPosition = 2;
        [self.spriteLayer addChild:plus38];
        SKAction *plus38Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus38Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus38Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus38Group = [SKAction group:@[plus38Shrink, plus38Fade, plus38Move]];
        SKAction *plus38Remove = [SKAction removeFromParent];
        SKAction *plus38Sequence = [SKAction sequence:@[plus38Group, plus38Remove]];
        [plus38 runAction:plus38Sequence];
    }
    if (self.isWorth39Points == YES) {
        [pointsLabel incrementBy39];
        [pointsLabel2 incrementBy39];
        [gameOverPointsLabel incrementBy39];
        SKTexture *plus39Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus39"];
        SKSpriteNode *plus39 = [SKSpriteNode spriteNodeWithTexture:plus39Texture];
        plus39.size = CGSizeMake(plus39.frame.size.width/s, plus39.frame.size.height / s);
        plus39.position = CGPointMake(0, 75);
        plus39.zPosition = 2;
        [self.spriteLayer addChild:plus39];
        SKAction *plus39Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus39Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus39Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus39Group = [SKAction group:@[plus39Shrink, plus39Fade, plus39Move]];
        SKAction *plus39Remove = [SKAction removeFromParent];
        SKAction *plus39Sequence = [SKAction sequence:@[plus39Group, plus39Remove]];
        [plus39 runAction:plus39Sequence];
    }
    if (self.isWorth40Points == YES) {
        [pointsLabel incrementBy40];
        [pointsLabel2 incrementBy40];
        [gameOverPointsLabel incrementBy40];
        SKTexture *plus40Texture = [gameSceneSpritesTen textureNamed:@"FFGameScenePlus40"];
        SKSpriteNode *plus40 = [SKSpriteNode spriteNodeWithTexture:plus40Texture];
        plus40.size = CGSizeMake(plus40.frame.size.width/s, plus40.frame.size.height / s);
        plus40.position = CGPointMake(0, 75);
        plus40.zPosition = 2;
        [self.spriteLayer addChild:plus40];
        SKAction *plus40Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus40Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus40Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus40Group = [SKAction group:@[plus40Shrink, plus40Fade, plus40Move]];
        SKAction *plus40Remove = [SKAction removeFromParent];
        SKAction *plus40Sequence = [SKAction sequence:@[plus40Group, plus40Remove]];
        [plus40 runAction:plus40Sequence];
    }
    [self foodLabelPointsCheck];
    [self dropCheck];
    [self reggyLogic];
    
    
} //--Done--//
-(void)dropCheck {
    
    NMPointsLabel *pointsLabel = (NMPointsLabel *)[self childNodeWithName:@"pointsLabel"];
    NMPointsLabel *countDownLabel = (NMPointsLabel *)[self childNodeWithName:@"countDownLabel"];
    NMPointsLabel *foodCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"foodCollectedLabel"];
    NMPointsLabel *fruitsCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"fruitsCollectedLabel"];
    NMPointsLabel *vegetablesCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"vegetablesCollectedLabel"];
    NMPointsLabel *othersCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"othersCollectedLabel"];
    
    //BRONZE LVL 1
    if (rankNumber == 0 & pointsLabel.number >= 30 & self.bronzeDrop == NO) {
        if (bronze101 == NO) {
            pay = YES;
            payAprox = 1000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftGloves"];
        bronze101 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 1 & countDownLabel.secondsCount == 40 & self.bronzeDrop == NO) {
        if (bronze102 == NO) {
            pay = YES;
            payAprox = 1000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightGloves"];
        bronze102 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 2 & pointsLabel.number >= 60 & self.bronzeDrop == NO) {
        if (bronze103 == NO) {
            pay = YES;
            payAprox = 1000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown10"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling10"];
        bronze103 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    //BRONZE LVL 2
    if (rankNumber == 3 & pointsLabel.number >= 100 & self.bronzeDrop == NO) {
        if (bronze201 == NO) {
            pay = YES;
            payAprox = 2000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftAcorn"];
        bronze201 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 4 & countDownLabel.secondsCount == 60 & self.bronzeDrop == NO) {
        if (bronze202 == NO) {
            pay = YES;
            payAprox = 2000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightAcorn"];
        bronze202 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 5 & pointsLabel.number >= 150 & self.bronzeDrop == NO) {
        if (bronze203 == NO) {
            pay = YES;
            payAprox = 2000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronze203 = YES;
        beatObj = YES;
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown6"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling6"];
        [self bronzeCDrop];
        [confettiSound play];
    }
    //BRONZE LVL 3
    if (rankNumber == 6 & foodCollectedLabel.number >= 30 & self.bronzeDrop == NO) {
        if (bronze301 == NO) {
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftGolfClub"];
        bronze301 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 7 && (fruitsCollectedLabel.number >= 10 & vegetablesCollectedLabel.number >= 10) && self.bronzeDrop == NO) {
        if (bronze302 == NO) {
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightGolfClub"];
        bronze302 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 8 & foodCollectedLabel.number >= 40 & self.bronzeDrop == NO) {
        if (bronze303 == NO) {
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown2"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling2"];
        bronze303 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    //BRONZE LVL 4
    if (rankNumber == 9 && (fruitsCollectedLabel.number >= 15 & vegetablesCollectedLabel.number >= 15) && self.bronzeDrop == NO) {
        if (bronze401 == NO) {
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftBar"];
        bronze401 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 10 & othersCollectedLabel.number >= 5 & self.bronzeDrop == NO) {
        if (bronze402 == NO) {
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightBar"];
        bronze402 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 11 & othersCollectedLabel.number >= 5 & self.bronzeDrop == NO) {
        if (bronze403 == NO) {
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown9"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling9"];
        bronze403 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    //BRONZE LVL 5
    if (rankNumber == 12 & countDownLabel.secondsCount == 120 & self.bronzeDrop == NO) {
        if (bronze501 == NO) {
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftMicrophone"];
        bronze501 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 13 & pointsLabel.number >= 450 & self.bronzeDrop == NO) {
        if (bronze502 == NO) {
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightMicrophone"];
        bronze502 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 14 & pointsLabel.number >= 250 & self.bronzeDrop == NO) {
        if (bronze503 == NO) {
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown5"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling5"];
        bronze503 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    //BRONZE LVL 6
    if (rankNumber == 15 & foodCollectedLabel.number >= 35 & self.bronzeDrop == NO) {
        if (bronze601 == NO) {
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftChalice"];
        bronze601 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 16 & fruitsCollectedLabel.number >= 15 & vegetablesCollectedLabel.number >= 15 & self.bronzeDrop == NO) {
        if (bronze601 == NO) {
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightChalice"];
        bronze602 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 17 & fruitsCollectedLabel.number >= 5 & vegetablesCollectedLabel.number >= 5 & self.bronzeDrop == NO) {
        if (bronze601 == NO) {
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown4"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling4"];
        bronze603 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    //BRONZE LVL 7
    if (rankNumber == 18 & countDownLabel.secondsCount == 120 & self.bronzeDrop == NO) {
        if (bronze701 == NO) {
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftWatch"];
        bronze701 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 19 & pointsLabel.number >= 500 & self.bronzeDrop == NO) {
        if (bronze702 == NO) {
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightWatch"];
        bronze702 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 20 & foodCollectedLabel.number >= 50 & self.bronzeDrop == NO) {
        if (bronze703 == NO) {
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown8"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling8"];
        bronze703 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    //BRONZE LVL 8
    if (rankNumber == 21 & countDownLabel.secondsCount == 180 & self.bronzeDrop == NO) {
        if (bronze801 == NO) {
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftSwords"];
        bronze801 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 22 & fruitsCollectedLabel.number >= 20 & vegetablesCollectedLabel.number >= 20 & self.bronzeDrop == NO) {
        if (bronze802 == NO) {
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightSwords"];
        bronze802 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 23 & fruitsCollectedLabel.number >= 5 & vegetablesCollectedLabel.number >= 5 & othersCollectedLabel.number >= 5 & self.bronzeDrop == NO) {
        if (bronze803 == NO) {
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown1"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling1"];
        bronze803 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    //BRONZE LVL 9
    if (rankNumber == 24 & pointsLabel.number >= 800 & pointsLabel.number < 1000 & self.bronzeDrop == NO) {
        if (bronze901 == NO) {
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftUnicorn"];
        bronze901 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 25 & fruitsCollectedLabel.number >= 20 & vegetablesCollectedLabel.number >= 20 & pointsLabel.number >= 1000 & self.bronzeDrop == NO) {
        if (bronze902 == NO) {
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightUnicorn"];
        bronze902 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    if (rankNumber == 26 & fruitsCollectedLabel.number >= 5 & vegetablesCollectedLabel.number >= 5 & othersCollectedLabel.number >= 5 & pointsLabel.number >= 1500 & self.bronzeDrop == NO) {
        if (bronze903 == NO) {
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown3"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling3"];
        bronze903 = YES;
        beatObj = YES;
        [self bronzeCDrop];
        [confettiSound play];
    }
    //SILVER LVL 1
    if (rankNumber == 0 & pointsLabel.number >= 40 & self.silverDrop == NO) {
        if (silver101 == NO) {
            pay = YES;
            payAprox = 2000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftGloves"];
        silver101 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 1 & countDownLabel.secondsCount == 20 & self.silverDrop == NO) {
        if (silver102 == NO) {
            pay = YES;
            payAprox = 2000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightGloves"];
        silver102 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 2 & pointsLabel.number >= 80 & self.silverDrop == NO) {
        if (silver103 == NO) {
            pay = YES;
            payAprox = 2000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown10"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling10"];
        silver103 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //SILVER LVL 2
    if (rankNumber == 3 & pointsLabel.number >= 120 & self.silverDrop == NO) {
        if (silver201 == NO) {
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftAcorn"];
        silver201 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 4 & countDownLabel.secondsCount == 30 & self.silverDrop == NO) {
        if (silver202 == NO) {
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightAcorn"];
        silver202 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 5 & pointsLabel.number >= 170 & self.silverDrop == NO) {
        if (silver203 == NO) {
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown6"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling6"];
        silver203 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //SILVER LVL 3
    if (rankNumber == 6 & foodCollectedLabel.number >= 40 & self.silverDrop == NO) {
        if (silver301 == NO) {
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftGolfClub"];
        silver301 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 7 && (fruitsCollectedLabel.number >= 15 & vegetablesCollectedLabel.number >= 15) && self.silverDrop == NO) {
        if (silver302 == NO) {
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightGolfClub"];
        silver302 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 8 & foodCollectedLabel.number >= 45 & self.silverDrop == NO) {
        if (silver303 == NO) {
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown2"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling2"];
        silver303 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //SILVER LVL 4
    if (rankNumber == 9 && (fruitsCollectedLabel.number >= 20 & vegetablesCollectedLabel.number >= 20) && self.silverDrop == NO) {
        if (silver401 == NO) {
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftBar"];
        silver401 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 10 & othersCollectedLabel.number >= 10 & self.silverDrop == NO) {
        if (silver402 == NO) {
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightBar"];
        silver402 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 11 & othersCollectedLabel.number >= 10 & self.silverDrop == NO) {
        if (silver403 == NO) {
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown9"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling9"];
        silver403 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //SILVER LVL 5
    if (rankNumber == 12 & countDownLabel.secondsCount == 60 & self.silverDrop == NO) {
        if (silver501 == NO) {
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftMicrophone"];
        silver501 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 13 & pointsLabel.number >= 500 & self.silverDrop == NO) {
        if (silver502 == NO) {
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightMicrophone"];
        silver502 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 14 & pointsLabel.number >= 300 & self.silverDrop == NO) {
        if (silver503 == NO) {
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown5"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling5"];
        silver503 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //SILVER LVL 6
    if (rankNumber == 15 & foodCollectedLabel.number >= 45 & self.silverDrop == NO) {
        if (silver601 == NO) {
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftChalice"];
        silver601 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 16 & fruitsCollectedLabel.number >= 25 & vegetablesCollectedLabel.number >= 25 & self.silverDrop == NO) {
        if (silver602 == NO) {
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightChalice"];
        silver602 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 17 & fruitsCollectedLabel.number >= 10 & vegetablesCollectedLabel.number >= 10 & self.silverDrop == NO) {
        if (silver603 == NO) {
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown4"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling4"];
        silver603 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //SILVER LVL 7
    if (rankNumber == 18 & countDownLabel.secondsCount == 60 & self.silverDrop == NO) {
        if (silver701 == NO) {
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftWatch"];
        silver701 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 19 & pointsLabel.number >= 600 & self.silverDrop == NO) {
        if (silver702 == NO) {
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightWatch"];
        silver702 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 20 & foodCollectedLabel.number >= 55 & self.silverDrop == NO) {
        if (silver703 == NO) {
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown8"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling8"];
        silver703 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //SILVER LVL 8
    if (rankNumber == 21 & countDownLabel.secondsCount == 120 & self.silverDrop == NO) {
        if (silver801 == NO) {
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftSwords"];
        silver801 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 22 & fruitsCollectedLabel.number >= 25 & vegetablesCollectedLabel.number >= 25 & self.silverDrop == NO) {
        if (silver802 == NO) {
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightSwords"];
        silver802 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 23 & fruitsCollectedLabel.number >= 10 & vegetablesCollectedLabel.number >= 10 & othersCollectedLabel.number >= 10 & self.silverDrop == NO) {
        if (silver803 == NO) {
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown1"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling1"];
        silver803 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //SILVER LVL 9
    if (rankNumber == 24 & pointsLabel.number >= 1000 & pointsLabel.number < 1250 & self.silverDrop == NO) {
        if (silver901 == NO) {
            pay = YES;
            payAprox = 10000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftUnicorn"];
        silver901 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 25 & fruitsCollectedLabel.number >= 30 & vegetablesCollectedLabel.number >= 30 & pointsLabel.number >= 1000 & self.silverDrop == NO) {
        if (silver902 == NO) {
            pay = YES;
            payAprox = 10000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightUnicorn"];
        silver902 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    if (rankNumber == 26 & fruitsCollectedLabel.number >= 10 & vegetablesCollectedLabel.number >= 10 & othersCollectedLabel.number >= 10 & pointsLabel.number >= 1500 & self.silverDrop == NO) {
        if (silver903 == NO) {
            pay = YES;
            payAprox = 10000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown3"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling3"];
        silver903 = YES;
        beatObj = YES;
        [self silverCDrop];
        [confettiSound play];
    }
    //GOLD LVL 1
    if (rankNumber == 0 & pointsLabel.number >= 50 & self.goldDrop == NO) {
        if (gold101 == NO) {
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            showGoldGloves = YES;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftGloves"];
        gold101 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 1 & countDownLabel.seconds == 0 & self.goldDrop == NO) {
        if (gold102 == NO) {
            showGoldGloves = YES;
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightGloves"];
        gold102 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 2 & pointsLabel.number >= 100 & self.goldDrop == NO) {
        if (gold103 == NO) {
            pay = YES;
            payAprox = 3000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown10"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling10"];
        gold103 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    //GOLD LVL 2
    if (rankNumber == 3 & pointsLabel.number >= 140 & self.goldDrop == NO) {
        if (gold201 == NO) {
            showGoldAcorn = YES;
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftAcorn"];
        gold201 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 4 & countDownLabel.secondsCount == 0 & self.goldDrop == NO) {
        if (gold202 == NO) {
            showGoldAcorn = YES;
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightAcorn"];
        gold202 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 5 & pointsLabel.number >= 190 & self.goldDrop == NO) {
        if (gold203 == NO) {
            pay = YES;
            payAprox = 4000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown6"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling6"];
        gold203 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    //GOLD LVL 3
    if (rankNumber == 6 & foodCollectedLabel.number >= 50 & self.goldDrop == NO) {
        if (gold301 == NO) {
            showGoldGolfClub = YES;
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftGolfClub"];
        gold301 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 7 && (fruitsCollectedLabel.number >= 20 & vegetablesCollectedLabel.number >= 20) && self.goldDrop == NO) {
        if (gold302 == NO) {
            showGoldGolfClub = YES;
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightGolfClub"];
        gold302 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 8 & foodCollectedLabel.number >= 50 & self.goldDrop == NO) {
        if (gold303 == NO) {
            pay = YES;
            payAprox = 5000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown2"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling2"];
        gold303 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    //GOLD LVL 4
    if (rankNumber == 9 && (fruitsCollectedLabel.number >= 25 & vegetablesCollectedLabel.number >= 25) && self.goldDrop == NO) {
        if (gold401 == NO) {
            showGoldBar = YES;
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftBar"];
        gold401 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 10 & othersCollectedLabel.number >= 15 & self.goldDrop == NO) {
        if (gold402 == NO) {
            showGoldBar = YES;
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightBar"];
        gold402 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 11 & othersCollectedLabel.number >= 15 & self.goldDrop == NO) {
        if (gold403 == NO) {
            pay = YES;
            payAprox = 6000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown9"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling9"];
        gold403 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    //GOLD LVL 5
    if (rankNumber == 12 & countDownLabel.secondsCount == 0 & self.goldDrop == NO) {
        if (gold501 == NO) {
            showGoldMicrophone = YES;
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftMicrophone"];
        gold501 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 13 & pointsLabel.number >= 550 & self.goldDrop == NO) {
        if (gold502 == NO) {
            showGoldMicrophone = YES;
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightMicrophone"];
        gold502 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 14 & pointsLabel.number >= 350 & self.goldDrop == NO) {
        if (gold503 == NO) {
            pay = YES;
            payAprox = 7000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown5"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling5"];
        gold503 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    //GOLD LVL 6
    if (rankNumber == 15 & foodCollectedLabel.number >= 55 & self.goldDrop == NO) {
        if (gold601 == NO) {
            showGoldChalice = YES;
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftChalice"];
        gold601 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 16 & fruitsCollectedLabel.number >= 35 & vegetablesCollectedLabel.number >= 35 & self.goldDrop == NO) {
        if (gold602 == NO) {
            showGoldChalice = YES;
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightChalice"];
        gold602 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 17 & fruitsCollectedLabel.number >= 15 & vegetablesCollectedLabel.number >= 15 & self.goldDrop == NO) {
        if (gold603 == NO) {
            pay = YES;
            payAprox = 8000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown4"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling4"];
        gold603 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    //GOLD LVL 7
    if (rankNumber == 18 & countDownLabel.secondsCount == 0 & self.goldDrop == NO) {
        if (gold701 == NO) {
            showGoldWatch = YES;
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftWatch"];
        gold701 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 19 & pointsLabel.number >= 700 & self.goldDrop == NO) {
        if (gold702 == NO) {
            showGoldWatch = YES;
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightWatch"];
        gold702 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 20 & foodCollectedLabel.number >= 60 & self.goldDrop == NO) {
        if (gold703 == NO) {
            pay = YES;
            payAprox = 9000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown8"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling8"];
        gold703 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    //GOLD LVL 8
    if (rankNumber == 21 & countDownLabel.secondsCount == 0 & self.goldDrop == NO) {
        if (gold801 == NO) {
            showGoldSwords = YES;
            pay = YES;
            payAprox = 10000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftSwords"];
        gold801 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 22 & fruitsCollectedLabel.number >= 30 & vegetablesCollectedLabel.number >= 30 & self.goldDrop == NO) {
        if (gold802 == NO) {
            showGoldSwords = YES;
            pay = YES;
            payAprox = 10000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightSwords"];
        gold802 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 23 & fruitsCollectedLabel.number >= 15 & vegetablesCollectedLabel.number >= 15 & othersCollectedLabel.number >= 15 & self.goldDrop == NO ) {
        if (gold803 == NO) {
            pay = YES;
            payAprox = 10000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown1"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling1"];
        gold803 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    //GOLD LVL 9
    if (rankNumber == 24 & pointsLabel.number >= 1250 & self.goldDrop == NO) {
        if (gold901 == NO) {
            showGoldUnicron = YES;
            pay = YES;
            payAprox = 11000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftUnicorn"];
        gold901 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 25 & fruitsCollectedLabel.number >= 40 & vegetablesCollectedLabel.number >= 40 & pointsLabel.number >= 1000 & self.goldDrop == NO) {
        if (gold902 == NO) {
            showGoldUnicron = YES;
            pay = YES;
            payAprox = 11000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldenUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightUnicorn"];
        gold902 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    if (rankNumber == 26 & fruitsCollectedLabel.number >= 15 & vegetablesCollectedLabel.number >= 15 & othersCollectedLabel.number >= 15 & pointsLabel.number >= 1500 & self.goldDrop == NO) {
        if (gold903 == NO) {
            pay = YES;
            payAprox = 11000;
            payAmount += payAprox;
            FactoryBucksLabel *increment = [[FactoryBucksLabel alloc]init];
            [increment incrementAmount];
            Data *save1 = [[Data alloc]init];
            [save1 saveAmountFB];
        }
        goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown3"];
        crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling3"];
        gold903 = YES;
        beatObj = YES;
        [self goldCDrop];
        [confettiSound play];
    }
    
    RankLogic *save = [[RankLogic alloc]init];
    [save saveRankValues];
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setBool:beatObj forKey:@"beatObj"];
    [defaults synchronize];
    
    NSLog(@"PAYAMOUNT:" @"%ld", (long)payAmount);
    if (beatObj == YES) {
        
        tauntInt = 5;
        
    }
    
}
-(void)bronzeCDrop {
    
    SKTextureAtlas *confettiAnimSprites2 = [self textureAtlasNamed:@"ConfettiAnimSprites2"];
    SKTexture *bronzeConfettiTexture = [confettiAnimSprites2 textureNamed:@"FFGameSceneBronzeConfetti1"];
    
    SKSpriteNode *bronzeConfetti = [SKSpriteNode spriteNodeWithTexture:bronzeConfettiTexture];
    bronzeConfetti.position = CGPointMake(0,self.frame.size.height + 285 );
    bronzeConfetti.size = CGSizeMake(bronzeConfetti.frame.size.width/s, bronzeConfetti.frame.size.height / s);
    bronzeConfetti.zPosition = 5;
    [self.spriteLayer addChild:bronzeConfetti];
    
    [self runAction:yourSoundAction];
    
    NSArray *bronzeConfettiArray = @[[SKTexture textureWithImageNamed:@"FFGameSceneBronzeConfetti1"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneBronzeConfetti2"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneBronzeConfetti3"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneBronzeConfetti4"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneBronzeConfetti5"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneBronzeConfetti4"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneBronzeConfetti3"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneBronzeConfetti2"]];
    
    SKAction *textureAnim1 = [SKAction animateWithTextures:bronzeConfettiArray timePerFrame:0.075];
    SKAction *repeatTA1 = [SKAction repeatActionForever:textureAnim1];
    SKAction *move1 = [SKAction moveToY:-1150 duration:3];
    SKAction *group1 = [SKAction group:@[repeatTA1,move1]];
    [bronzeConfetti runAction:group1];
    
    self.bronzeDrop = YES;
    
    SKAction *wait = [SKAction waitForDuration:3];
    SKAction *action = [SKAction runBlock:^{
        [bronzeConfetti removeFromParent];
    }];
    SKAction *seq = [SKAction sequence:@[wait, action]];
    [self runAction:seq];
    
} //--Done--//
-(void)silverCDrop {
    
    SKTextureAtlas *confettiAnimSprites3 = [self textureAtlasNamed:@"ConfettiAnimSprites3"];
    SKTexture *silverConfettiTexture = [confettiAnimSprites3 textureNamed:@"FFGameSceneSilverConfetti1"];
    
    SKSpriteNode *silverConfetti = [SKSpriteNode spriteNodeWithTexture:silverConfettiTexture];
    silverConfetti.position = CGPointMake(0,self.frame.size.height + 285 );
    silverConfetti.size = CGSizeMake(silverConfetti.frame.size.width/s, silverConfetti.frame.size.height / s);
    silverConfetti.zPosition = 5;
    [self.spriteLayer addChild:silverConfetti];
    
    [self runAction:yourSoundAction];
    
    NSArray *silverConfettiArray = @[[SKTexture textureWithImageNamed:@"FFGameSceneSilverConfetti1"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneSilverConfetti2"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneSilverConfetti3"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneSilverConfetti4"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneSilverConfetti5"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneSilverConfetti4"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneSilverConfetti3"],
                                     [SKTexture textureWithImageNamed:@"FFGameSceneSilverConfetti2"]];
    
    SKAction *textureAnim1 = [SKAction animateWithTextures:silverConfettiArray timePerFrame:0.075];
    SKAction *repeatTA1 = [SKAction repeatActionForever:textureAnim1];
    SKAction *move1 = [SKAction moveToY:-1150 duration:3];
    SKAction *group1 = [SKAction group:@[repeatTA1,move1]];
    [silverConfetti runAction:group1];
    
    self.silverDrop = YES;
    
    SKAction *wait = [SKAction waitForDuration:3];
    SKAction *action = [SKAction runBlock:^{
        [silverConfetti removeFromParent];
    }];
    SKAction *seq = [SKAction sequence:@[wait, action]];
    [self runAction:seq];
    
} //--Done--//
-(void)goldCDrop {
    
    SKTextureAtlas *confettiAnimSprites4 = [self textureAtlasNamed:@"ConfettiAnimSprites4"];
    SKTexture *goldConfettiTexture = [confettiAnimSprites4 textureNamed:@"FFGameSceneGoldConfetti1"];
    
    SKSpriteNode *goldConfetti = [SKSpriteNode spriteNodeWithTexture:goldConfettiTexture];
    goldConfetti.position = CGPointMake(0,self.frame.size.height + 285 );
    goldConfetti.size = CGSizeMake(goldConfetti.frame.size.width/s, goldConfetti.frame.size.height / s);
    goldConfetti.zPosition = 5;
    [self.spriteLayer addChild:goldConfetti];
    
    [self runAction:yourSoundAction];
    
    NSArray *goldConfettiArray = @[[SKTexture textureWithImageNamed:@"FFGameSceneGoldConfetti1"],
                                   [SKTexture textureWithImageNamed:@"FFGameSceneGoldConfetti2"],
                                   [SKTexture textureWithImageNamed:@"FFGameSceneGoldConfetti3"],
                                   [SKTexture textureWithImageNamed:@"FFGameSceneGoldConfetti4"],
                                   [SKTexture textureWithImageNamed:@"FFGameSceneGoldConfetti5"],
                                   [SKTexture textureWithImageNamed:@"FFGameSceneGoldConfetti4"],
                                   [SKTexture textureWithImageNamed:@"FFGameSceneGoldConfetti3"],
                                   [SKTexture textureWithImageNamed:@"FFGameSceneGoldConfetti2"]];
    
    SKAction *textureAnim1 = [SKAction animateWithTextures:goldConfettiArray timePerFrame:0.075];
    SKAction *repeatTA1 = [SKAction repeatActionForever:textureAnim1];
    SKAction *move1 = [SKAction moveToY:-1150 duration:3];
    SKAction *group1 = [SKAction group:@[repeatTA1,move1]];
    [goldConfetti runAction:group1];
    
    self.goldDrop = YES;
    
    SKAction *wait = [SKAction waitForDuration:3];
    SKAction *action = [SKAction runBlock:^{
        [goldConfetti removeFromParent];
    }];
    SKAction *seq = [SKAction sequence:@[wait, action]];
    [self runAction:seq];
    
    if (invalidateTimer == NO) {
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:10],[SKAction performSelector:@selector(removeFood) onTarget:self],[SKAction performSelector:@selector(gameOver) onTarget:self]]]];
    }
} //--Done--//
-(void)sprites {
    
    foodCatcherTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneFoodCatcherBoard"];
    
    foodCatcher = [SKSpriteNode spriteNodeWithTexture:foodCatcherTexture];
    foodCatcher.position = CGPointMake(0, 0);
    foodCatcher.size = CGSizeMake(foodCatcher.frame.size.width/s, foodCatcher.frame.size.height / s);
    foodCatcher.name = @"FoodCatcher";
    [self.spriteLayer addChild:foodCatcher];
    foodCatcher.zPosition = 3.1;
    
    foodDropperTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneFoodDropper"];
    
    foodDropper = [SKSpriteNode spriteNodeWithTexture:foodDropperTexture];
    foodDropper.position = CGPointZero;
    foodDropper.size = CGSizeMake(foodDropper.frame.size.width/s, foodDropper.frame.size.height / s);
    foodDropper.zPosition = 3.1;
    foodDropper.name = @"FoodDropper";
    [self.spriteLayer addChild:foodDropper];
    
    foodCatcherHoleTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneFoodCatcherHole"];
    
    foodCatcherHole = [SKSpriteNode spriteNodeWithTexture:foodCatcherHoleTexture];
    foodCatcherHole.position = CGPointMake(0, 0);
    foodCatcherHole.size = CGSizeMake(foodCatcherHole.frame.size.width/s, foodCatcherHole.frame.size.height / s);
    foodCatcherHole.zPosition = 1.1;
    [self.spriteLayer addChild:foodCatcherHole];
    
    if (rankNumber < 27) {
    tutorialTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneTutorial"];
    
    tutorial = [SKSpriteNode spriteNodeWithTexture:tutorialTexture];
    tutorial.position = CGPointZero;
    tutorial.size = CGSizeMake(tutorial.frame.size.width/s, tutorial.frame.size.height / s);
    tutorial.zPosition = 3.11;
    [self.spriteLayer addChild:tutorial];
    }
    pauseTexture = [buttonSprites textureNamed:@"FFGameScenePauseButton"];
    
    pause = [SKSpriteNode spriteNodeWithTexture:pauseTexture];
    pause.position = CGPointMake(-self.frame.size.width/2.6, self.frame.size.height/2.3);
    pause.size = CGSizeMake(pause.frame.size.width/s, pause.frame.size.height / s);
    pause.zPosition = 5;
    pause.name = @"Pause";
    [self.spriteLayer addChild:pause];
    
    filterTexture = [mainMenuSprites textureNamed:@"Filter"];
    
    filter = [SKSpriteNode spriteNodeWithTexture:filterTexture];
    filter.position = CGPointZero;
    filter.size = CGSizeMake(filter.frame.size.width/s, filter.frame.size.height / s);
    filter.zPosition = 10002;
    [self.spriteLayer addChild:filter];
    
    /*backgroundAnim = [SKSpriteNode spriteNodeWithTexture:SPRITES_TEX_GAMESCENEANIM];
     backgroundAnim.position = CGPointZero;
     backgroundAnim.zPosition = 5;
     [self.spriteLayer addChild:backgroundAnim];*/
    
    cloudsTexture = [gameSceneSpritesThree textureNamed:@"FGGameSceneCloudsAnim0001"];
    
    clouds = [SKSpriteNode spriteNodeWithTexture:cloudsTexture];
    clouds.position = CGPointZero;
    clouds.zPosition = 1;
    [self.spriteLayer addChild:clouds];
    
    SKAction *cAni = [SKAction animateWithTextures:CLOUD_ANIM_START timePerFrame:0.083333333];
    SKAction *repeatcAni = [SKAction repeatActionForever:cAni];
    [clouds runAction:repeatcAni];
    
} //--Fix Positions--//
-(void)sideSprites {
    
    if (canActivateDP == YES) {
        doublePointsSPTexture = [buttonSprites textureNamed:@"FFGameSceneSideDPButton"];
        doublePointsSP = [SKSpriteNode spriteNodeWithTexture:doublePointsSPTexture];
        doublePointsSP.position = CGPointMake(-self.frame.size.width/2.4, -self.frame.size.height/10);
        doublePointsSP.size = CGSizeMake(doublePointsSP.frame.size.width/s, doublePointsSP.frame.size.height / s);
        doublePointsSP.zPosition = 3.4;
        doublePointsSP.name = @"DoublePoints";
        [self.spriteLayer addChild:doublePointsSP];
    }
    
    if (canActivateTP == YES) {
        triplePointsSPTexture = [buttonSprites textureNamed:@"FFGameSceneSideTPButton"];
        triplePointsSP = [SKSpriteNode spriteNodeWithTexture:triplePointsSPTexture];
        triplePointsSP.position = CGPointMake(-self.frame.size.width/2.4, -self.frame.size.height/70);
        triplePointsSP.size = CGSizeMake(triplePointsSP.frame.size.width/s, triplePointsSP.frame.size.height / s);
        triplePointsSP.zPosition = 3.4;
        triplePointsSP.name = @"TriplePoints";
        [self.spriteLayer addChild:triplePointsSP];
    }
    
    if (canActivateQP == YES) {
        quadPointsSPTexture = [buttonSprites textureNamed:@"FFGameSceneSideQPButton"];
        quadPointsSP = [SKSpriteNode spriteNodeWithTexture:quadPointsSPTexture];
        quadPointsSP.position = CGPointMake(-self.frame.size.width/2.4, self.frame.size.height/13.5);
        quadPointsSP.size = CGSizeMake(quadPointsSP.frame.size.width/s, quadPointsSP.frame.size.height / s);
        quadPointsSP.zPosition = 3.4;
        quadPointsSP.name = @"QuadPoints";
        [self.spriteLayer addChild:quadPointsSP];
    }
    
    if (canActivateHS10 == YES) {
        headStart10SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideTR10Button"];
        headStart10SP = [SKSpriteNode spriteNodeWithTexture:headStart10SPTexture];
        headStart10SP.position = CGPointMake(self.frame.size.width/2.4, self.frame.size.height/6.25);
        headStart10SP.size = CGSizeMake(headStart10SP.frame.size.width/s, headStart10SP.frame.size.height / s);
        headStart10SP.zPosition = 3.4;
        headStart10SP.name = @"HeadStart10";
        [self.spriteLayer addChild:headStart10SP];
    }
    
    if (canActivateHS20 == YES) {
        headStart20SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideTR20Button"];
        headStart20SP = [SKSpriteNode spriteNodeWithTexture:headStart20SPTexture];
        headStart20SP.position = CGPointMake(self.frame.size.width/2.4, self.frame.size.height/4);
        headStart20SP.size = CGSizeMake(headStart20SP.frame.size.width/s, headStart20SP.frame.size.height / s);
        headStart20SP.zPosition = 3.4;
        headStart20SP.name = @"HeadStart20";
        [self.spriteLayer addChild:headStart20SP];
    }
    
    if (canActivateHS30 == YES) {
        headStart30SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideTR30Button"];
        headStart30SP = [SKSpriteNode spriteNodeWithTexture:headStart30SPTexture];
        headStart30SP.position = CGPointMake(self.frame.size.width/2.4, self.frame.size.height/2.95);
        headStart30SP.size = CGSizeMake(headStart30SP.frame.size.width/s, headStart30SP.frame.size.height / s);
        headStart30SP.zPosition = 3.4;
        headStart30SP.name = @"HeadStart30";
        [self.spriteLayer addChild:headStart30SP];
    }
    if (canActivateEL1 == YES) {
        extraLife1SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideEL1Button"];
        extraLife1SP = [SKSpriteNode spriteNodeWithTexture:extraLife1SPTexture];
        extraLife1SP.position = CGPointMake(self.frame.size.width/2.4, -self.frame.size.height/10);
        extraLife1SP.size = CGSizeMake(extraLife1SP.frame.size.width/s, extraLife1SP.frame.size.height / s);
        extraLife1SP.zPosition = 3.4;
        extraLife1SP.name = @"ExtraLives1";
        [self.spriteLayer addChild:extraLife1SP];
    }
    if (canActivateEL2 == YES) {
        extraLife2SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideEL2Button"];
        extraLife2SP = [SKSpriteNode spriteNodeWithTexture:extraLife2SPTexture];
        extraLife2SP.position = CGPointMake(self.frame.size.width/2.4, -self.frame.size.height/70);
        extraLife2SP.size = CGSizeMake(extraLife2SP.frame.size.width/s, extraLife2SP.frame.size.height / s);
        extraLife2SP.zPosition = 3.4;
        extraLife2SP.name = @"ExtraLives2";
        [self.spriteLayer addChild:extraLife2SP];
    }
    if (canActivateEL3 == YES) {
        extraLife3SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideEL3Button"];
        extraLife3SP = [SKSpriteNode spriteNodeWithTexture:extraLife3SPTexture];
        extraLife3SP.position = CGPointMake(self.frame.size.width/2.4, self.frame.size.height/13.5);
        extraLife3SP.size = CGSizeMake(extraLife3SP.frame.size.width/s, extraLife3SP.frame.size.height / s);
        extraLife3SP.zPosition = 3.4;
        extraLife3SP.name = @"ExtraLives3";
        [self.spriteLayer addChild:extraLife3SP];
    }
    if (canActivateHG10 == YES) {
        hourGlass10SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideSR10Button"];
        hourGlass10SP = [SKSpriteNode spriteNodeWithTexture:hourGlass10SPTexture];
        hourGlass10SP.position = CGPointMake(-self.frame.size.width/2.4, self.frame.size.height/6.25);
        hourGlass10SP.size = CGSizeMake(hourGlass10SP.frame.size.width/s, hourGlass10SP.frame.size.height / s);
        hourGlass10SP.zPosition = 3.4;
        hourGlass10SP.name = @"HourGlass10";
        [self.spriteLayer addChild:hourGlass10SP];
    }
    if (canActivateHG20 == YES) {
        hourGlass20SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideSR20Button"];
        hourGlass20SP = [SKSpriteNode spriteNodeWithTexture:hourGlass20SPTexture];
        hourGlass20SP.position = CGPointMake(-self.frame.size.width/2.4, self.frame.size.height/4);
        hourGlass20SP.size = CGSizeMake(hourGlass20SP.frame.size.width/s, hourGlass20SP.frame.size.height / s);
        hourGlass20SP.zPosition = 3.4;
        hourGlass20SP.name = @"HourGlass20";
        [self.spriteLayer addChild:hourGlass20SP];
    }
    if (canActivateHG30 == YES) {
        hourGlass30SPTexture = [buttonSprites textureNamed:@"FFGameSceneSideSR30Button"];
        hourGlass30SP = [SKSpriteNode spriteNodeWithTexture:hourGlass30SPTexture];
        hourGlass30SP.position = CGPointMake(-self.frame.size.width/2.4, self.frame.size.height/2.95);
        hourGlass30SP.size = CGSizeMake(hourGlass30SP.frame.size.width/s, hourGlass30SP.frame.size.height / s);
        hourGlass30SP.zPosition = 3.4;
        hourGlass30SP.name = @"HourGlass30";
        [self.spriteLayer addChild:hourGlass30SP];
    }
} //--Done--//
-(void)countdownGo {
    // ------------------------------------------------------------ Default ------------------------------------------------------------ \\
    
    NMPointsLabel *countDownLabel = (NMPointsLabel *)[self childNodeWithName:@"countDownLabel"];
    NMPointsLabel *foodCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"foodCollectedLabel"];
    NMPointsLabel *fruitsCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"fruitsCollectedLabel"];
    NMPointsLabel *vegetablesCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"vegetablesCollectedLabel"];
    NMPointsLabel *othersCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"othersCollectedLabel"];
    NMPointsLabel *foodsCountDownLabel = (NMPointsLabel *)[self childNodeWithName:@"foodsCountDownLabel"];
    
    [tutorial removeFromParent];
    [[self.spriteLayer childNodeWithName:@"tutorial"] removeFromParent];
    [self reggyLogic];
    
    gameOver = NO;
    
    SKAction *gravityInc = [SKAction performSelector:@selector(gravityMove) onTarget:self];
    SKAction *gravityRand = [SKAction performSelector:@selector(gravityRandomizer) onTarget:self];
    SKAction *gravitySTB = [SKAction performSelector:@selector(gravityStabalizer) onTarget:self];
    
    SKAction *gravityWait = [SKAction waitForDuration:5];
    SKAction *gravityWait1 = [SKAction waitForDuration:2.5];
    SKAction *gravityWait2 = [SKAction waitForDuration:1];
    SKAction *gravityWait3 = [SKAction waitForDuration:0.5];
    SKAction *gravityWait4 = [SKAction waitForDuration:10];
    
    SKAction *sideChangeWait = [SKAction waitForDuration:30];
    SKAction *sideChangeWait1 = [SKAction waitForDuration:15];
    SKAction *sideChangeWait2 = [SKAction waitForDuration:20];
    SKAction *sideChangeWait3 = [SKAction waitForDuration:5];
    SKAction *sideChangeWait4 = [SKAction waitForDuration:60];
    
    SKAction *gSeq = [SKAction repeatAction:[SKAction sequence:@[gravityInc,gravityWait]] count:10]; // 5 sec
    SKAction *gSeq1 = [SKAction repeatActionForever:[SKAction sequence:@[gravityInc,gravityWait]]];  // 5 sec
    SKAction *gSeq2 = [SKAction repeatAction:[SKAction sequence:@[gravityInc,gravityWait2]] count:10]; // 1 sec
    SKAction *gSeq3 = [SKAction repeatAction:[SKAction sequence:@[gravityInc,gravityWait3]] count:10]; // 0.5 sec
    SKAction *gSeq4 = [SKAction repeatAction:[SKAction sequence:@[gravityInc,gravityWait1]] count:10]; // 2.5 sec
    SKAction *gSeq5 = [SKAction repeatAction:[SKAction sequence:@[gravityInc,gravityWait4]] count:10]; // 10 sec
    
    SKAction *gRan = [SKAction repeatAction:[SKAction sequence:@[gravityWait,gravityRand]] count:10]; // 5 sec
    SKAction *gRan1 = [SKAction repeatAction:[SKAction sequence:@[gravityWait1,gravityRand]] count:10]; // 2.5 sec
    SKAction *gRan2 = [SKAction repeatAction:[SKAction sequence:@[gravityWait2,gravityRand]] count:10]; // 1 sec
    SKAction *gRan3 = [SKAction repeatAction:[SKAction sequence:@[gravityWait3,gravityRand]] count:10]; // 0.5 sec
    SKAction *gRan4 = [SKAction repeatAction:[SKAction sequence:@[gravityWait4,gravityRand]] count:5]; // 10 sec
    
    SKAction *gStb = [SKAction repeatAction:[SKAction sequence:@[gravityWait1,gravitySTB]] count:10]; // 1 sec
    // ------------------------------------------------------------ Rank 1 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 0) {
        
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self.spriteLayer runAction:shuffleSequence];
        
    }
    // ------------------------------------------------------------ Rank 1 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 1) {
        
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            countDownLabel.hidden = NO;
            [countDownLabel setTimer:60];
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *wait2 = [SKAction waitForDuration:0.5];
        SKAction *anim = [SKAction animateWithTextures:TimerMachine_Anim_Start timePerFrame:1];
        SKAction *forever = [SKAction repeatActionForever:anim];
        SKAction *theSeq = [SKAction sequence:@[wait2, forever]];
        [timerMachine runAction:theSeq];
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq2,gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
        
    }
    // ------------------------------------------------------------ Rank 1 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 2) {
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq2,gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 2 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 3) {
        
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 2 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 4) {
        
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [countDownLabel setPoints:90];
            [countDownLabel setTimer:90];
            countDownLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];

        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *wait2 = [SKAction waitForDuration:0.5];
        SKAction *anim = [SKAction animateWithTextures:TimerMachine_Anim_Start timePerFrame:1];
        SKAction *forever = [SKAction repeatActionForever:anim];
        SKAction *theSeq = [SKAction sequence:@[wait2, forever]];
        [timerMachine runAction:theSeq];
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq2,gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 2 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 5) {
        
        // fix Speed...
        
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [countDownLabel setTimer:120];
            countDownLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *wait2 = [SKAction waitForDuration:0.5];
        SKAction *anim = [SKAction animateWithTextures:TimerMachine_Anim_Start timePerFrame:1];
        SKAction *forever = [SKAction repeatActionForever:anim];
        SKAction *theSeq = [SKAction sequence:@[wait2, forever]];
        [timerMachine runAction:theSeq];
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq4,gSeq4,gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 3 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 6) {
        
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFOODAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        foodCollectedLabel.hidden = NO;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[[SKAction repeatActionForever:[SKAction sequence:@[gravityInc,gravityWait]]]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 3 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 7) {
        
        // fix difficulty... Make 10,15,20 F & V to win
        
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFVAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
        }
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        fruitsCollectedLabel.hidden = NO;
        vegetablesCollectedLabel.hidden = NO;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq,gSeq5]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 3 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 8) {
        
        if (resumeFromLoss == NO) {
            
            // fix difficulty... Make 40,45,50 F & V to win
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:60];
            foodsCountDownLabel.hidden = NO;
            foodCollectedLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFOODAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq4,gSeq4,gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
        
    }
    // ------------------------------------------------------------ Rank 4 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 9) {
        
        if (resumeFromLoss == NO) {
            
            // remove others... F & V to win
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFVAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        fruitsCollectedLabel.hidden = NO;
        vegetablesCollectedLabel.hidden = NO;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[[SKAction repeatActionForever:[SKAction sequence:@[gravityInc,gravityWait]]]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 4 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 10) {
        
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameScenePumpKinAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
             
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        othersCollectedLabel.hidden = NO;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 4 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 11) {
        
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:180];
            
            foodsCountDownLabel.hidden = NO;
            othersCollectedLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneEggPlantAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
            
        };
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq4,gSeq4,gSeq5]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 5 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 12) {
        
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [countDownLabel setTimer:180];
            countDownLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *wait2 = [SKAction waitForDuration:0.5];
        SKAction *anim = [SKAction animateWithTextures:TimerMachine_Anim_Start timePerFrame:1];
        SKAction *forever = [SKAction repeatActionForever:anim];
        SKAction *theSeq = [SKAction sequence:@[wait2, forever]];
        [timerMachine runAction:theSeq];
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq4,gSeq4,gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 5 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 13) {
        
        if (resumeFromLoss == NO) {
            
            // fix difficulty... Make 450,500,550
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [countDownLabel setTimer:120];
            countDownLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
        }
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *wait2 = [SKAction waitForDuration:0.5];
        SKAction *anim = [SKAction animateWithTextures:TimerMachine_Anim_Start timePerFrame:1];
        SKAction *forever = [SKAction repeatActionForever:anim];
        SKAction *theSeq = [SKAction sequence:@[wait2, forever]];
        [timerMachine runAction:theSeq];
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq4,gSeq4,gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 5 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 14) {
        
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [countDownLabel setTimer:60];
            countDownLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *wait2 = [SKAction waitForDuration:0.5];
        SKAction *anim = [SKAction animateWithTextures:TimerMachine_Anim_Start timePerFrame:1];
        SKAction *forever = [SKAction repeatActionForever:anim];
        SKAction *theSeq = [SKAction sequence:@[wait2, forever]];
        [timerMachine runAction:theSeq];
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq2,gSeq1,gSeq]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 6 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 15) {
        
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:60];
            foodCollectedLabel.hidden = NO;
            foodsCountDownLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFOODAmountMachine"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
            /*SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *flipSequnce = [SKAction sequence:@[sideChangeWait, [SKAction runBlock:^{[timer2 invalidate];}], sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }]]];
            [self.sequenceLayer runAction:flipSequnce];*/
            
        }
        
        
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[[SKAction repeatActionForever:[SKAction sequence:@[gravityInc,gravityWait]]]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 6 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 16) {
        
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:120];
            foodsCountDownLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFVAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
            SKAction *sideChangeWaitx = [SKAction waitForDuration:20];
            SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *flipSequnce = [SKAction sequence:@[sideChangeWaitx,[SKAction runBlock:^{[timer2 invalidate];}],sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }]]];
            [self.sequenceLayer runAction:flipSequnce];
            
        }
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        fruitsCollectedLabel.hidden = NO;
        vegetablesCollectedLabel.hidden = NO;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq4,gSeq4,gSeq]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 6 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 17) {
        
        if (resumeFromLoss == NO) {
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:240];
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneSowersopAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
            SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *reSideFlip = [SKAction performSelector:@selector(sideFlipAction2) onTarget:self];
            SKAction *flipSequnce = [SKAction sequence:@[sideChangeWait,[SKAction runBlock:^{[timer2 invalidate];}],sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait,[SKAction runBlock:^{[timer2 invalidate];}], reSideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }]]];
            [self.sequenceLayer runAction:flipSequnce];
            
        }
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        fruitsCollectedLabel.hidden = NO;
        vegetablesCollectedLabel.hidden = NO;
        foodsCountDownLabel.hidden = NO;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gSeq4,gSeq5,gSeq4,gSeq1]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 7 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 18) {
        if (resumeFromLoss == NO) {
            
            // fix difficulty... Survive 1, 2, 3 minutes to win
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [countDownLabel setTimer:180];
            countDownLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *wait2 = [SKAction waitForDuration:0.5];
        SKAction *anim = [SKAction animateWithTextures:TimerMachine_Anim_Start timePerFrame:1];
        SKAction *forever = [SKAction repeatActionForever:anim];
        SKAction *theSeq = [SKAction sequence:@[wait2, forever]];
        [timerMachine runAction:theSeq];
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction repeatActionForever:[SKAction sequence:@[gRan,gRan3,gStb,gSeq]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 7 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 19) {
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
        }
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gRan1,gRan1,gStb,gSeq2,gSeq]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 7 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 20) {
        if (resumeFromLoss == NO) {
            
            // fix difficulty... Make 50,55,60 Foods to win
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:60];
            foodsCountDownLabel.hidden = NO;
            foodCollectedLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFOODAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
        }
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[gRan1,gRan2,gRan3,gStb,gSeq2,gSeq3]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 8 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 21) {
        
        if (resumeFromLoss == NO) {
            
            // fix difficulty... Survive 1, 2, 3 minutes to win
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            countDownLabel.hidden = NO;
            [countDownLabel setTimer:240];
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
            SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *reSideFlip = [SKAction performSelector:@selector(sideFlipAction2) onTarget:self];
            SKAction *flipSequnce = [SKAction repeatActionForever:[SKAction sequence:@[sideChangeWait1,[SKAction runBlock:^{[timer invalidate];}],sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time];
            }], sideChangeWait3,[SKAction runBlock:^{[timer invalidate];}], reSideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time];
            }], sideChangeWait,[SKAction runBlock:^{[timer invalidate];}], sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time];
            }],[SKAction waitForDuration:30]]]];
            [self.sequenceLayer runAction:flipSequnce];
            
        }
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction repeatActionForever:[SKAction sequence:@[gRan,gRan2,gSeq4,gSeq3,gStb]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 8 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 22) {
        if (resumeFromLoss == NO) {
            
            // fix difficulty... Make 20,25,30 F & V to win
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:120];
            
            foodsCountDownLabel.hidden = NO;
            fruitsCollectedLabel.hidden = NO;
            vegetablesCollectedLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFVAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
            SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *reSideFlip = [SKAction performSelector:@selector(sideFlipAction2) onTarget:self];
            SKAction *flipSequnce = [SKAction repeatActionForever:[SKAction sequence:@[sideChangeWait2,[SKAction runBlock:^{[timer2 invalidate];}],sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait,[SKAction runBlock:^{[timer2 invalidate];}], reSideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait4,[SKAction runBlock:^{[timer2 invalidate];}], sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }],[SKAction waitForDuration:5]]]];
            [self.sequenceLayer runAction:flipSequnce];
            
        }
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction sequence:@[[SKAction repeatActionForever:[SKAction sequence:@[gRan4,gSeq3,gSeq3]]]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 8 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 23) {
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            fruitsCollectedLabel.hidden = NO;
            vegetablesCollectedLabel.hidden = NO;
            othersCollectedLabel.hidden = NO;
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneHornedCucumberAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
            SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *reSideFlip = [SKAction performSelector:@selector(sideFlipAction2) onTarget:self];
            SKAction *flipSequnce = [SKAction repeatActionForever:[SKAction sequence:@[sideChangeWait2,sideFlip,[SKAction waitForDuration:4],sideChangeWait,reSideFlip,[SKAction waitForDuration:4],sideChangeWait4,sideFlip,[SKAction waitForDuration:4]]]];
            [self.sequenceLayer runAction:flipSequnce];
            
        }
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction repeatActionForever:[SKAction sequence:@[gStb,gRan,gRan1,gSeq2,gSeq3,gRan4]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 9 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 24) {
        
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            countDownLabel.hidden = NO;
            [countDownLabel setTimer:120];
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [countDownLabel runAction:sequence];
            
            timerMachineTexture = [gameSceneSpritesOne textureNamed:@"FFGameSceneTimerMachine1"];
            
            timerMachine = [SKSpriteNode spriteNodeWithTexture:timerMachineTexture];
            timerMachine.position = CGPointZero;
            timerMachine.size = CGSizeMake(timerMachine.frame.size.width/s, timerMachine.frame.size.height / s);
            timerMachine.zPosition = 102.4;
            [self.spriteLayer addChild:timerMachine];
            
            SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *reSideFlip = [SKAction performSelector:@selector(sideFlipAction2) onTarget:self];
            SKAction *flipSequnce = [SKAction repeatActionForever:[SKAction sequence:@[sideChangeWait2,[SKAction runBlock:^{[timer2 invalidate];}],sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait,[SKAction runBlock:^{[timer2 invalidate];}], reSideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait4,[SKAction runBlock:^{[timer2 invalidate];}], sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }],[SKAction waitForDuration:5]]]];
            [self.sequenceLayer runAction:flipSequnce];
            
        }
        
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction repeatActionForever:[SKAction sequence:@[gStb,gRan,gRan1,gSeq2,gSeq3,gRan4]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 9 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 25) {
        
        if (resumeFromLoss == NO) {
            
            // fix difficulty... Make 30,35,40 F & V 1000 pts to win in 2:30
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:150];
            
            foodsCountDownLabel.hidden = NO;
            fruitsCollectedLabel.hidden = NO;
            vegetablesCollectedLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneFVAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
            SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *reSideFlip = [SKAction performSelector:@selector(sideFlipAction2) onTarget:self];
            SKAction *flipSequnce = [SKAction repeatActionForever:[SKAction sequence:@[sideChangeWait2,[SKAction runBlock:^{[timer2 invalidate];}],sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait,[SKAction runBlock:^{[timer2 invalidate];}], reSideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait4,[SKAction runBlock:^{[timer2 invalidate];}], sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }],[SKAction waitForDuration:5]]]];
            [self.sequenceLayer runAction:flipSequnce];
            
        }
        
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction repeatActionForever:[SKAction sequence:@[gStb,gRan,gRan1,gSeq2,gSeq3,gRan4]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 9 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 26) {
        
        if (resumeFromLoss == NO) {
            
            self.physicsWorld.gravity = CGVectorMake(0, -1);
            
            [foodsCountDownLabel setTimer:180];
            
            foodsCountDownLabel.hidden = NO;
            fruitsCollectedLabel.hidden = NO;
            vegetablesCollectedLabel.hidden = NO;
            othersCollectedLabel.hidden = NO;
            
            SKAction *wait = [SKAction waitForDuration:0.5];
            SKAction *time = [SKAction performSelector:@selector(time2) onTarget:self];
            SKAction *sequence = [SKAction sequence:@[wait,time]];
            [foodsCountDownLabel runAction:sequence];
            
            amountMachineTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneDragonFruitAmountMachine"];
            
            amountMachine = [SKSpriteNode spriteNodeWithTexture:amountMachineTexture];
            amountMachine.position = CGPointZero;
            amountMachine.size = CGSizeMake(amountMachine.frame.size.width/s, amountMachine.frame.size.height / s);
            amountMachine.zPosition = 102.4;
            [self.spriteLayer addChild:amountMachine];
            
            SKAction *sideFlip = [SKAction performSelector:@selector(sideFlipAction) onTarget:self];
            SKAction *reSideFlip = [SKAction performSelector:@selector(sideFlipAction2) onTarget:self];
            SKAction *flipSequnce = [SKAction repeatActionForever:[SKAction sequence:@[sideChangeWait2,[SKAction runBlock:^{[timer2 invalidate];}],sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait,[SKAction runBlock:^{[timer2 invalidate];}], reSideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }], sideChangeWait4,[SKAction runBlock:^{[timer2 invalidate];}], sideFlip,[SKAction waitForDuration:4],[SKAction runBlock:^{
                invalidateTimer = NO;
                [self time2];
            }],[SKAction waitForDuration:5]]]];
            [self.sequenceLayer runAction:flipSequnce];
            
        }
        
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
        SKAction *shuffleWait = [SKAction waitForDuration:0.5];
        SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
        SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
        [self runAction:shuffleSequence];
        
        SKAction *gravitySequence = [SKAction repeatActionForever:[SKAction sequence:@[gStb,gRan,gRan1,gSeq2,gSeq3,gRan4]]];
        [self.spriteLayer runAction:gravitySequence withKey:@"G1"];
    }
    // ------------------------------------------------------------ Rank 10 obj: 1 ----------------------------------------------------------- \\
    
    if (rankNumber == 27) {
        
        self.physicsWorld.gravity = CGVectorMake(0, -1);
        
        self.physicsWorld.speed = 1;
        v = self.physicsWorld.gravity;
        
     SKAction *shuffleWait = [SKAction waitForDuration:3.5];
     SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
     SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
     [self runAction:shuffleSequence];
     
     SKAction *gravitySequence = [SKAction sequence:@[[SKAction repeatActionForever:[SKAction sequence:@[gravityInc,gravityWait]]]]];
     [self.spriteLayer runAction:gravitySequence];
        
     }
     // ------------------------------------------------------------ Rank 10 obj: 2 ----------------------------------------------------------- \\
     
     if (rankNumber == 28) {
         
         self.physicsWorld.gravity = CGVectorMake(0, -1);
         
         self.physicsWorld.speed = 1;
         v = self.physicsWorld.gravity;
         
         SKAction *shuffleWait = [SKAction waitForDuration:3.5];
         SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
         SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
         [self runAction:shuffleSequence];
         
         SKAction *gravitySequence = [SKAction sequence:@[[SKAction repeatActionForever:[SKAction sequence:@[gravityInc,gravityWait]]]]];
         [self.spriteLayer  runAction:gravitySequence];
         
     }
     // ------------------------------------------------------------ Rank 10 obj: 3 ----------------------------------------------------------- \\
     
     if (rankNumber == 29) {
        
         self.physicsWorld.gravity = CGVectorMake(0, -1);
         
         self.physicsWorld.speed = 1;
         v = self.physicsWorld.gravity;
         
         SKAction *shuffleWait = [SKAction waitForDuration:3.5];
         SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
         SKAction *shuffleSequence = [SKAction sequence:@[shuffleWait,shuffle]];
         [self runAction:shuffleSequence];
         
         SKAction *gravitySequence = [SKAction sequence:@[[SKAction repeatActionForever:[SKAction sequence:@[gravityInc,gravityWait4]]]]];
         [self.spriteLayer runAction:gravitySequence];
         
     }
    
} //--Complet Values including speed and animations(side swap). Once countdown # is zero victory--//
-(void)sideFlipAction {
    
    tutorialTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneTutorial1"];
    
    tutorial = [SKSpriteNode spriteNodeWithTexture:tutorialTexture];
    tutorial.position = CGPointZero;
    tutorial.size = CGSizeMake(tutorial.frame.size.width/s, tutorial.frame.size.height / s);
    tutorial.zPosition = 4.5;
    [self.spriteLayer addChild:tutorial];
    
    SKAction *hideTutorial = [SKAction fadeAlphaTo:0.0 duration:1];
    SKAction *showTutorial = [SKAction fadeAlphaTo:1.0 duration:1];
    SKAction *remove = [SKAction removeFromParent];
    SKAction *tutorialSequence = [SKAction sequence:@[showTutorial, hideTutorial, showTutorial, hideTutorial, remove]];
    [tutorial runAction:tutorialSequence];
    
    SKAction *removefood = [SKAction performSelector:@selector(removeFood) onTarget:self];
    SKAction *tait = [SKAction waitForDuration:0.1];
    SKAction *seq = [SKAction sequence:@[removefood,tait]];
    SKAction *repeatact = [SKAction repeatAction:seq count:5];
    [self runAction:repeatact];
    
    SKAction *wait = [SKAction waitForDuration:5];
    SKAction *sideFlip = [SKAction performSelector:@selector(flipSides) onTarget:self];
    SKAction *leftSensorFlip = [SKAction performSelector:@selector(leftSensorLayerSprite) onTarget:self];
    SKAction *rightSensorFlip = [SKAction performSelector:@selector(rightSensorLayerSprite) onTarget:self];
    SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
    SKAction *groupFlips = [SKAction group:@[leftSensorFlip, rightSensorFlip]];
    SKAction *flipSequnces = [SKAction sequence:@[wait, sideFlip, groupFlips, shuffle]];
    [self runAction:flipSequnces];
    
    
    
}
-(void)sideFlipAction2 {
    
    tutorialTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneTutorial"];
    
    tutorial = [SKSpriteNode spriteNodeWithTexture:tutorialTexture];
    tutorial.position = CGPointZero;
    tutorial.size = CGSizeMake(tutorial.frame.size.width/s, tutorial.frame.size.height / s);
    tutorial.zPosition = 4.5;
    [self.spriteLayer addChild:tutorial];
    
    SKAction *hideTutorial = [SKAction fadeAlphaTo:0.0 duration:1];
    SKAction *showTutorial = [SKAction fadeAlphaTo:1.0 duration:1];
    SKAction *remove = [SKAction removeFromParent];
    SKAction *tutorialSequence = [SKAction sequence:@[showTutorial, hideTutorial, showTutorial, hideTutorial, remove]];
    [tutorial runAction:tutorialSequence];
    
    SKAction *removefood = [SKAction performSelector:@selector(removeFood) onTarget:self];
    SKAction *tait = [SKAction waitForDuration:0.1];
    SKAction *seq = [SKAction sequence:@[removefood,tait]];
    SKAction *repeatact = [SKAction repeatAction:seq count:5];
    [self runAction:repeatact];
    
    SKAction *wait = [SKAction waitForDuration:5];
    SKAction *sideFlip = [SKAction performSelector:@selector(reFlipSides) onTarget:self];
    SKAction *leftSensorFlip = [SKAction performSelector:@selector(leftSensorLayerSprite) onTarget:self];
    SKAction *rightSensorFlip = [SKAction performSelector:@selector(rightSensorLayerSprite) onTarget:self];
    SKAction *shuffle = [SKAction performSelector:@selector(shuffle) onTarget:self];
    SKAction *groupFlips = [SKAction group:@[leftSensorFlip, rightSensorFlip]];
    SKAction *flipSequnces = [SKAction sequence:@[wait, sideFlip, groupFlips, shuffle]];
    [self runAction:flipSequnces];
    
    
    
}
-(void)foodLabelPointsCheck {
    
    NMPointsLabel *foodCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"foodCollectedLabel"];
    NMPointsLabel *fruitsCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"fruitsCollectedLabel"];
    NMPointsLabel *vegetablesCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"vegetablesCollectedLabel"];
    NMPointsLabel *othersCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"othersCollectedLabel"];
    
    if ((rankNumber == 6) & (self.isAVeggy == YES || self.isAFruit == YES || self.isAOther == YES)) {
        
        [foodCollectedLabel incrementBy1];
    }
    if (rankNumber == 7) {
        if(self.isAFruit == YES){
            [fruitsCollectedLabel incrementBy1];
        }
        if (self.isAVeggy == YES) {
            [vegetablesCollectedLabel incrementBy1];
        }
    }
    if ((rankNumber == 8) & (self.isAVeggy == YES || self.isAFruit == YES || self.isAOther == YES)) {
        
        [foodCollectedLabel incrementBy1];
    }
    if (rankNumber == 9) {
        if(self.isAFruit == YES){
            [fruitsCollectedLabel incrementBy1];
        }
        if (self.isAVeggy == YES) {
            [vegetablesCollectedLabel incrementBy1];
        }
        if (self.isAOther == YES) {
            [othersCollectedLabel incrementBy1];
        }
    }
    if ((rankNumber == 10) & (self.isAPumpkin == YES)) {
        
        [othersCollectedLabel incrementBy1];
    }
    if ((rankNumber == 11) & (self.isAEggPlant == YES)) {
        
        [othersCollectedLabel incrementBy1];
    }
    if ((rankNumber == 15) & (self.isAVeggy == YES || self.isAFruit == YES || self.isAOther == YES)) {
        
        [foodCollectedLabel incrementBy1];
    }
    if (rankNumber == 16) {
        if(self.isAFruit == YES){
            [fruitsCollectedLabel incrementBy1];
        }
        if (self.isAVeggy == YES) {
            [vegetablesCollectedLabel incrementBy1];
        }
    }
    if (rankNumber == 17) {
        if(self.isASourSop == YES){
            [fruitsCollectedLabel incrementBy1];
        }
        if (self.isADiakon == YES) {
            [vegetablesCollectedLabel incrementBy1];
        }
    }
    if ((rankNumber == 20) & (self.isAVeggy == YES || self.isAFruit == YES || self.isAOther == YES)) {
        
        [foodCollectedLabel incrementBy1];
    }
    if (rankNumber == 22) {
        if(self.isAFruit == YES){
            [fruitsCollectedLabel incrementBy1];
        }
        if (self.isAVeggy == YES) {
            [vegetablesCollectedLabel incrementBy1];
        }
        if (self.isAOther == YES) {
            [othersCollectedLabel incrementBy1];
        }
    }
    if (rankNumber == 23) {
        if(self.isAMangoSteen == YES){
            [fruitsCollectedLabel incrementBy1];
        }
        if (self.isAOca == YES) {
            [vegetablesCollectedLabel incrementBy1];
        }
        if (self.isAHornedCucumber == YES) {
            [othersCollectedLabel incrementBy1];
        }
    }
    if (rankNumber == 25) {
        if(self.isAFruit == YES){
            [fruitsCollectedLabel incrementBy1];
        }
        if (self.isAVeggy == YES) {
            [vegetablesCollectedLabel incrementBy1];
        }
        if (self.isAOther == YES) {
            [othersCollectedLabel incrementBy1];
        }
    }
    if (rankNumber == 26) {
        if(self.isASunchok == YES){
            [fruitsCollectedLabel incrementBy1];
        }
        if (self.isASalsify == YES) {
            [vegetablesCollectedLabel incrementBy1];
        }
        if (self.isADragonFruit == YES) {
            [othersCollectedLabel incrementBy1];
        }
    }
}
-(void)didBeginContact:(SKPhysicsContact *)contact{
    
    
    
    SKPhysicsBody *firstBody;
    SKPhysicsBody *secondBody;
    
    if (contact.bodyA.categoryBitMask < contact.bodyB.categoryBitMask) {
        firstBody = contact.bodyA;
        secondBody = contact.bodyB;
    } else {
        firstBody = contact.bodyB;
        secondBody = contact.bodyA;
    }
    
    //------------------------------------------------------------------------1----------------------------------------------------------------------//
    
    if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAFruit == YES) {
        
        [self handlePoints];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAFruit == YES && self.activateEL1 == NO && self.activateEL2 == NO && self.activateEL3 == NO) {
        
        [self removeFood];
        [self gameOver];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAFruit == YES && self.activateEL1 == YES) {
        [self removeFood];
        [self heartIconLossAnimation];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        [self performSelector:@selector(deActivatedEL1) withObject:nil afterDelay:0.1];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAFruit == YES && self.activateEL2 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL2Amount -= 1;
        [self heartIconLossAnimation];
        if (EL2Amount == 0) {
            [self deActivatedEL2];
        }
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAFruit == YES && self.activateEL3 == YES) {
        //NSLog(@"Wrong");
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        EL3Amount -= 1;
        [self heartIconLossAnimation];
        if (EL3Amount == 0) {
            [self deActivatedEL3];
        }
    }  else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAOther == YES && self.activateEL1 == NO && self.activateEL2 == NO && self.activateEL3 == NO) {
        
        [self removeFood];
        [self gameOver];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAOther == YES && self.activateEL1 == YES) {
        
        [self removeFood];
        [self heartIconLossAnimation];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        [self performSelector:@selector(deActivatedEL1) withObject:nil afterDelay:0.1];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAOther == YES && self.activateEL2 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL2Amount -= 1;
        [self heartIconLossAnimation];
        if (EL2Amount == 0) {
            [self deActivatedEL2];
        }
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAOther == YES && self.activateEL3 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL3Amount -= 1;
        [self heartIconLossAnimation];
        if (EL3Amount == 0) {
            [self deActivatedEL3];
        }
    }
    if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == rightSensorCategory && self.isAVeggy == YES) {
        
        [self handlePoints];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAVeggy == YES && self.activateEL1 == NO && self.activateEL2 == NO && self.activateEL3 == NO) {
        
        [self removeFood];
        [self gameOver];
        
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAVeggy == YES && self.activateEL1 == YES) {
        
        [self removeFood];
        [self heartIconLossAnimation];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        [self performSelector:@selector(deActivatedEL1) withObject:nil afterDelay:0.1];
        
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAVeggy == YES && self.activateEL2 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL2Amount -= 1;
        [self heartIconLossAnimation];
        if (EL2Amount == 0) {
            [self deActivatedEL2];
        }
        
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAVeggy == YES && self.activateEL3 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL3Amount -= 1;
        [self heartIconLossAnimation];
        if (EL3Amount == 0) {
            [self deActivatedEL3];
        }
        
    }  else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAOther == YES && self.activateEL1 == NO && self.activateEL2 == NO && self.activateEL3 == NO) {
        
        [self removeFood];
        [self gameOver];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAOther == YES && self.activateEL1 == YES) {
        
        [self removeFood];
        [self heartIconLossAnimation];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        [self performSelector:@selector(deActivatedEL1) withObject:nil afterDelay:0.1];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAOther == YES && self.activateEL2 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL2Amount -= 1;
        [self heartIconLossAnimation];
        if (EL2Amount == 0) {
            [self deActivatedEL2];
        }
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == leftSensorCategory && self.isAOther == YES && self.activateEL3 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL3Amount -= 1;
        [self heartIconLossAnimation];
        if (EL3Amount == 0) {
            [self deActivatedEL3];
        }
    }
    if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAFruit == YES && self.activateEL1 == NO && self.activateEL2 == NO && self.activateEL3 == NO) {
        
        [self removeFood];
        [self gameOver];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAFruit == YES && self.activateEL1 == YES) {
        
        [self removeFood];
        [self heartIconLossAnimation];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        [self performSelector:@selector(deActivatedEL1) withObject:nil afterDelay:0.1];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAFruit == YES && self.activateEL2 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL2Amount -= 1;
        [self heartIconLossAnimation];
        if (EL2Amount == 0) {
            [self deActivatedEL2];
        }
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAFruit == YES && self.activateEL3 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL3Amount -= 1;
        [self heartIconLossAnimation];
        if (EL3Amount == 0) {
            [self deActivatedEL3];
        }
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAVeggy == YES && self.activateEL1 == NO && self.activateEL2 == NO && self.activateEL3 == NO) {
        
        [self removeFood];
        [self gameOver];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAVeggy == YES && self.activateEL1 == YES) {
        
        [self removeFood];
        [self heartIconLossAnimation];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        [self performSelector:@selector(deActivatedEL1) withObject:nil afterDelay:0.1];
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAVeggy == YES && self.activateEL2 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL2Amount -= 1;
        [self heartIconLossAnimation];
        if (EL2Amount == 0) {
            [self deActivatedEL2];
        }
    } else if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAVeggy == YES && self.activateEL3 == YES) {
        
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        EL3Amount -= 1;
        [self heartIconLossAnimation];
        if (EL3Amount == 0) {
            [self deActivatedEL3];
        }
    }
    if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8) && secondBody.categoryBitMask == bottomSensorCategory && self.isAOther == YES) {
        
        [self handlePoints];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
    }
    if (canBlock == YES) {
        if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8 || firstBody.categoryBitMask == foodCategory9 || firstBody.categoryBitMask == foodCategory10 || firstBody.categoryBitMask == foodCategory11) && secondBody.categoryBitMask == reggyBotCategory) {
            
            [self removeActionForKey:@"LeftSwipe"];
            [self removeActionForKey:@"RightSwipe"];
            sprite.physicsBody.velocity = CGVectorMake(0, 0);
            self.physicsWorld.speed = 1;
            float fx;
            fx = sprite.position.x;
            
            SKAction *move = [SKAction moveToX:-20*fx duration:0.5];
            [sprite runAction:move];
            
        }
    }
    if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8 || firstBody.categoryBitMask == foodCategory9 || firstBody.categoryBitMask == foodCategory10 || firstBody.categoryBitMask == foodCategory11) && secondBody.categoryBitMask == eatRadiusCategory) {
        canSwipe = NO;
        [self removeActionForKey:@"f1"];
        [self removeActionForKey:@"f2"];
        [self removeActionForKey:@"FlyBot1"];
        [self removeActionForKey:@"FlyBot2"];
        [self removeActionForKey:@"LeftSwipe"];
        [self removeActionForKey:@"RightSwipe"];
        [eatRadius removeFromParent];
        z = (int) energy.count;
        t= 0.18;
        [self reggyEnergyDecrease];
        SKAction *foodEat = [SKAction sequence:@[[SKAction runBlock:^{
            [self removeActionForKey:@"CatchesBreath"];
            SKAction *eatSeq = [SKAction animateWithTextures:E2_Anim_Start timePerFrame:0.083333333];
            SKAction *reggyFoodPowerSeq = [SKAction sequence:@[[SKAction scaleBy:1 duration:0],eatSeq]];
            [ReggyBot runAction:reggyFoodPowerSeq];
            SKAction *desize = [SKAction sequence:@[[SKAction waitForDuration:0.2],[SKAction scaleTo:0.0 duration:0.16],[SKAction removeFromParent]]];
            [sprite runAction:desize completion:^ {
                canSwipe = YES;
                [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
            }];
            
            [healthBar removeFromParent];
            [reggyBarCount removeFromParent];
            NSInteger n;
            
            if (threeXDam == YES) {
                n = 15;
                if ((hpNum + n) > hpCap) {
                    hpNum = hpCap;
                }
                if ((hpNum + n) < hpCap) {
                    hp -= n;
                    hpNum += n;
                }
            }
            if (threeXDam == NO) {
                n = 5;
                if ((hpNum + n) > hpCap) {
                    hpNum = hpCap;
                }
                if ((hpNum + n) < hpCap) {
                    hp -= n;
                    hpNum += n;
                }
            }
            reggyBarCount = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
            reggyBarCount.position = CGPointMake(0, self.frame.size.height/2.6);
            reggyBarCount.name = @"reggyBarCount";
            reggyBarCount.colorBlendFactor = 1;
            reggyBarCount.fontColor = [UIColor whiteColor];
            reggyBarCount.zPosition = 1000;
            reggyBarCount.fontSize = 10;
            reggyBarCount.text = [NSString stringWithFormat:@"%@ %li %@",@"Battle 1    ",(long)hpNum, @"/ 400"];
            [self.spriteLayer addChild:reggyBarCount];
            
            NSString *currentelement = [reggyHP objectAtIndex:hp];
            healthBarTexture = [HealthBarSprites textureNamed:currentelement];
            healthBar = [SKSpriteNode spriteNodeWithTexture:healthBarTexture];
            healthBar.size = CGSizeMake(healthBar.frame.size.width/s, healthBar.frame.size.height / s);
            healthBar.position = CGPointZero;
            healthBar.zPosition = 998;
            [self.spriteLayer addChild:healthBar];
            
        }],[SKAction waitForDuration:4.5],[SKAction runBlock:^{
            
            if (rankNumber == 27) {
                
                [self battleSequence1];
            }
            
            if (rankNumber == 28) {
                
                [self battleSequence2];
                
            }
            
            if (rankNumber == 29) {
                
                [self battleSequence3];
                
            }
            
        }]]];
        [self runAction:foodEat];
    }
    if (foodBlowReggy == YES) {
    if ((firstBody.categoryBitMask == foodCategory || firstBody.categoryBitMask == foodCategory1 || firstBody.categoryBitMask == foodCategory2 || firstBody.categoryBitMask == foodCategory3 || firstBody.categoryBitMask == foodCategory4 || firstBody.categoryBitMask == foodCategory5 || firstBody.categoryBitMask == foodCategory6 || firstBody.categoryBitMask == foodCategory7 || firstBody.categoryBitMask == foodCategory8 || firstBody.categoryBitMask == foodCategory9 || firstBody.categoryBitMask == foodCategory10 || firstBody.categoryBitMask == foodCategory11) && secondBody.categoryBitMask == foodBlowerCategory) {
        
        if (self.isAFruit == YES) {
            
            SKAction *move = [SKAction moveToX:self.frame.size.width * 2 duration:1];
            [sprite runAction:move];
            
        }
        if (self.isAVeggy == YES) {
            
            SKAction *move = [SKAction moveToX:-self.frame.size.width * 2 duration:1];
            [sprite runAction:move];
            
        }
        
    }
    }
    if ((firstBody.categoryBitMask == bottomSensorCategory) && (secondBody.categoryBitMask == fakeFoodCategory)) {
        
            if (fdNum < 5) {
                [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:FoodDropReggy1_Anim_Start timePerFrame:0.08333333],[SKAction animateWithTextures:FoodDropReggy2_Anim_Start timePerFrame:0.0833333]]]];
                [fakeSprite removeFromParent];
                [self performSelector:@selector(foodDropShuffle) withObject:nil afterDelay:0.1];
            }
        
        if (fdNum == 5) {
            SKAction *foodDropReggy = [SKAction sequence:@[[SKAction runBlock:^{
                ReggyBot.zPosition = 3.0;
                [ReggyBot runAction:[SKAction sequence:@[[SKAction moveTo:CGPointMake(-self.frame.size.width * 2, 0) duration:0.3],[SKAction removeFromParent]]]];
                [fakeSprite removeFromParent];
            }]]];
            [self runAction:foodDropReggy];
        }
        
    }
    if ((firstBody.categoryBitMask == foodCategory9) && (secondBody.categoryBitMask == batCategory)) {
        
        if (self.isAFruit == YES) {
            
            SKAction *move = [SKAction moveToX:self.frame.size.width * 2 duration:1];
            [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.1],move]]];
            //[ReggyBot removeActionForKey:@"batSway"];
            SKAction *batSwing = [SKAction animateWithTextures:F3_Anim_Start timePerFrame:0.08333333333];
            [ReggyBot runAction:batSwing];
            
        }
        if (self.isAVeggy == YES) {
            
            SKAction *move = [SKAction moveToX:-self.frame.size.width * 2 duration:1];
            [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.1],move]]];
            //[ReggyBot removeActionForKey:@"batSway"];
            SKAction *batSwing = [SKAction animateWithTextures:F3_Anim_Start timePerFrame:0.08333333333];
            [ReggyBot runAction:batSwing];
            
        }
        if (self.isAOther == YES) {
            
        }
    }
    if ((firstBody.categoryBitMask == foodCategory9) && (secondBody.categoryBitMask == wallCategory)) {
        
        [sprite removeActionForKey:@"LeftSwipe"];
        [sprite removeActionForKey:@"RightSwipe"];
        canSwipe = NO;
        
    }
    
    if ((self.activateHG10 == YES) || (self.activateHG20 == YES) || (self.activateHG30 == YES)) {
        self.physicsWorld.speed = 0.5;
    }
    
    if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == leftSensorCategory && self.isAFruit == YES) {
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Ching" ofType:@"wav"];
        ching = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        ching.delegate = self;
        ching.volume = 1.0;
        [ching play];
        [self regyDamage];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    } else if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == leftSensorCategory && self.isAVeggy == YES) {
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Buzzer" ofType:@"wav"];
        buzzer = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        buzzer.delegate = self;
        buzzer.volume = 1.0;
        [buzzer play];
        
            [self humanDamage];
            [self removeFood];
            [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
            
            
    } else if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == rightSensorCategory && self.isAVeggy == YES) {
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Ching" ofType:@"wav"];
        ching = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        ching.delegate = self;
        ching.volume = 1.0;
        [ching play];
        [self regyDamage];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    } else if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == rightSensorCategory && self.isAFruit == YES) {
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Buzzer" ofType:@"wav"];
        buzzer = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        buzzer.delegate = self;
        buzzer.volume = 1.0;
        [buzzer play];
        
        [self humanDamage];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    } else if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == bottomSensorCategory && self.isAFruit == YES) {
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Buzzer" ofType:@"wav"];
        buzzer = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        buzzer.delegate = self;
        buzzer.volume = 1.0;
        [buzzer play];
        
        [self humanDamage];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    } else if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == bottomSensorCategory && self.isAVeggy == YES) {
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Buzzer" ofType:@"wav"];
        buzzer = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        buzzer.delegate = self;
        buzzer.volume = 1.0;
        [buzzer play];
        
        [self humanDamage];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    } else if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == bottomSensorCategory && self.isAOther == YES) {
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Ching" ofType:@"wav"];
        ching = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        ching.delegate = self;
        ching.volume = 1.0;
        [ching play];
        [self regyDamage];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    } else if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == leftSensorCategory && self.isAOther == YES) {
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Buzzer" ofType:@"wav"];
        buzzer = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        buzzer.delegate = self;
        buzzer.volume = 1.0;
        [buzzer play];
        
        [self humanDamage];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    } else if (firstBody.categoryBitMask == foodCategory9 && secondBody.categoryBitMask == rightSensorCategory && self.isAOther == YES) {
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Buzzer" ofType:@"wav"];
        buzzer = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        buzzer.delegate = self;
        buzzer.volume = 1.0;
        [buzzer play];
        
        [self humanDamage];
        [self removeFood];
        [self performSelector:@selector(shuffle) withObject:nil afterDelay:0.1];
        
        
    }
} //--Add Contact code for the rest of the ranks and make sure that there are no glitches + fix flipsides glitch--//
-(void)activateHelp {
    
    [helpButton removeFromParent];
    
    if (self.rightWay == YES) {
        if (self.isAFruit == YES) {
            helpButtonTexture = [buttonSprites textureNamed:@"FFGameSceneBuyHelpButtonLeft"];
        }
        if (self.isAVeggy == YES) {
            helpButtonTexture = [buttonSprites textureNamed:@"FFGameSceneBuyHelpButtonRight"];
        }
        if (self.isAOther == YES) {
            helpButtonTexture = [buttonSprites textureNamed:@"FFGameSceneBuyHelpButtonDown"];
        }
    }
    if (self.rightWay == NO) {
        if (self.isAFruit == YES) {
            helpButtonTexture = [buttonSprites textureNamed:@"FFGameSceneBuyHelpButtonRight"];
        }
        if (self.isAVeggy == YES) {
            helpButtonTexture = [buttonSprites textureNamed:@"FFGameSceneBuyHelpButtonLeft"];
        }
        if (self.isAOther == YES) {
            helpButtonTexture = [buttonSprites textureNamed:@"FFGameSceneBuyHelpButtonDown"];
        }
    }
    
    helpButton = [SKSpriteNode spriteNodeWithTexture:helpButtonTexture];
    helpButton.position = CGPointMake(self.frame.size.width/2.9, -self.frame.size.height/2.4);
    helpButton.size = CGSizeMake(helpButton.frame.size.width/s, helpButton.frame.size.height / s);
    helpButton.zPosition = 102.6;
    [self.spriteLayer addChild:helpButton];
    
}
-(void)flipSides {
    self.rightWay = NO;
} //--Done--//
-(void)reFlipSides {
    self.rightWay = YES;
} //--Done--//
//---DoublePoints--//BH HHH
-(void)activatedDP {
    
    if (canActivateDP == YES) {
        self.activateDP = YES;
        [self PointsAnimation];
        
        DPAmount = 5;
        NSLog(@"Dp activated");
        
    }
    
    
} //--Done--//
-(void)deActivatedDP {
    self.activateDP = NO;
    
    [doublePointsSymbol removeFromParent];
    
    DPInteger -= 1;
    
    PowerUpAmountsLabel *powerUpsLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"powerUpsLabel"];
    [powerUpsLabel setPoints:powerUpsLabel.number = DPInteger];
    
    ShopLogic *saveDP = [[ShopLogic alloc]init];
    [saveDP saveDPInteger];
    
    if (DPInteger == 0) {
        canActivateDP = NO;
        [doublePointsSP removeFromParent];
    }
    NSLog(@"DP De-Activated");
} //--Done--//
//---TriplePoints--//
-(void)activatedTP {
    
    if (canActivateTP == YES) {
        self.activateTP = YES;
        [self PointsAnimation];
        
        TPAmount = 5;
        NSLog(@"Tp activated");
    }
    
    
    
} //--Done--//
-(void)deActivatedTP {
    self.activateTP = NO;
    
    [triplePointsSymbol removeFromParent];
    
    TPInteger -= 1;
    
    PowerUpAmountsLabel *tpLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel"];
    [tpLabel setPoints:tpLabel.number = TPInteger];
    
    ShopLogic *saveTP = [[ShopLogic alloc]init];
    [saveTP saveTPInteger];
    
    if (TPInteger == 0) {
        canActivateTP = NO;
        [triplePointsSP removeFromParent];
    }
    NSLog(@"TP De-Activated");
    
} //--Done--//
//---QuadPoints--//
-(void)activatedQP {
    
    if (canActivateQP == YES) {
        self.activateQP = YES;
        [self PointsAnimation];
        
        QPAmount = 5;
        NSLog(@"Qp activated");
    }
    
    
    
} //--Done--//
-(void)deActivatedQP {
    self.activateQP = NO;
    
    [quadPointsSymbol removeFromParent];
    
    PowerUpAmountsLabel *qpLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"qpLabel"];
    [qpLabel setPoints:qpLabel.number - 1];
    
    QPInteger -= 1;
    
    ShopLogic *saveQP = [[ShopLogic alloc]init];
    [saveQP saveQPInteger];
    
    if (QPInteger == 0) {
        canActivateQP = NO;
        [quadPointsSP removeFromParent];
    }
    NSLog(@"QP De-Activated");
} //--Done--//
//---ExtraLife1--//
-(void)activatedEL1 {
    
    if (canActivateEL1 == YES) {
        self.activateEL1 = YES;
        [self viewHeartIcon];
        NSLog(@"EL1 activated");
    }
    
    
} //--Done--//
-(void)deActivatedEL1 {
    self.activateEL1 = NO;
    
    EL1Integer -= 1;
    
    PowerUpAmountsLabel *el1Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el1Label"];
    [el1Label setPoints:el1Label.number = EL1Integer];
    
    ShopLogic *saveEL1 = [[ShopLogic alloc]init];
    [saveEL1 saveEL1Integer];
    if (EL1Integer == 0) {
        canActivateEL1 = NO;
        [extraLife1SP removeFromParent];
    }
    NSLog(@"EL1 De-Activated");
} //--Done--//
//---ExtraLife2--//
-(void)activatedEL2 {
    
    if (canActivateEL2 == YES) {
        self.activateEL2 = YES;
        EL2Amount = 2;
        [self viewHeartIcon];
        //[self viewHeartIcon];
        NSLog(@"EL2 activated");
    }
    
    
} //--Done--//
-(void)deActivatedEL2 {
    self.activateEL2 = NO;
    
    EL2Integer -= 1;
    
    PowerUpAmountsLabel *el2Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label"];
    [el2Label setPoints:el2Label.number = EL2Integer];
    
    ShopLogic *saveEL2 = [[ShopLogic alloc]init];
    [saveEL2 saveEL2Integer];
    if (EL2Integer == 0) {
        canActivateEL2 = NO;
        [extraLife2SP removeFromParent];
    }
    NSLog(@"EL2 De-Activated");
} //--Done--//
//---ExtraLife3--//
-(void)activatedEL3 {
    
    if (canActivateEL3 == YES) {
        self.activateEL3 = YES;
        EL3Amount = 3;
        [self viewHeartIcon];
        //[self viewHeartIcon];
        NSLog(@"EL3 activated");
    }
    
    
} //--Done--//
-(void)deActivatedEL3 {
    self.activateEL3 = NO;
    
    EL3Integer -= 1;
    
    PowerUpAmountsLabel *el3Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el3Label"];
    [el3Label setPoints:el3Label.number = EL3Integer];
    
    ShopLogic *saveEL3 = [[ShopLogic alloc]init];
    [saveEL3 saveEL3Integer];
    
    if (EL3Integer == 0) {
        canActivateEL3 = NO;
        [extraLife3SP removeFromParent];
    }
    NSLog(@"EL3 De-Activated");
} //--Done--//
//---HourGlass10--//
-(void)HourGlass10Activate {
    
    ShopLogic *HG10Check = [[ShopLogic alloc]init];
    [HG10Check usedHG10];
    
    SKAction *activate = [SKAction performSelector:@selector(activatedHG10) onTarget:self];
    
    [self runAction:activate];
    
    
} //--Done--//
-(void)activatedHG10 {
    
    if (canActivateHG10 == YES) {
        self.activateHG10 = YES;
        self.physicsWorld.speed = 0.5;
        [self viewHourGlass10Animations];
        NSLog(@"HG10 activated");
    }
    
    
} //--Done--//
-(void)deActivatedHG10 {
    
    self.activateHG10 = NO;
    
    HG10Integer -= 1;
    
    PowerUpAmountsLabel *hg10Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg10Label"];
    [hg10Label setPoints:hg10Label.number = HG10Integer];
    
    ShopLogic *saveHG10 = [[ShopLogic alloc]init];
    [saveHG10 saveHG10Integer];
    
    SKAction *normalizeSpeed = [SKAction sequence:@[[SKAction waitForDuration:1],[SKAction runBlock:^{
        self.physicsWorld.speed += 0.1;
    }]]];
    [self runAction:[SKAction repeatAction:normalizeSpeed count:5]];
    
    if (HG10Integer == 0) {
        canActivateHG10 = NO;
        [hourGlass10SP removeFromParent];
    }
    NSLog(@"HG10 De-Activated");
} //--Done--//
//---HourGlass20--//
-(void)HourGlass20Activate {
    
    ShopLogic *HG20Check = [[ShopLogic alloc]init];
    [HG20Check usedHG20];
    
    SKAction *activate = [SKAction performSelector:@selector(activatedHG20) onTarget:self];
    
    [self runAction:activate];
    
    
} //--Done--//
-(void)activatedHG20 {
    
    if (canActivateHG20 == YES) {
        self.activateHG20 = YES;
        self.physicsWorld.speed = 0.5;
        [self viewHourGlass20Animations];
        NSLog(@"HG20 activated");
    }
    
    
} //--Done--//
-(void)deActivatedHG20 {
    self.activateHG20 = NO;
    
    HG20Integer -= 1;
    
    PowerUpAmountsLabel *hg20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label"];
    [hg20Label setPoints:hg20Label.number = HG20Integer];
    
    ShopLogic *saveHG20 = [[ShopLogic alloc]init];
    [saveHG20 saveHG20Integer];
    SKAction *normalizeSpeed = [SKAction sequence:@[[SKAction waitForDuration:1],[SKAction runBlock:^{
        self.physicsWorld.speed += 0.1;
    }]]];
    [self runAction:[SKAction repeatAction:normalizeSpeed count:5]];
    if (HG20Integer == 0) {
        canActivateHG20 = NO;
        [hourGlass20SP removeFromParent];
    }
    NSLog(@"HG20 De-Activated");
} //--Done--//
//---HourGlass30--//
-(void)HourGlass30Activate {
    
    ShopLogic *HG30Check = [[ShopLogic alloc]init];
    [HG30Check usedHG30];
    
    SKAction *activate = [SKAction performSelector:@selector(activatedHG30) onTarget:self];
    
    [self runAction:activate];
    
    
} //--Done--//
-(void)activatedHG30 {
    
    if (canActivateHG30 == YES) {
        self.activateHG30 = YES;
        self.physicsWorld.speed = 0.5;
        [self viewHourGlass30Animations];
        NSLog(@"HG30 activated");
    }
    
    
} //--Done--//
-(void)deActivatedHG30 {
    self.activateHG30 = NO;
    
    HG30Integer -= 1;
    
    PowerUpAmountsLabel *hg30Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg30Label"];
    [hg30Label setPoints:hg30Label.number = HG30Integer];
    
    SKAction *normalizeSpeed = [SKAction sequence:@[[SKAction waitForDuration:1],[SKAction runBlock:^{
        self.physicsWorld.speed += 0.1;
    }]]];
    [self runAction:[SKAction repeatAction:normalizeSpeed count:5]];
    ShopLogic *saveHG30 = [[ShopLogic alloc]init];
    [saveHG30 saveHG30Integer];
    if (HG30Integer == 0) {
        canActivateHG30 = NO;
        [hourGlass30SP removeFromParent];
    }
    NSLog(@"HG30 De-Activated");
} //--Done--//
//---HeadStart10--//
-(void)HeadStart10Activate {
    
    ShopLogic *HS10Check = [[ShopLogic alloc]init];
    [HS10Check usedHS10];
    
    [self activatedHS10];
    
    
} //--Done--//
-(void)activatedHS10 {
    
    y = sprite.position.y;
    sprite.physicsBody.velocity = CGVectorMake(0, 0);
    asNum = 6;
    asNum--;
    SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
    asNumLabel.hidden = NO;
    [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
    
    
    
    if (canActivateHS10 == YES) {
        self.activateHS10 = YES;
        NSLog(@"HG10 activated");
        if (self.rightWay == YES) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:autoSwipeF withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:autoSwipeV withKey:@"RightSwipe"];
                
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:autoSwipeV withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:autoSwipeF withKey:@"RightSwipe"];
                
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
        
        [self timeRewindAnimations];
    }
    
    
} //--Add animations plus fix glitches--//
-(void)deActivatedHS10 {
    self.activateHS10 = NO;
    SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
    asNumLabel.hidden = YES;
    
    HS10Integer -= 1;
    PowerUpAmountsLabel *hs10Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs10Label"];
    [hs10Label setPoints:hs10Label.number = HS10Integer];
    ShopLogic *saveHS10 = [[ShopLogic alloc]init];
    [saveHS10 saveHS10Integer];
    
    if (HS10Integer == 0) {
        [headStart10SP removeFromParent];
        canActivateHS10 = NO;
    }
    
    NSLog(@"HG10 activated");
    
    asNum = 0;
    [tr10 removeFromParent];
    
    //NSLog(@"EL1 not activated");
} //--Done--//
//---HeadStart20--//
-(void)HeadStart20Activate {
    
    ShopLogic *HS20Check = [[ShopLogic alloc]init];
    [HS20Check usedHS20];
    
    [self activatedHS20];
    
    
} //--Done--//
-(void)activatedHS20 {
    asNum = 11;
    asNum--;
    SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
    asNumLabel.hidden = NO;
    [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
    
    
    if (canActivateHS20 == YES) {
        self.activateHS20 = YES;
        NSLog(@"HG20 activated");
        if (self.rightWay == YES) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:autoSwipeF withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:autoSwipeV withKey:@"RightSwipe"];
                
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:autoSwipeV withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:autoSwipeF withKey:@"RightSwipe"];
                
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
        [self timeRewindAnimations];
    }
    
    
} //--Add animations plus fix glitches--//
-(void)deActivatedHS20 {
    self.activateHS20 = NO;
    SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
    asNumLabel.hidden = YES;
    
    HS20Integer -= 1;
    PowerUpAmountsLabel *hs20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label"];
    [hs20Label setPoints:hs20Label.number = HS20Integer];
    ShopLogic *saveHS20 = [[ShopLogic alloc]init];
    [saveHS20 saveHS20Integer];
    
    if (HS20Integer == 0) {
        [headStart20SP removeFromParent];
        canActivateHS20 = NO;
    }
    
    NSLog(@"HG20 activated");
    
    asNum = 0;
    [tr20 removeFromParent];
    
    //NSLog(@"EL1 not activated");
} //--Done--//
//---HeadStart30--//
-(void)HeadStart30Activate {
    
    ShopLogic *HS30Check = [[ShopLogic alloc]init];
    [HS30Check usedHS30];
    
    [self activatedHS30];
    
    
} //--Done--//
-(void)activatedHS30 {
    asNum = 16;
    asNum--;
    SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
    asNumLabel.hidden = NO;
    [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
    
    
    if (canActivateHS30 == YES) {
        self.activateHS30 = YES;
        NSLog(@"HG30 activated");
        if (self.rightWay == YES) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:autoSwipeF withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:autoSwipeV withKey:@"RightSwipe"];
                
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:autoSwipeV withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:autoSwipeF withKey:@"RightSwipe"];
                
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
        [self timeRewindAnimations];
    }
    
} //--Add animations plus fix glitches--//
-(void)deActivatedHS30 {
    self.activateHS30 = NO;
    SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
    asNumLabel.hidden = YES;
    
    HS30Integer -= 1;
    PowerUpAmountsLabel *hs30Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs30Label"];
    [hs30Label setPoints:hs30Label.number = HS30Integer];
    ShopLogic *saveHS30 = [[ShopLogic alloc]init];
    [saveHS30 saveHS30Integer];
    
    if (HS30Integer == 0) {
        [headStart30SP removeFromParent];
        canActivateHS30 = NO;
    }
    
    NSLog(@"HG30 activated");
    
    asNum = 0;
    [tr30 removeFromParent];
    
    //NSLog(@"EL1 not activated");
} //--Done--//
//---PowerUpAnimations---//
-(void)viewHeartIcon {
    
    l1H1Texture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneEL1Ani1"];
    l1H2Texture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneEL2Ani1"];
    l1H3Texture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneEL3Ani1"];
    
    if (self.activateEL1 == YES) {
        
        l1H1 = [SKSpriteNode spriteNodeWithTexture:l1H1Texture];
        l1H1.position = CGPointZero;
        l1H1.size = CGSizeMake(l1H1.frame.size.width/s, l1H1.frame.size.height / s);
        l1H1.zPosition = 5;
        [self.spriteLayer addChild:l1H1];
        
    }
    if (self.activateEL2 == YES) {
        
        l1H1 = [SKSpriteNode spriteNodeWithTexture:l1H1Texture];
        l1H1.position = CGPointZero;
        l1H1.size = CGSizeMake(l1H1.frame.size.width/s, l1H1.frame.size.height / s);
        l1H1.zPosition = 5;
        [self.spriteLayer addChild:l1H1];
        
        l1H2 = [SKSpriteNode spriteNodeWithTexture:l1H2Texture];
        l1H2.position = CGPointZero;
        l1H2.size = CGSizeMake(l1H2.frame.size.width/s, l1H2.frame.size.height / s);
        l1H2.zPosition = 6;
        [self.spriteLayer addChild:l1H2];
        
    }
    
    if (self.activateEL3 == YES) {
        
        l1H1 = [SKSpriteNode spriteNodeWithTexture:l1H1Texture];
        l1H1.position = CGPointZero;
        l1H1.size = CGSizeMake(l1H1.frame.size.width/s, l1H1.frame.size.height / s);
        l1H1.zPosition = 5;
        [self.spriteLayer addChild:l1H1];
        
        l1H2 = [SKSpriteNode spriteNodeWithTexture:l1H2Texture];
        l1H2.position = CGPointZero;
        l1H2.size = CGSizeMake(l1H2.frame.size.width/s, l1H2.frame.size.height / s);
        l1H2.zPosition = 6;
        [self.spriteLayer addChild:l1H2];
        
        l1H3 = [SKSpriteNode spriteNodeWithTexture:l1H3Texture];
        l1H3.position = CGPointZero;
        l1H3.size = CGSizeMake(l1H3.frame.size.width/s, l1H3.frame.size.height / s);
        l1H3.zPosition = 7;
        [self.spriteLayer addChild:l1H3];
        
    }
    
    SKAction *animate1 = [SKAction animateWithTextures:L1H1_ANIM_START timePerFrame:0.5];
    SKAction *animate2 = [SKAction animateWithTextures:L2H1_ANIM_START timePerFrame:0.5];
    SKAction *animate3 = [SKAction animateWithTextures:L3H1_ANIM_START timePerFrame:0.5];
    [l1H1 runAction:[SKAction repeatActionForever:animate1]];
    [l1H2 runAction:[SKAction repeatActionForever:animate2]];
    [l1H3 runAction:[SKAction repeatActionForever:animate3]];
    
} //--Done--//
-(void)heartIconLossAnimation {
    
    NSString *sound = [[NSBundle mainBundle]pathForResource:@"Buzzer" ofType:@"wav"];
    buzzer = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
    buzzer.delegate = self;
    buzzer.volume = 1.0;
    [buzzer play];
    
    NSString *sound1 = [[NSBundle mainBundle]pathForResource:@"Light Bulb Breaking-SoundBible.com-53066515" ofType:@"mp3"];
    brokenGlass = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound1]  error:NULL];
    brokenGlass.delegate = self;
    brokenGlass.volume = 1.0;
    [brokenGlass play];
    
    /*el1GlassTexture = [powerUpAnimSprites4 textureNamed:@"FFGameSceneRedScreen1"];
     el2GlassTexture = [powerUpAnimSprites3 textureNamed:@"FFGameSceneYellowScreen1"];
     el3GlassTexture = [powerUpAnimSprites2 textureNamed:@"FFGameScenePurpleScreen1"];*/
    
    if (self.activateEL1) {
        el1Glass = [SKSpriteNode spriteNodeWithTexture:el1GlassTexture];
        el1Glass.position = CGPointZero;
        el1Glass.size = CGSizeMake(el1Glass.frame.size.width/s, el1Glass.frame.size.height / s);
        el1Glass.zPosition = 300;
        [self.spriteLayer addChild:el1Glass];
        NSArray *hTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani1"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani2"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani3"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani4"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani5"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani6"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani7"]];
        /*NSArray *gTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneRedScreen1"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen2"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen3"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen4"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen5"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen6"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen7"]];*/
        SKAction *hCountdown = [SKAction animateWithTextures:hTextures timePerFrame:0.1];
        SKAction *hAlpha = [SKAction fadeAlphaTo:0.0 duration:0.7];
        SKAction *removeH = [SKAction removeFromParent];
        SKAction *hGroup = [SKAction group:@[hCountdown,hAlpha]];
        SKAction *hSequence = [SKAction sequence:@[hGroup,removeH]];
        [l1H1 runAction:hSequence];
        /*SKAction *gSeq = [SKAction sequence:@[[SKAction animateWithTextures:gTextures timePerFrame:0.083],
         [SKAction removeFromParent]]];
         [el1Glass runAction:gSeq];*/
    }
    if (self.activateEL2 & (EL2Amount == 1)) {
        el2Glass = [SKSpriteNode spriteNodeWithTexture:el2GlassTexture];
        el2Glass.position = CGPointZero;
        el2Glass.size = CGSizeMake(el2Glass.frame.size.width/s, el2Glass.frame.size.height / s);
        el2Glass.zPosition = 300;
        [self.spriteLayer addChild:el2Glass];
        NSArray *hTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani1"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani2"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani3"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani4"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani5"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani6"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani7"]];
        /*NSArray *gTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen1"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen2"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen3"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen4"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen5"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen6"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen7"]];*/
        SKAction *hCountdown = [SKAction animateWithTextures:hTextures timePerFrame:0.1];
        SKAction *hAlpha = [SKAction fadeAlphaTo:0.0 duration:0.7];
        SKAction *removeH = [SKAction removeFromParent];
        SKAction *hGroup = [SKAction group:@[hCountdown,hAlpha]];
        SKAction *hSequence = [SKAction sequence:@[hGroup,removeH]];
        [l1H2 runAction:hSequence];
        /*SKAction *gSeq = [SKAction sequence:@[[SKAction animateWithTextures:gTextures timePerFrame:0.083],
         [SKAction removeFromParent]]];
         [el2Glass runAction:gSeq];*/
    }
    if (self.activateEL2 & (EL2Amount == 0)) {
        el1Glass = [SKSpriteNode spriteNodeWithTexture:el1GlassTexture];
        el1Glass.position = CGPointZero;
        el1Glass.size = CGSizeMake(el1Glass.size.width/s, el1Glass.frame.size.height / s);
        el1Glass.zPosition = 300;
        [self.spriteLayer addChild:el1Glass];
        NSArray *hTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani1"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani2"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani3"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani4"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani5"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani6"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani7"]];
        /*NSArray *gTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneRedScreen1"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen2"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen3"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen4"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen5"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen6"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen7"]];*/
        SKAction *hCountdown = [SKAction animateWithTextures:hTextures timePerFrame:0.1];
        SKAction *hAlpha = [SKAction fadeAlphaTo:0.0 duration:0.7];
        SKAction *removeH = [SKAction removeFromParent];
        SKAction *hGroup = [SKAction group:@[hCountdown,hAlpha]];
        SKAction *hSequence = [SKAction sequence:@[hGroup,removeH]];
        [l1H1 runAction:hSequence];
        /*SKAction *gSeq = [SKAction sequence:@[[SKAction animateWithTextures:gTextures timePerFrame:0.083],
         [SKAction removeFromParent]]];
         [el1Glass runAction:gSeq];*/
    }
    if (self.activateEL3 & (EL3Amount == 2)) {
        el3Glass = [SKSpriteNode spriteNodeWithTexture:el3GlassTexture];
        el3Glass.position = CGPointZero;
        el3Glass.size = CGSizeMake(el3Glass.frame.size.width/s, el3Glass.frame.size.height / s);
        el3Glass.zPosition = 300;
        [self.spriteLayer addChild:el3Glass];
        NSArray *hTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneEL3Ani1"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL3Ani2"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL3Ani3"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL3Ani4"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL3Ani5"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL3Ani6"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL3Ani7"]];
        /*NSArray *gTextures = @[[SKTexture textureWithImageNamed:@"FFGameScenePurpleScreen1"],
         [SKTexture textureWithImageNamed:@"FFGameScenePurpleScreen2"],
         [SKTexture textureWithImageNamed:@"FFGameScenePurpleScreen3"],
         [SKTexture textureWithImageNamed:@"FFGameScenePurpleScreen4"],
         [SKTexture textureWithImageNamed:@"FFGameScenePurpleScreen5"],
         [SKTexture textureWithImageNamed:@"FFGameScenePurpleScreen6"],
         [SKTexture textureWithImageNamed:@"FFGameScenePurpleScreen7"]];*/
        SKAction *hCountdown = [SKAction animateWithTextures:hTextures timePerFrame:0.1];
        
        SKAction *hAlpha = [SKAction fadeAlphaTo:0.0 duration:0.7];
        SKAction *removeH = [SKAction removeFromParent];
        SKAction *hGroup = [SKAction group:@[hCountdown,hAlpha]];
        SKAction *hSequence = [SKAction sequence:@[hGroup,removeH]];
        [l1H3 runAction:hSequence];
        /*SKAction *gSeq = [SKAction sequence:@[[SKAction animateWithTextures:gTextures timePerFrame:0.083],
         [SKAction removeFromParent]]];
         [el3Glass runAction:gSeq];*/
    }
    if (self.activateEL3 & (EL3Amount == 1)) {
        el2Glass = [SKSpriteNode spriteNodeWithTexture:el2GlassTexture];
        el2Glass.position = CGPointZero;
        el2Glass.size = CGSizeMake(el2Glass.frame.size.width/s, el2Glass.frame.size.height / s);
        el2Glass.zPosition = 300;
        [self.spriteLayer addChild:el2Glass];
        NSArray *hTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani1"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani2"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani3"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani4"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani5"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani6"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL2Ani7"]];
        /*NSArray *gTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen1"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen2"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen3"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen4"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen5"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen6"],
         [SKTexture textureWithImageNamed:@"FFGameSceneYellowScreen7"]];*/
        SKAction *hCountdown = [SKAction animateWithTextures:hTextures timePerFrame:0.1];
        SKAction *hAlpha = [SKAction fadeAlphaTo:0.0 duration:0.7];
        SKAction *removeH = [SKAction removeFromParent];
        SKAction *hGroup = [SKAction group:@[hCountdown,hAlpha]];
        SKAction *hSequence = [SKAction sequence:@[hGroup,removeH]];
        [l1H2 runAction:hSequence];
        /*SKAction *gSeq = [SKAction sequence:@[[SKAction animateWithTextures:gTextures timePerFrame:0.083],
         [SKAction removeFromParent]]];
         [el2Glass runAction:gSeq];*/
    }
    if (self.activateEL3 & (EL3Amount == 0)) {
        el1Glass = [SKSpriteNode spriteNodeWithTexture:el1GlassTexture];
        el1Glass.position = CGPointZero;
        el1Glass.size = CGSizeMake(el1Glass.frame.size.width/s, el1Glass.frame.size.height / s);
        el1Glass.zPosition = 300;
        [self.spriteLayer addChild:el1Glass];
        NSArray *hTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani1"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani2"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani3"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani4"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani5"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani6"],
                               [SKTexture textureWithImageNamed:@"FFGameSceneEL1Ani7"]];
        /*NSArray *gTextures = @[[SKTexture textureWithImageNamed:@"FFGameSceneRedScreen1"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen2"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen3"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen4"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen5"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen6"],
         [SKTexture textureWithImageNamed:@"FFGameSceneRedScreen7"]];*/
        SKAction *hCountdown = [SKAction animateWithTextures:hTextures timePerFrame:0.1];
        SKAction *hAlpha = [SKAction fadeAlphaTo:0.0 duration:0.7];
        SKAction *removeH = [SKAction removeFromParent];
        SKAction *hGroup = [SKAction group:@[hCountdown,hAlpha]];
        SKAction *hSequence = [SKAction sequence:@[hGroup,removeH]];
        [l1H1 runAction:hSequence];
        /*SKAction *gSeq = [SKAction sequence:@[[SKAction animateWithTextures:gTextures timePerFrame:0.083],
         [SKAction removeFromParent]]];
         [el1Glass runAction:gSeq];*/
    }
} //--Done--//
-(void)viewHourGlass10Animations {
    
    hG10P0Texture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneHG10Ani1"];
    
    hG10P0 = [SKSpriteNode spriteNodeWithTexture:hG10P0Texture];
    hG10P0.position = CGPointZero;
    hG10P0.size = CGSizeMake(hG10P0.frame.size.width/s, hG10P0.frame.size.height / s);
    hG10P0.zPosition = 5;
    [self.spriteLayer addChild:hG10P0];
    
    NSArray *textures = @[[SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani10"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani9"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani8"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani7"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani6"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani5"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani4"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani3"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani2"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG10Ani1"]];
    
    SKAction *countDown = [SKAction animateWithTextures:textures timePerFrame:1];
    SKAction *removeTextures = [SKAction removeFromParent];
    SKAction *HG10Ani = [SKAction sequence:@[countDown,removeTextures,[SKAction performSelector:@selector(deActivatedHG10) onTarget:self]]];
    [hG10P0 runAction:HG10Ani];
} //--Done--//
-(void)viewHourGlass20Animations {
    
    hG20P0Texture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneHG20Ani1"];
    
    hG20P0 = [SKSpriteNode spriteNodeWithTexture:hG20P0Texture];
    hG20P0.position = CGPointZero;
    hG20P0.size = CGSizeMake(hG20P0.frame.size.width/s, hG20P0.frame.size.height / s);
    hG20P0.zPosition = 5;
    [self.spriteLayer addChild:hG20P0];
    
    NSArray *textures = @[[SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani20"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani19"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani18"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani17"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani16"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani15"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani14"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani13"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani12"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani11"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani10"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani9"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani8"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani7"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani6"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani5"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani4"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani3"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani2"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG20Ani1"]];
    
    SKAction *countDown = [SKAction animateWithTextures:textures timePerFrame:1];
    SKAction *removeTextures = [SKAction removeFromParent];
    SKAction *HG20Ani = [SKAction sequence:@[countDown,removeTextures,[SKAction performSelector:@selector(deActivatedHG20) onTarget:self]]];
    [hG20P0 runAction:HG20Ani];
} //--Done--//
-(void)viewHourGlass30Animations {
    
    hG30P0Texture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneHG30Ani1"];
    
    hG30P0 = [SKSpriteNode spriteNodeWithTexture:hG30P0Texture];
    hG30P0.position = CGPointZero;
    hG30P0.size = CGSizeMake(hG30P0.frame.size.width/s, hG30P0.frame.size.height / s);
    hG30P0.zPosition = 5;
    [self.spriteLayer addChild:hG30P0];
    
    NSArray *textures = @[[SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani30"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani29"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani28"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani27"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani26"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani25"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani24"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani23"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani22"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani21"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani20"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani19"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani18"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani17"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani16"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani15"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani14"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani13"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani12"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani11"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani10"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani9"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani8"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani7"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani6"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani5"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani4"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani3"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani2"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneHG30Ani1"]];
    
    SKAction *countDown = [SKAction animateWithTextures:textures timePerFrame:1];
    SKAction *removeTextures = [SKAction removeFromParent];
    SKAction *HG30Ani = [SKAction sequence:@[countDown,removeTextures,[SKAction performSelector:@selector(deActivatedHG30) onTarget:self]]];
    [hG30P0 runAction:HG30Ani];
} //--Done--//
-(void)timeRewindAnimations {
    
    [tr10 removeFromParent];
    [tr20 removeFromParent];
    [tr30 removeFromParent];
    
    if (self.activateHS10 == YES) {
        
        if (self.isAFruit == YES & self.rightWay == YES) {
        tr10Texture = [powerUpAnimSprites1 textureNamed:@"TR10Ani1"];
        tr10 = [SKSpriteNode spriteNodeWithTexture:tr10Texture];
        tr10.position = CGPointZero;
        tr10.size = CGSizeMake(tr10.frame.size.width/s, tr10.frame.size.height / s);
        tr10.zPosition = 5;
        [self.spriteLayer addChild:tr10];
        }
        if (self.isAVeggy == YES & self.rightWay == YES) {
            tr10Texture = [powerUpAnimSprites1 textureNamed:@"TR10Ani2"];
            tr10 = [SKSpriteNode spriteNodeWithTexture:tr10Texture];
            tr10.position = CGPointZero;
            tr10.size = CGSizeMake(tr10.frame.size.width/s, tr10.frame.size.height / s);
            tr10.zPosition = 5;
            [self.spriteLayer addChild:tr10];
        }
        if (self.isAFruit == YES & self.rightWay == NO) {
            tr10Texture = [powerUpAnimSprites1 textureNamed:@"TR10Ani2"];
            tr10 = [SKSpriteNode spriteNodeWithTexture:tr10Texture];
            tr10.position = CGPointZero;
            tr10.size = CGSizeMake(tr10.frame.size.width/s, tr10.frame.size.height / s);
            tr10.zPosition = 5;
            [self.spriteLayer addChild:tr10];
        }
        if (self.isAVeggy == YES & self.rightWay == NO) {
            tr10Texture = [powerUpAnimSprites1 textureNamed:@"TR10Ani1"];
            tr10 = [SKSpriteNode spriteNodeWithTexture:tr10Texture];
            tr10.position = CGPointZero;
            tr10.size = CGSizeMake(tr10.frame.size.width/s, tr10.frame.size.height / s);
            tr10.zPosition = 5;
            [self.spriteLayer addChild:tr10];
        }
        
        
    }
    if (self.activateHS20 == YES) {
        
        if (self.isAFruit == YES & self.rightWay == YES) {
            tr20Texture = [powerUpAnimSprites1 textureNamed:@"TR20Ani1"];
            tr20 = [SKSpriteNode spriteNodeWithTexture:tr20Texture];
            tr20.position = CGPointZero;
            tr20.size = CGSizeMake(tr20.frame.size.width/s, tr20.frame.size.height / s);
            tr20.zPosition = 5;
            [self.spriteLayer addChild:tr20];
        }
        if (self.isAVeggy == YES & self.rightWay == YES) {
            tr20Texture = [powerUpAnimSprites1 textureNamed:@"TR20Ani2"];
            tr20 = [SKSpriteNode spriteNodeWithTexture:tr20Texture];
            tr20.position = CGPointZero;
            tr20.size = CGSizeMake(tr20.frame.size.width/s, tr20.frame.size.height / s);
            tr20.zPosition = 5;
            [self.spriteLayer addChild:tr20];
        }
        if (self.isAFruit == YES & self.rightWay == NO) {
            tr20Texture = [powerUpAnimSprites1 textureNamed:@"TR20Ani2"];
            tr20 = [SKSpriteNode spriteNodeWithTexture:tr20Texture];
            tr20.position = CGPointZero;
            tr20.size = CGSizeMake(tr20.frame.size.width/s, tr20.frame.size.height / s);
            tr20.zPosition = 5;
            [self.spriteLayer addChild:tr20];
        }
        if (self.isAVeggy == YES & self.rightWay == NO) {
            tr20Texture = [powerUpAnimSprites1 textureNamed:@"TR20Ani1"];
            tr20 = [SKSpriteNode spriteNodeWithTexture:tr20Texture];
            tr20.position = CGPointZero;
            tr20.size = CGSizeMake(tr20.frame.size.width/s, tr20.frame.size.height / s);
            tr20.zPosition = 5;
            [self.spriteLayer addChild:tr20];
        }
    }
    if (self.activateHS30 == YES) {
        
        if (self.isAFruit == YES & self.rightWay == YES) {
            tr30Texture = [powerUpAnimSprites1 textureNamed:@"TR30Ani1"];
            tr30 = [SKSpriteNode spriteNodeWithTexture:tr30Texture];
            tr30.position = CGPointZero;
            tr30.size = CGSizeMake(tr30.frame.size.width/s, tr30.frame.size.height / s);
            tr30.zPosition = 5;
            [self.spriteLayer addChild:tr30];
        }
        if (self.isAVeggy == YES & self.rightWay == YES) {
            tr30Texture = [powerUpAnimSprites1 textureNamed:@"TR30Ani2"];
            tr30 = [SKSpriteNode spriteNodeWithTexture:tr30Texture];
            tr30.position = CGPointZero;
            tr30.size = CGSizeMake(tr30.frame.size.width/s, tr30.frame.size.height / s);
            tr30.zPosition = 5;
            [self.spriteLayer addChild:tr30];
        }
        if (self.isAFruit == YES & self.rightWay == NO) {
            tr30Texture = [powerUpAnimSprites1 textureNamed:@"TR30Ani2"];
            tr30 = [SKSpriteNode spriteNodeWithTexture:tr30Texture];
            tr30.position = CGPointZero;
            tr30.size = CGSizeMake(tr30.frame.size.width/s, tr30.frame.size.height / s);
            tr30.zPosition = 5;
            [self.spriteLayer addChild:tr30];
        }
        if (self.isAVeggy == YES & self.rightWay == NO) {
            tr30Texture = [powerUpAnimSprites1 textureNamed:@"TR30Ani1"];
            tr30 = [SKSpriteNode spriteNodeWithTexture:tr30Texture];
            tr30.position = CGPointZero;
            tr30.size = CGSizeMake(tr30.frame.size.width/s, tr30.frame.size.height / s);
            tr30.zPosition = 5;
            [self.spriteLayer addChild:tr30];
        }
        
    }
    
} //--Done--//
-(void)PointsAnimation {
    
    doublePointsSymbolTexture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneDPAni"];
    triplePointsSymbolTexture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneTPAni"];
    quadPointsSymbolTexture = [powerUpAnimSprites1 textureNamed:@"FFGameSceneQPAni"];
    
    if (self.activateDP == YES) {
        doublePointsSymbol = [SKSpriteNode spriteNodeWithTexture:doublePointsSymbolTexture];
        doublePointsSymbol.position = CGPointZero;
        doublePointsSymbol.size = CGSizeMake(doublePointsSymbol.frame.size.width/s, doublePointsSymbol.frame.size.height / s);
        doublePointsSymbol.zPosition = 5;
        [self.spriteLayer addChild:doublePointsSymbol];
        
        SKAction *visible = [SKAction fadeAlphaTo:1.0 duration:0.5];
        SKAction *invisible = [SKAction fadeAlphaTo:0 duration:0.5];
        SKAction *sequence = [SKAction sequence:@[visible,invisible]];
        SKAction *sequenceRepeat = [SKAction repeatActionForever:sequence];
        [doublePointsSymbol runAction:sequenceRepeat];
    }
    if (self.activateTP == YES) {
        triplePointsSymbol = [SKSpriteNode spriteNodeWithTexture:triplePointsSymbolTexture];
        triplePointsSymbol.position = CGPointZero;
        triplePointsSymbol.size = CGSizeMake(triplePointsSymbol.frame.size.width/s, triplePointsSymbol.frame.size.height / s);
        triplePointsSymbol.zPosition = 5;
        [self.spriteLayer addChild:triplePointsSymbol];
        
        SKAction *visible = [SKAction fadeAlphaTo:1.0 duration:0.5];
        SKAction *invisible = [SKAction fadeAlphaTo:0 duration:0.5];
        SKAction *sequence = [SKAction sequence:@[visible,invisible]];
        SKAction *sequenceRepeat = [SKAction repeatActionForever:sequence];
        [triplePointsSymbol runAction:sequenceRepeat];
    }
    if (self.activateQP == YES) {
        quadPointsSymbol = [SKSpriteNode spriteNodeWithTexture:quadPointsSymbolTexture];
        quadPointsSymbol.position = CGPointZero;
        quadPointsSymbol.size = CGSizeMake(quadPointsSymbol.frame.size.width/s, quadPointsSymbol.frame.size.height / s);
        quadPointsSymbol.zPosition = 5;
        [self.spriteLayer addChild:quadPointsSymbol];
        
        SKAction *visible = [SKAction fadeAlphaTo:1.0 duration:0.5];
        SKAction *invisible = [SKAction fadeAlphaTo:0 duration:0.5];
        SKAction *sequence = [SKAction sequence:@[visible,invisible]];
        SKAction *sequenceRepeat = [SKAction repeatActionForever:sequence];
        [quadPointsSymbol runAction:sequenceRepeat];
    }
    
} //--Done--//
-(void)spawnFoodLevel1 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName isEqual: @"Apple"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName isEqual: @"RedBellPepper"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName isEqual: @"Broccoli"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName isEqual: @"Carrot"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName isEqual: @"Orange"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAFruit = YES;
        
        
    }
    if ([foodName isEqual: @"Pear"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName isEqual: @"Watermelon"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName isEqual: @"Corn"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName isEqual: @"Potato"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName isEqual: @"Banana"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
    
    if (foodBlowReggy == YES) {
        [self foodBlowAnim];
    }
    
}
-(void)spawnFoodLevel2 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory1;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"Pomegranite"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Cherry"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Onion"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Celery"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAVeggy = YES;
        
        
    }
    if ([foodName  isEqual: @"GreenGrapes"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Coconut"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"ChiliPepper"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Rutabaga"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Kiwi"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"CherryPie"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"BrusselSprouts"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Pizza"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
    if (canHelp == YES) {
        [self activateHelp];
    }
}
-(void)spawnFoodLevel3 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory2;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"PineApple"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Asparaus"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Avocado"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"BeetrRoot"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Lime"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAFruit = YES;
        
        
    }
    if ([foodName  isEqual: @"ButternutSquash"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth5Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth15Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth20Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"DelicataSquash"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Clementines"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"StrawBerry"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"IceCream"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Chips"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Twix"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth1Point = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth4Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Garlic"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
if (canHelp == YES ) {
    [self activateHelp];
}
}
-(void)spawnFoodLevel4 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory3;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"Radish"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"EggPlant"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAEggPlant = YES;
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Nectarine"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAFruit = YES;
        self.isANectarine = YES;
        
    }
    if ([foodName  isEqual: @"Mushroom"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Fig"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"YellowBellPepper"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Pumpkin"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAVeggy = YES;
        self.isAPumpkin = YES;
        
    }
    if ([foodName  isEqual: @"Lettuce"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Mango"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth5Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth15Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth20Points = YES;
        }
        self.isAFruit = YES;
    }
    if ([foodName  isEqual: @"Lemon"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Guava"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Jelly"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"LoliPop"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
}
-(void)spawnFoodLevel5 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory4;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"VictoriaPlum"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Beet"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth5Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth15Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth20Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Cardoon"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Cucumber"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth16Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth24Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth32Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Turnip"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth5Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth15Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth20Points = YES;
        }
        self.isAVeggy = YES;
        
        
    }
    if ([foodName  isEqual: @"PeanutButter"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"CupCake"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Eugenia"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"GingerRoot"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"GalioMuskMelon"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Peanut"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth16Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Tomato"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Quince"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
    
}
-(void)spawnFoodLevel6 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory5;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"Ugli"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"HoneyDewMelon"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"BokChoy"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth7Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth14Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth21Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth28Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Cassava"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Zucini"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"CollardGreens"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth16Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth24Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth32Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"CornDog"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth18Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Twinky"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth18Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Pickle"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth16Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth24Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth32Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Diakon"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        self.isADiakon = YES;
        
    }
    if ([foodName  isEqual: @"Olives"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"GingerRoot"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"SourSop"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAFruit = YES;
        self.isASourSop = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
    
}
-(void)spawnFoodLevel7 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory6;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"Chayote"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Cilantro"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Citron"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth16Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth24Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth32Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Dasheen"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth16Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth24Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth32Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Achoccha"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Artichoke"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"AsianRadish"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"GreenChilliPepper"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth12Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth24Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"SugarApple"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth16Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth24Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth32Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Ackee"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Rambutan"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Brownie"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Taco"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Burger"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Cake"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth2Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth4Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth8Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
    
}
-(void)spawnFoodLevel8 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory7;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"Endive"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth16Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth24Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth32Points = YES;
        }
        self.isAVeggy = YES;
    }
    if ([foodName  isEqual: @"Yam"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth8Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth16Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth24Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth32Points = YES;
        }
        self.isAVeggy = YES;
    }
    if ([foodName  isEqual: @"Fennel"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Leek"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Steak"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"HotDog"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Butter"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth3Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth6Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth12Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"HornedCucumber"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAFruit = YES;
        self.isAHornedCucumber = YES;
        
    }
    if ([foodName  isEqual: @"Durain"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"MangoSteen"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAFruit = YES;
        self.isAMangoSteen = YES;
        
    }
    if ([foodName  isEqual: @"Cherimoya"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"MonsteraDeliciosa"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Oca"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAVeggy = YES;
        self.isAOca = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
    
}
-(void)spawnFoodLevel9 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory8;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"Kahlrabi"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAVeggy = YES;
    }
    if ([foodName  isEqual: @"Salsify"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        self.isASalsify = YES;
    }
    if ([foodName  isEqual: @"Celeriac"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Moniac"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Sunchok"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAVeggy = YES;
        self.isASunchok = YES;
        
    }
    if ([foodName  isEqual: @"AguajeFruit"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"JackFruit"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Capuaca"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Pepino"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth9Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth18Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth27Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth36Points = YES;
        }
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"DragonFruit"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth20Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth30Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth40Points = YES;
        }
        self.isAFruit = YES;
        self.isADragonFruit = YES;
        
    }
    if ([foodName  isEqual: @"Candy"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth5Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth15Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth20Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Chicken"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth5Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth15Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth20Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"ChimiChunga"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth5Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth15Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth20Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"RiceKrispy"]) {
        
        if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            self.isWorth5Points = YES;
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            self.isWorth10Points = YES;
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            self.isWorth15Points = YES;
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            self.isWorth20Points = YES;
        }
        self.isAOther = YES;
        
    }
    if ((self.activateDP == YES) & (canActivateDP == YES)) {
        DPAmount -= 1;
        NSLog(@"DPamount:" @"%d", DPAmount);
        if (DPAmount == 0) {
            [self deActivatedDP];
        }
    }
    if ((self.activateTP == YES) & (canActivateTP == YES)) {
        TPAmount -= 1;
        NSLog(@"TPamount:" @"%d", TPAmount);
        if (TPAmount == 0) {
            [self deActivatedTP];
        }
    }
    if ((self.activateQP == YES) & (canActivateQP == YES)) {
        QPAmount -= 1;
        NSLog(@"QPamount:" @"%d", QPAmount);
        if (QPAmount == 0) {
            [self deActivatedQP];
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
    if (self.activateHS10 == YES & canActivateHS10 == YES) {
        asNum--;
        SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
        [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
        [self timeRewindAnimations];
        if (asNum == 0) {
            [self deActivatedHS10];
        }
        
        if (self.rightWay == YES & canActivateHS10 == YES) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
    }
    if (self.activateHS20 == YES & canActivateHS20 == YES) {
        [self timeRewindAnimations];
        asNum--;
        SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
        [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
        if (asNum == 0) {
            [self deActivatedHS20];
        }
        
        if (self.rightWay == YES) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
    }
    if (self.activateHS30 == YES & canActivateHS30 == YES) {
        [self timeRewindAnimations];
        asNum--;
        SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
        [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
        if (asNum == 0) {
            [self deActivatedHS30];
        }
        
        if (self.rightWay == YES) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
    }
}
-(void)spawnFoodLevel10 {
    
    foodNum = arc4random() % (foodArray.count);
    
    NSString *currentelement = [foodArray objectAtIndex:foodNum];
    spriteTexture = [foodSprites textureNamed:currentelement];
    
    foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
    
    sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
    sprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
    sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
    sprite.zPosition = 3;
    sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
    sprite.physicsBody.categoryBitMask = foodCategory9;
    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory | wallCategory;
    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory | batCategory | wallCategory;
    [self.foodsLayer addChild:sprite];
    
    [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
    
    if ([foodName  isEqual: @"Apple"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"RedBellPepper"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Broccoli"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Carrot"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Orange"]) {
        
        self.isAFruit = YES;
        
        
    }
    if ([foodName  isEqual: @"Pear"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Watermelon"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Corn"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Potato"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Banana"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Pomegranite"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Cherry"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Onion"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Celery"]) {
        
        self.isAVeggy = YES;
        
        
    }
    if ([foodName  isEqual: @"GreenGrapes"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Coconut"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"ChiliPepper"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Rutabaga"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Kiwi"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"CherryPie"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"BrusselSprouts"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Pizza"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"PineApple"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Asparaus"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Avocado"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"BeetrRoot"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Lime"]) {
        
        self.isAFruit = YES;
        
        
    }
    if ([foodName  isEqual: @"ButternutSquash"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"DelicataSquash"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Clementines"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"StrawBerry"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"IceCream"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Chips"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Twix"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Garlic"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Radish"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"EggPlant"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Nectarine"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Mushroom"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Fig"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"YellowBellPepper"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Pumpkin"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Lettuce"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Mango"]) {
        
        self.isAFruit = YES;
    }
    if ([foodName  isEqual: @"Lemon"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Guava"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Jelly"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"LoliPop"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"VictoriaPlum"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Beet"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Cardoon"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Cucumber"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Turnip"]) {
        
        self.isAVeggy = YES;
        
        
    }
    if ([foodName  isEqual: @"PeanutButter"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"CupCake"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Eugenia"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"GingerRoot"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"GalioMuskMelon"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Peanut"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Tomato"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Quince"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Ugli"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"HoneyDewMelon"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"BokChoy"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Cassava"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Zucini"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"CollardGreens"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"CornDog"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Twinky"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Pickle"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Diakon"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Olives"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"GingerRoot"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"SourSop"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Chayote"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Cilantro"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Citron"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Dasheen"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Achoccha"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Artichoke"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"AsianRadish"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"GreenChilliPepper"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"SugarApple"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Ackee"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Rambutan"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Brownie"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Taco"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Burger"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Cake"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Endive"]) {
        
        self.isAVeggy = YES;
    }
    if ([foodName  isEqual: @"Yam"]) {
        
        self.isAVeggy = YES;
    }
    if ([foodName  isEqual: @"Fennel"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Leek"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Steak"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"HotDog"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Butter"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"HornedCucumber"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Durain"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"MangoSteen"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Cherimoya"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"MonsteraDeliciosa"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Oca"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Kahlrabi"]) {
        
        self.isAVeggy = YES;
    }
    if ([foodName  isEqual: @"Salsify"]) {
        
        self.isAVeggy = YES;
    }
    if ([foodName  isEqual: @"Celeriac"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Moniac"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"Sunchok"]) {
        
        self.isAVeggy = YES;
        
    }
    if ([foodName  isEqual: @"AguajeFruit"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"JackFruit"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Capuaca"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Pepino"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"DragonFruit"]) {
        
        self.isAFruit = YES;
        
    }
    if ([foodName  isEqual: @"Candy"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"Chicken"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"ChimiChunga"]) {
        
        self.isAOther = YES;
        
    }
    if ([foodName  isEqual: @"RiceKrispy"]) {
        
        self.isAOther = YES;
        
    }
    
    if (canBat == YES ) {
        if (self.isAVeggy == YES){
            ReggyBot.xScale = -1;
        }
        if (self.isAFruit == YES){
            ReggyBot.xScale = 1;
        }
    }
    
}

/*-(void)addSpritesForFoods:(NSSet *)foods {
    for (Food *food in foods) {
 
        spriteTexture = [foodSprites textureNamed:[food spriteName]];
 
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
 
 
        [self foodCategories:foods];
 
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
 
 
    }
} //--Done--//
-(void)addSpritesForFoods1:(NSSet *)foods {
    for (Food *food in foods) {
 
        spriteTexture = [foodSprites textureNamed:[food spriteName1]];
 
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory1;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
 
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
 
        [self foodCategories1:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods2:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName2]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory2;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
        
        [self foodCategories2:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods3:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName3]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory3;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
        
        [self foodCategories3:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods4:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName4]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory4;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
        
        [self foodCategories4:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods5:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName5]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory5;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
        
        [self foodCategories5:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods6:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName6]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory6;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
        
        [self foodCategories6:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods7:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName7]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory7;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
        
        [self foodCategories7:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods8:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName8]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory8;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
        
        [self foodCategories8:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods9:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName9]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory9;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory | wallCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory | batCategory | wallCategory;
        
        [sprite runAction:[SKAction sequence:@[[SKAction scaleTo:0.4 duration:0],[SKAction scaleTo:1 duration:1]]]];
        
        [self foodCategories9:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods10:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName10]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory10;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        
        [self foodCategories10:foods];
        
        
    }
} //--Done--//
-(void)addSpritesForFoods11:(NSSet *)foods {
    for (Food *food in foods) {
        
        spriteTexture = [foodSprites textureNamed:[food spriteName11]];
        
        sprite = [SKSpriteNode spriteNodeWithTexture:spriteTexture];
        sprite.position = [self pointForFood:food.spawn];
        sprite.size = CGSizeMake(sprite.frame.size.width/s, sprite.frame.size.height / s);
        sprite.zPosition = 3;
        [self.foodsLayer addChild:sprite];
        food.sprite = sprite;
        [sprite setName:kAnimalNodeName];
        sprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:sprite.size];
        sprite.physicsBody.categoryBitMask = foodCategory11;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | eatRadiusCategory | foodBlowerCategory;
        
        
        [self foodCategories11:foods];
        
        
    }
} //--Done--//
-(void)foodCategories:(NSSet *)foods {
    
    
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        
        if ([food.spriteName  isEqual: @"Apple"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName  isEqual: @"RedBellPepper"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName  isEqual: @"Broccoli"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName  isEqual: @"Carrot"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName  isEqual: @"Orange"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAFruit = YES;
            
            
        }
        if ([food.spriteName  isEqual: @"Pear"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName  isEqual: @"Watermelon"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName  isEqual: @"Corn"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName  isEqual: @"Potato"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName  isEqual: @"Banana"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
    }
    
    if (canHelp == YES ) {
    [self activateHelp];
    }
    
    if (foodBlowReggy == YES) {
        [self foodBlowAnim];
    }
    
} //--Make Sure Values are Correct and equal to objective--//
-(void)foodCategories1:(NSSet *)foods {
    
    
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        if ([food.spriteName1  isEqual: @"Pomegranite"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName1  isEqual: @"Cherry"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName1  isEqual: @"Onion"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName1  isEqual: @"Celery"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAVeggy = YES;
            
            
        }
        if ([food.spriteName1  isEqual: @"GreenGrapes"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName1  isEqual: @"Coconut"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName1  isEqual: @"ChiliPepper"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName1  isEqual: @"Rutabaga"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName1  isEqual: @"Kiwi"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName1  isEqual: @"CherryPie"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName1  isEqual: @"BrusselSprouts"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName1  isEqual: @"Pizza"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective--//
-(void)foodCategories2:(NSSet *)foods {
    
    
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        if ([food.spriteName2  isEqual: @"PineApple"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName2  isEqual: @"Asparaus"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName2  isEqual: @"Avocado"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName2  isEqual: @"BeetrRoot"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName2  isEqual: @"Lime"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAFruit = YES;
            
            
        }
        if ([food.spriteName2  isEqual: @"ButternutSquash"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth5Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth15Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth20Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName2  isEqual: @"DelicataSquash"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName2  isEqual: @"Clementines"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName2  isEqual: @"StrawBerry"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName2  isEqual: @"IceCream"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName2  isEqual: @"Chips"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName2  isEqual: @"Twix"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth1Point = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth4Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName2  isEqual: @"Garlic"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective--//
-(void)foodCategories3:(NSSet *)foods {
    
    
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isAEggPlant = NO;
        self.isAPumpkin = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        
        if ([food.spriteName3  isEqual: @"Radish"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName3  isEqual: @"EggPlant"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAEggPlant = YES;
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName3  isEqual: @"Nectarine"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAFruit = YES;
            self.isANectarine = YES;
            
        }
        if ([food.spriteName3  isEqual: @"Mushroom"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName3  isEqual: @"Fig"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName3  isEqual: @"YellowBellPepper"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName3  isEqual: @"Pumpkin"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAVeggy = YES;
            self.isAPumpkin = YES;
            
        }
        if ([food.spriteName3  isEqual: @"Lettuce"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName3  isEqual: @"Mango"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth5Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth15Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth20Points = YES;
            }
            self.isAFruit = YES;
        }
        if ([food.spriteName3  isEqual: @"Lemon"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName3  isEqual: @"Guava"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName3  isEqual: @"Jelly"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName3  isEqual: @"LoliPop"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective--//
-(void)foodCategories4:(NSSet *)foods {
    
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        
        if ([food.spriteName4  isEqual: @"VictoriaPlum"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName4  isEqual: @"Beet"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth5Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth15Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth20Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName4  isEqual: @"Cardoon"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName4  isEqual: @"Cucumber"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth16Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth24Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth32Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName4  isEqual: @"Turnip"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth5Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth15Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth20Points = YES;
            }
            self.isAVeggy = YES;
            
            
        }
        if ([food.spriteName4  isEqual: @"PeanutButter"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName4  isEqual: @"CupCake"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName4  isEqual: @"Eugenia"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName4  isEqual: @"GingerRoot"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName4  isEqual: @"GalioMuskMelon"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName4  isEqual: @"Peanut"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth16Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName4  isEqual: @"Tomato"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName4  isEqual: @"Quince"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective--//
-(void)foodCategories5:(NSSet *)foods {
    
    
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isASourSop = NO;
        self.isADiakon = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        if ([food.spriteName5  isEqual: @"Ugli"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName5  isEqual: @"HoneyDewMelon"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName5  isEqual: @"BokChoy"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth7Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth14Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth21Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth28Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName5  isEqual: @"Cassava"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName5  isEqual: @"Zucini"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName5  isEqual: @"CollardGreens"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth16Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth24Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth32Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName5  isEqual: @"CornDog"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth18Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName5  isEqual: @"Twinky"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth18Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName5  isEqual: @"Pickle"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth16Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth24Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth32Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName5  isEqual: @"Diakon"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            self.isADiakon = YES;
            
        }
        if ([food.spriteName5  isEqual: @"Olives"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName5  isEqual: @"GingerRoot"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName5  isEqual: @"SourSop"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAFruit = YES;
            self.isASourSop = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective--//
-(void)foodCategories6:(NSSet *)foods {
    
    
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        
        if ([food.spriteName6  isEqual: @"Chayote"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Cilantro"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Citron"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth16Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth24Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth32Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Dasheen"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth16Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth24Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth32Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Achoccha"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Artichoke"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName6  isEqual: @"AsianRadish"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName6  isEqual: @"GreenChilliPepper"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth12Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth24Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName6  isEqual: @"SugarApple"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth16Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth24Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth32Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Ackee"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Rambutan"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Brownie"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Taco"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Burger"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName6  isEqual: @"Cake"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth2Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth4Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth8Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective--//
-(void)foodCategories7:(NSSet *)foods {
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isAOca = NO;
        self.isAHornedCucumber = NO;
        self.isAMangoSteen = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        if ([food.spriteName7  isEqual: @"Endive"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth16Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth24Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth32Points = YES;
            }
            self.isAVeggy = YES;
        }
        if ([food.spriteName7  isEqual: @"Yam"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth8Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth16Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth24Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth32Points = YES;
            }
            self.isAVeggy = YES;
        }
        if ([food.spriteName7  isEqual: @"Fennel"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName7  isEqual: @"Leek"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName7  isEqual: @"Steak"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName7  isEqual: @"HotDog"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName7  isEqual: @"Butter"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth3Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth6Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth12Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName7  isEqual: @"HornedCucumber"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAFruit = YES;
            self.isAHornedCucumber = YES;
            
        }
        if ([food.spriteName7  isEqual: @"Durain"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName7  isEqual: @"MangoSteen"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAFruit = YES;
            self.isAMangoSteen = YES;
            
        }
        if ([food.spriteName7  isEqual: @"Cherimoya"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName7  isEqual: @"MonsteraDeliciosa"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName7  isEqual: @"Oca"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAVeggy = YES;
            self.isAOca = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective and add Foods--//
-(void)foodCategories8:(NSSet *)foods {
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        self.isADragonFruit = NO;
        self.isASalsify = NO;
        self.isASunchok = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        self.isWorth11Points = NO;
        self.isWorth12Points = NO;
        self.isWorth13Points = NO;
        self.isWorth14Points = NO;
        self.isWorth15Points = NO;
        self.isWorth16Points = NO;
        self.isWorth17Points = NO;
        self.isWorth18Points = NO;
        self.isWorth19Points = NO;
        self.isWorth20Points = NO;
        self.isWorth21Points = NO;
        self.isWorth22Points = NO;
        self.isWorth23Points = NO;
        self.isWorth24Points = NO;
        self.isWorth25Points = NO;
        self.isWorth26Points = NO;
        self.isWorth27Points = NO;
        self.isWorth28Points = NO;
        self.isWorth29Points = NO;
        self.isWorth30Points = NO;
        self.isWorth31Points = NO;
        self.isWorth32Points = NO;
        self.isWorth33Points = NO;
        self.isWorth34Points = NO;
        self.isWorth35Points = NO;
        self.isWorth36Points = NO;
        self.isWorth37Points = NO;
        self.isWorth38Points = NO;
        self.isWorth39Points = NO;
        self.isWorth40Points = NO;
        
        //------NONE------//
        if ([food.spriteName8  isEqual: @"Kahlrabi"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAVeggy = YES;
        }
        if ([food.spriteName8  isEqual: @"Salsify"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            self.isASalsify = YES;
        }
        if ([food.spriteName8  isEqual: @"Celeriac"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName8  isEqual: @"Moniac"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName8  isEqual: @"Sunchok"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAVeggy = YES;
            self.isASunchok = YES;
            
        }
        if ([food.spriteName8  isEqual: @"AguajeFruit"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName8  isEqual: @"JackFruit"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName8  isEqual: @"Capuaca"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName8  isEqual: @"Pepino"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth9Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth18Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth27Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth36Points = YES;
            }
            self.isAFruit = YES;
            
        }
        if ([food.spriteName8  isEqual: @"DragonFruit"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth20Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth30Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth40Points = YES;
            }
            self.isAFruit = YES;
            self.isADragonFruit = YES;
            
        }
        if ([food.spriteName8  isEqual: @"Candy"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth5Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth15Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth20Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName8  isEqual: @"Chicken"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth5Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth15Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth20Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName8  isEqual: @"ChimiChunga"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth5Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth15Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth20Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ([food.spriteName8  isEqual: @"RiceKrispy"]) {
            
            if ((self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
                self.isWorth5Points = YES;
            }
            if ((self.activateDP == YES) & (canActivateDP == YES)) {
                self.isWorth10Points = YES;
            }
            if ((self.activateTP == YES) & (canActivateTP == YES)) {
                self.isWorth15Points = YES;
            }
            if ((self.activateQP == YES) & (canActivateQP == YES)) {
                self.isWorth20Points = YES;
            }
            self.isAOther = YES;
            
        }
        if ((self.activateDP == YES) & (canActivateDP == YES)) {
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ((self.activateTP == YES) & (canActivateTP == YES)) {
            TPAmount -= 1;
            NSLog(@"TPamount:" @"%d", TPAmount);
            if (TPAmount == 0) {
                [self deActivatedTP];
            }
        }
        if ((self.activateQP == YES) & (canActivateQP == YES)) {
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective and add Foods--//
-(void)foodCategories9:(NSSet *)foods {
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isAOther = NO;
        
        if ([food.spriteName9  isEqual: @"Apple"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"RedBellPepper"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Broccoli"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Carrot"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Orange"]) {
            
            self.isAFruit = YES;
            
            
        }
        if ([food.spriteName9  isEqual: @"Pear"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Watermelon"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Corn"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Potato"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Banana"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Pomegranite"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Cherry"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Onion"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Celery"]) {
            
            self.isAVeggy = YES;
            
            
        }
        if ([food.spriteName9  isEqual: @"GreenGrapes"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Coconut"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"ChiliPepper"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Rutabaga"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Kiwi"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"CherryPie"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"BrusselSprouts"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Pizza"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"PineApple"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Asparaus"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Avocado"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"BeetrRoot"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Lime"]) {
            
            self.isAFruit = YES;
            
            
        }
        if ([food.spriteName9  isEqual: @"ButternutSquash"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"DelicataSquash"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Clementines"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"StrawBerry"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"IceCream"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Chips"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Twix"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Garlic"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Radish"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"EggPlant"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Nectarine"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Mushroom"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Fig"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"YellowBellPepper"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Pumpkin"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Lettuce"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Mango"]) {
            
            self.isAFruit = YES;
        }
        if ([food.spriteName9  isEqual: @"Lemon"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Guava"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Jelly"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"LoliPop"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"VictoriaPlum"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Beet"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Cardoon"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Cucumber"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Turnip"]) {
            
            self.isAVeggy = YES;
            
            
        }
        if ([food.spriteName9  isEqual: @"PeanutButter"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"CupCake"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Eugenia"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"GingerRoot"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"GalioMuskMelon"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Peanut"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Tomato"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Quince"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Ugli"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"HoneyDewMelon"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"BokChoy"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Cassava"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Zucini"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"CollardGreens"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"CornDog"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Twinky"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Pickle"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Diakon"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Olives"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"GingerRoot"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"SourSop"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Chayote"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Cilantro"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Citron"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Dasheen"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Achoccha"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Artichoke"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"AsianRadish"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"GreenChilliPepper"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"SugarApple"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Ackee"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Rambutan"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Brownie"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Taco"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Burger"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Cake"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Endive"]) {
            
            self.isAVeggy = YES;
        }
        if ([food.spriteName9  isEqual: @"Yam"]) {
            
            self.isAVeggy = YES;
        }
        if ([food.spriteName9  isEqual: @"Fennel"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Leek"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Steak"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"HotDog"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Butter"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"HornedCucumber"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Durain"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"MangoSteen"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Cherimoya"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"MonsteraDeliciosa"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Oca"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Kahlrabi"]) {
            
            self.isAVeggy = YES;
        }
        if ([food.spriteName9  isEqual: @"Salsify"]) {
            
            self.isAVeggy = YES;
        }
        if ([food.spriteName9  isEqual: @"Celeriac"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Moniac"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Sunchok"]) {
            
            self.isAVeggy = YES;
            
        }
        if ([food.spriteName9  isEqual: @"AguajeFruit"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"JackFruit"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Capuaca"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Pepino"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"DragonFruit"]) {
            
            self.isAFruit = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Candy"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"Chicken"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"ChimiChunga"]) {
            
            self.isAOther = YES;
            
        }
        if ([food.spriteName9  isEqual: @"RiceKrispy"]) {
            
            self.isAOther = YES;
            
        }
        
        if (canBat == YES ) {
        if (self.isAVeggy == YES){
            ReggyBot.xScale = -1;
        }
        if (self.isAFruit == YES){
            ReggyBot.xScale = 1;
        }
        }
        //self.isAFruit = NO;
        //self.isAVeggy = NO;
        //self.isAOther = NO;
        
    }
    
} //--Make Sure Values are Correct and equal to objective and add Foods--//
-(void)foodCategories10:(NSSet *)foods {
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        
        //------NONE------//
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        
        //------DOUBLEPOINTS------//
        
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        
        //------TRIPLEPOINTS------//
        
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        
        //------QUADPOINTS------//
        
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        
        if (self.isAFruit == YES) {
            self.isAVeggy = NO;
            self.isAOther = NO;
            //NSLog(@"fruit");
        }
        
        if (self.isAVeggy == YES) {
            self.isAFruit = NO;
            self.isAOther = NO;
            //NSLog(@"veggy");
        }
        if (self.isAOther == YES) {
            self.isAFruit = NO;
            self.isAVeggy = NO;
        }
        if (self.isWorth1Point == YES) {
            
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth2Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth3Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth4Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth5Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth6Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth7Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth8Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth9Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth10Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective and add Foods--//
-(void)foodCategories11:(NSSet *)foods {
    
    
    
    for (Food *food in foods){
        
        self.isAFruit = NO;
        self.isAVeggy = NO;
        self.isWorth1Point = NO;
        self.isWorth2Points = NO;
        self.isWorth3Points = NO;
        self.isWorth4Points = NO;
        self.isWorth5Points = NO;
        self.isWorth6Points = NO;
        self.isWorth7Points = NO;
        self.isWorth8Points = NO;
        self.isWorth9Points = NO;
        self.isWorth10Points = NO;
        
        //------NONE------//
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == NO) & (self.activateTP == NO) & (self.activateQP == NO)) {
            
            
            
        }
        
        //------DOUBLEPOINTS------//
        
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateDP == YES) & (canActivateDP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        
        //------TRIPLEPOINTS------//
        
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateTP == YES) & (canActivateTP == YES)) {
            
            
            DPAmount -= 1;
            NSLog(@"DPamount:" @"%d", DPAmount);
            if (DPAmount == 0) {
                [self deActivatedDP];
            }
        }
        
        //------QUADPOINTS------//
        
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
            
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        if ([food.spriteName  isEqual: @""] & (self.activateQP == YES) & (canActivateQP == YES)) {
            
            
            QPAmount -= 1;
            NSLog(@"QPamount:" @"%d", QPAmount);
            if (QPAmount == 0) {
                [self deActivatedQP];
            }
        }
        
        if (self.isAFruit == YES) {
            self.isAVeggy = NO;
            self.isAOther = NO;
            //NSLog(@"fruit");
        }
        
        if (self.isAVeggy == YES) {
            self.isAFruit = NO;
            self.isAOther = NO;
            //NSLog(@"veggy");
        }
        if (self.isAOther == YES) {
            self.isAFruit = NO;
            self.isAVeggy = NO;
        }
        if (self.isWorth1Point == YES) {
            
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth2Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth3Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth4Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth5Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth6Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth7Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth8Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth9Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth9Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth10Points = NO;
        }
        if (self.isWorth10Points == YES) {
            
            self.isWorth1Point = NO;
            self.isWorth2Points = NO;
            self.isWorth3Points = NO;
            self.isWorth4Points = NO;
            self.isWorth5Points = NO;
            self.isWorth6Points = NO;
            self.isWorth7Points = NO;
            self.isWorth8Points = NO;
            self.isWorth9Points = NO;
        }
    }
    
    if (canHelp == YES ) {
        [self activateHelp];
    }
} //--Make Sure Values are Correct and equal to objective and add Foods--//*/
-(void)removeFood {
    
    
    [sprite removeFromParent];
    self.isAFruit = NO;
    self.isAVeggy = NO;
    self.isAOther = NO;
    self.isWorth1Point = NO;
    self.isWorth2Points = NO;
    self.isWorth3Points = NO;
    self.isWorth4Points = NO;
    self.isWorth5Points = NO;
    self.isWorth6Points = NO;
    self.isWorth7Points = NO;
    self.isWorth8Points = NO;
    self.isWorth9Points = NO;
    self.isWorth10Points = NO;
    self.isWorth11Points = NO;
    self.isWorth12Points = NO;
    self.isWorth13Points = NO;
    self.isWorth14Points = NO;
    self.isWorth15Points = NO;
    self.isWorth16Points = NO;
    self.isWorth17Points = NO;
    self.isWorth18Points = NO;
    self.isWorth19Points = NO;
    self.isWorth20Points = NO;
    self.isWorth21Points = NO;
    self.isWorth22Points = NO;
    self.isWorth23Points = NO;
    self.isWorth24Points = NO;
    self.isWorth25Points = NO;
    self.isWorth26Points = NO;
    self.isWorth27Points = NO;
    self.isWorth28Points = NO;
    self.isWorth29Points = NO;
    self.isWorth30Points = NO;
    self.isWorth31Points = NO;
    self.isWorth32Points = NO;
    self.isWorth33Points = NO;
    self.isWorth34Points = NO;
    self.isWorth35Points = NO;
    self.isWorth36Points = NO;
    self.isWorth37Points = NO;
    self.isWorth38Points = NO;
    self.isWorth39Points = NO;
    self.isWorth40Points = NO;
    self.isANectarine = NO;
    self.isAPumpkin = NO;
    self.isAEggPlant = NO;
    self.isASourSop = NO;
    self.isADiakon = NO;
    self.isAOca = NO;
    self.isAMangoSteen = NO;
    self.isAHornedCucumber = NO;
    self.isADragonFruit = NO;
    self.isASunchok = NO;
    self.isASalsify = NO;
    
    
    
} //--Done--//
-(void)shuffle {
    
    int arc;
    
    if (arc > 4) {
        fd = arc4random() % 1+0.5;
    }
    if (arc < 3) {
        fd = 0;
    }
    if (arc > 6) {
        arc = 0;
    }
    
    if (gameOver == NO) {
    
    if (rankNumber == 0 | rankNumber == 1 | rankNumber == 2) {
        [self spawnFoodLevel1];
        //NSSet *newFood = [self.logic shuffle];
        //[self addSpritesForFoods:newFood];
    }
    if (rankNumber == 3 | rankNumber == 4 | rankNumber == 5) {
        [self spawnFoodLevel2];
        //NSSet *newFood1 = [self.logic shuffle1];
        //[self addSpritesForFoods1:newFood1];
    }
        if (rankNumber == 6 | rankNumber == 7 | rankNumber == 8) {
            [self spawnFoodLevel3];
        //NSSet *newFood2 = [self.logic shuffle2];
        //[self addSpritesForFoods2:newFood2];
    }
        if (rankNumber == 9 | rankNumber == 10 | rankNumber == 11) {
            [self spawnFoodLevel4];
        //NSSet *newFood3 = [self.logic shuffle3];
        //[self addSpritesForFoods3:newFood3];
    }
        if (rankNumber == 12 | rankNumber == 13 | rankNumber == 14) {
            [self spawnFoodLevel5];
        //NSSet *newFood4 = [self.logic shuffle4];
        //[self addSpritesForFoods4:newFood4];
    }
        if (rankNumber == 15 | rankNumber == 16 | rankNumber == 17) {
            [self spawnFoodLevel6];
       // NSSet *newFood5 = [self.logic shuffle5];
        //[self addSpritesForFoods5:newFood5];
    }
        if (rankNumber == 18 | rankNumber == 19 | rankNumber == 20) {
            [self spawnFoodLevel7];
        //NSSet *newFood6 = [self.logic shuffle6];
        //[self addSpritesForFoods6:newFood6];
    }
        if (rankNumber == 21 | rankNumber == 22 | rankNumber == 23) {
            [self spawnFoodLevel8];
        //NSSet *newFood7 = [self.logic shuffle7];
        //[self addSpritesForFoods7:newFood7];
    }
        if (rankNumber == 24 | rankNumber == 25 | rankNumber == 26) {
            [self performSelector:@selector(spawnFoodLevel9) withObject:nil afterDelay:fd];
            arc++;
        //[self.spriteLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:fd],[SKAction runBlock:^{
        //NSSet *newFood8 = [self.logic shuffle8];
        //[self addSpritesForFoods8:newFood8];
        //}]]]];
    }
        if ((rankNumber == 27 | rankNumber == 28 | rankNumber == 29) && (endB == NO)) {
            [self spawnFoodLevel10];
            
        //NSSet *newFood9 = [self.logic shuffle9];
        //[self addSpritesForFoods9:newFood9];
    }
    
    canSwipe = YES;
        if (rankNumber < 27) {
    if (self.activateHS10 == YES & canActivateHS10 == YES) {
        asNum--;
        SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
        [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
        [self timeRewindAnimations];
        if (asNum == 0) {
            [self deActivatedHS10];
        }
        
        if (self.rightWay == YES & canActivateHS10 == YES) {
            if (self.isAFruit == YES) {
                
            [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"LeftSwipe"];
            
            }
            if (self.isAVeggy == YES) {
                
            [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"RightSwipe"];
            
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
            [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"LeftSwipe"];
            
            }
            if (self.isAVeggy == YES) {
                
            [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"RightSwipe"];
            
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
    }
    if (self.activateHS20 == YES & canActivateHS20 == YES) {
        [self timeRewindAnimations];
        asNum--;
        SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
        [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
        if (asNum == 0) {
            [self deActivatedHS20];
        }
        
        if (self.rightWay == YES) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
    }
    if (self.activateHS30 == YES & canActivateHS30 == YES) {
        [self timeRewindAnimations];
        asNum--;
        SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
        [asNumLabel setText:[NSString stringWithFormat:@"%d", asNum]];
        if (asNum == 0) {
            [self deActivatedHS30];
        }
        
        if (self.rightWay == YES) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.rightWay == NO) {
            if (self.isAFruit == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeV]] withKey:@"LeftSwipe"];
                
            }
            if (self.isAVeggy == YES) {
                
                [sprite runAction:[SKAction sequence:@[[SKAction waitForDuration:0.7],autoSwipeF]] withKey:@"RightSwipe"];
                
            }
        }
        if (self.isAOther == YES) {
            
            [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
            
        }
    }
    }
}
    
} //--Done--//
- (CGPoint)pointForFood:(NSInteger)spawn  {
    return CGPointMake(spawn*SpawnWidth + SpawnWidth/2, spawn*SpawnHeight + SpawnHeight/2);
} //--Done--//
-(void)leftSwiped {
    if (canSwipe == YES & self.spriteLayer.paused == NO) {
        y = sprite.position.y;
        //NSLog(@"y Int:" @"%f", y);
        sprite.physicsBody.velocity = CGVectorMake(0, 0);
        self.physicsWorld.speed = 1;
        SKAction *sequence = [SKAction group:@[[SKAction moveToX:-500 duration:0.5],[SKAction rotateByAngle:M_2_PI duration:0.5]]];
        [sprite runAction:sequence withKey:@"LeftSwipe"];
        NSString *sound = [[NSBundle mainBundle]pathForResource:@" Whooosh" ofType:@"wav"];
        Woosh = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        Woosh.delegate = self;
        [Woosh play];
        if (canBlock == YES) {
            [self removeActionForKey:@"FlyBot2"];
            
            ReggyBot.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:ReggyBot.size];
            ReggyBot.physicsBody.dynamic = NO;
            ReggyBot.physicsBody.categoryBitMask = reggyBotCategory;
            sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | reggyBotCategory;
            sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | reggyBotCategory;
            
            ReggyFlashTexture = [ReggySheildSprites textureNamed:@"ReggyFlash1"];
            ReggyFlash = [SKSpriteNode spriteNodeWithTexture:ReggyFlashTexture];
            ReggyFlash.size = CGSizeMake(ReggyFlash.frame.size.width/s, ReggyFlash.frame.size.height / s);
            ReggyFlash.position = CGPointZero;
            ReggyFlash.zPosition = 3.31;
            ReggyFlash.xScale = -1;
            [self.spriteLayer addChild:ReggyFlash];
            
            SKAction *reggyFly = [SKAction sequence:@[[SKAction runBlock:^{
                ReggyBot.xScale = 1;
                SKAction *move = [SKAction sequence:@[[SKAction sequence:@[[SKAction moveTo:CGPointMake(-self.frame.size.width/3, y + (ReggyBot.frame.size.height)) duration:0.05]]]]];
                [ReggyBot runAction:move withKey:@"f1"];
                [ReggyFlash runAction:[SKAction sequence:@[[SKAction animateWithTextures:ReggyFlash_Anim_Start timePerFrame:0.083333333333333],[SKAction removeFromParent]]]];
                
            }]]];
            [self runAction:reggyFly];
        }
    }
    
} //--O O O O O O O O O O--//
-(void)rightSwiped {
    if (canSwipe == YES & self.spriteLayer.paused == NO) {
        y = sprite.position.y;
        //NSLog(@"y Int:" @"%f", y);
        sprite.physicsBody.velocity = CGVectorMake(0, 0);
        self.physicsWorld.speed = 1;
        SKAction *sequence = [SKAction group:@[[SKAction moveToX:500 duration:0.5],[SKAction rotateByAngle:M_2_PI duration:0.5]]];
        [sprite runAction:sequence withKey:@"RightSwipe"];
        NSString *sound = [[NSBundle mainBundle]pathForResource:@" Whooosh" ofType:@"wav"];
        Woosh = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        Woosh.delegate = self;
        [Woosh play];
        if (canBlock == YES) {
            [self removeActionForKey:@"FlyBot1"];
             
            ReggyBot.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:ReggyBot.size];
            ReggyBot.physicsBody.dynamic = NO;
            ReggyBot.physicsBody.categoryBitMask = reggyBotCategory;
            sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | reggyBotCategory;
            sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory | reggyBotCategory;
            
            ReggyFlashTexture = [ReggySheildSprites textureNamed:@"ReggyFlash1"];
            ReggyFlash = [SKSpriteNode spriteNodeWithTexture:ReggyFlashTexture];
            ReggyFlash.size = CGSizeMake(ReggyFlash.frame.size.width/s, ReggyFlash.frame.size.height / s);
            ReggyFlash.position = CGPointZero;
            ReggyFlash.zPosition = 3.31;
            ReggyFlash.xScale = 1;
            [self.spriteLayer addChild:ReggyFlash];
            
            SKAction *reggyFly = [SKAction sequence:@[[SKAction runBlock:^{
                
                ReggyBot.xScale = -1;
                SKAction *move = [SKAction sequence:@[[SKAction sequence:@[[SKAction moveTo:CGPointMake(self.frame.size.width/3, y + (ReggyBot.frame.size.height)) duration:0.05]]]]];
                [ReggyBot runAction:move withKey:@"f2"];
                [ReggyFlash runAction:[SKAction sequence:@[[SKAction animateWithTextures:ReggyFlash_Anim_Start timePerFrame:0.083333333333333],[SKAction removeFromParent]]]];
                
            }]]];
            [self runAction:reggyFly];
        }
    }
    
    
} //--O O O O O O O O O O--//
-(void)downSwiped {
    
    if (canSwipe == YES & self.spriteLayer.paused == NO) {
        y = sprite.position.y;
        //NSLog(@"y Int:" @"%f", y);
        sprite.physicsBody.velocity = CGVectorMake(0, 0);
        self.physicsWorld.speed = 1;
        SKAction *sequence = [SKAction group:@[[SKAction moveToY:-500 duration:0.5],[SKAction rotateByAngle:M_2_PI duration:0.5]]];
        [sprite runAction:sequence withKey:@"DownSwipe"];
        NSString *sound = [[NSBundle mainBundle]pathForResource:@" Whooosh" ofType:@"wav"];
        Woosh = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        Woosh.delegate = self;
        [Woosh play];
        
        }
    
}
-(void)gravityMove {
    
    if (g >= -4.5) {
    g = self.physicsWorld.gravity.dy;
    self.physicsWorld.gravity = CGVectorMake(0, g + -0.1);
    }
    NSLog(@"dyGravity:" @"%f", g);
    
}
-(void)gravityStabalizer {
    
    self.physicsWorld.gravity = CGVectorMake(0, -2.5);
    
}
-(void)gravityRandomizer {
    
    gr = arc4random() % 4;
    
    //g = self.physicsWorld.gravity.dy;
    
    self.physicsWorld.gravity = CGVectorMake(0, -(gr+1));
    
    NSLog(@"gravityRANDOMIZER:" @"%f", -(gr+1));
    
}
-(void)gravitySR {
    
    x = self.physicsWorld.speed;
    self.physicsWorld.speed = x;
    self.physicsWorld.speed = x/2;
    
}

#pragma mark - Game Over

-(void)retrySprites {
    
    NSUserDefaults *defaults8 = [NSUserDefaults standardUserDefaults];
    [defaults8 setFloat:g forKey:@"GRVTY"];
    [defaults8 synchronize];
    
    //gravitySequence.speed = 0;
    sequenceFBG.speed = 0;
    sideFoodAnimSequence.speed = 0;
    invalidateTimer = NO;
    
    NMPointsLabel *gameOverPointsLabel = (NMPointsLabel *)[self childNodeWithName:@"gameOverPointsLabel"];
    NMPointsLabel *countDownLabel = (NMPointsLabel *)[self childNodeWithName:@"countDownLabel"];
    NMPointsLabel *foodCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"foodCollectedLabel"];
    NMPointsLabel *fruitsCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"fruitsCollectedLabel"];
    NMPointsLabel *vegetablesCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"vegetablesCollectedLabel"];
    NMPointsLabel *othersCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"othersCollectedLabel"];
    NMPointsLabel *foodsCountDownLabel = (NMPointsLabel *)[self childNodeWithName:@"foodsCountDownLabel"];
    
    NSUserDefaults *defaults1 = [NSUserDefaults standardUserDefaults];
    [defaults1 setInteger:gameOverPointsLabel.number forKey:@"GOPLN"];
    [defaults1 synchronize];
    
    NSUserDefaults *defaults2 = [NSUserDefaults standardUserDefaults];
    [defaults2 setInteger:countDownLabel.number forKey:@"CDLN"];
    [defaults2 synchronize];
    
    NSUserDefaults *defaults3 = [NSUserDefaults standardUserDefaults];
    [defaults3 setInteger:foodCollectedLabel.number forKey:@"FLN"];
    [defaults3 synchronize];
    
    NSUserDefaults *defaults4 = [NSUserDefaults standardUserDefaults];
    [defaults4 setInteger:fruitsCollectedLabel.number forKey:@"FRLN"];
    [defaults4 synchronize];
    
    NSUserDefaults *defaults5 = [NSUserDefaults standardUserDefaults];
    [defaults5 setInteger:vegetablesCollectedLabel.number forKey:@"VLN"];
    [defaults5 synchronize];
    
    NSUserDefaults *defaults6 = [NSUserDefaults standardUserDefaults];
    [defaults6 setInteger:othersCollectedLabel.number forKey:@"OLN"];
    [defaults6 synchronize];
    
    NSUserDefaults *defaults7 = [NSUserDefaults standardUserDefaults];
    [defaults7 setInteger:foodsCountDownLabel.number forKey:@"FCDLN"];
    [defaults7 synchronize];
    
    [self sideSpriteHide];
    [self removeSprites];
  
    gSBlackScreenTexture = [gameSceneSpritesEight textureNamed:@"FFGameSceneBlackScreen"];
    
    gSBlackScreen = [SKSpriteNode spriteNodeWithTexture:gSBlackScreenTexture];
    gSBlackScreen.size = CGSizeMake(gSBlackScreen.frame.size.width/s, gSBlackScreen.frame.size.height / s);
    gSBlackScreen.position = CGPointZero;
    gSBlackScreen.zPosition = 134;
    [self.spriteLayer addChild:gSBlackScreen];
   
    retryBoxTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneRetry"];
    
    retryBox = [SKSpriteNode spriteNodeWithTexture:retryBoxTexture];
    retryBox.size = CGSizeMake(retryBox.frame.size.width/s, retryBox.frame.size.height / s);
    retryBox.position = CGPointMake(-500, 0);
    retryBox.zPosition = 134.5;
    [self.spriteLayer addChild:retryBox];
    
    box991Texture = [gameSceneSpritesFive textureNamed:@"FFGameScene99Cent1"];
    
    box991 = [SKSpriteNode spriteNodeWithTexture:box991Texture];
    box991.size = CGSizeMake(box991.frame.size.width/s, box991.frame.size.height / s);
    box991.position = CGPointMake(-500, 0);
    box991.zPosition = 134.5;
    [self.spriteLayer addChild:box991];
    
    retryBox2Texture = [gameSceneSpritesFive textureNamed:@"FFGameSceneRetryPlus10"];
    
    retryBox2 = [SKSpriteNode spriteNodeWithTexture:retryBox2Texture];
    retryBox2.size = CGSizeMake(retryBox2.frame.size.width/s, retryBox2.frame.size.height / s);
    retryBox2.position = CGPointMake(500, 0);
    retryBox2.zPosition = 134.5;
    [self.spriteLayer addChild:retryBox2];
    
    box992Texture = [gameSceneSpritesFive textureNamed:@"FFGameScene99Cent2"];
    
    box992 = [SKSpriteNode spriteNodeWithTexture:box992Texture];
    box992.size = CGSizeMake(box992.frame.size.width/s, box992.frame.size.height / s);
    box992.position = CGPointMake(500, 0);
    box992.zPosition = 134.5;
    [self.spriteLayer addChild:box992];
    
    waitBoxTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneWait25"];
    
    waitBox = [SKSpriteNode spriteNodeWithTexture:waitBoxTexture];
    waitBox.size = CGSizeMake(waitBox.frame.size.width/s, waitBox.frame.size.height / s);
    waitBox.position = CGPointMake(0, -500);
    waitBox.zPosition = 134.5;
    [self.spriteLayer addChild:waitBox];
    
    pMBuyTexture = [buttonSprites textureNamed:@"FFGameSceneBuyButton1"];
    
    pMBuy = [SKSpriteNode spriteNodeWithTexture:pMBuyTexture];
    pMBuy.size = CGSizeMake(pMBuy.frame.size.width/s, pMBuy.frame.size.height / s);
    pMBuy.position = CGPointMake(500, 0);
    pMBuy.zPosition = 135;
    pMBuy.name = @"buyRetry1";
    [self.spriteLayer addChild:pMBuy];
    
    pMBuy1Texture = [buttonSprites textureNamed:@"FFGameSceneBuyButton2"];
    
    pMBuy1 = [SKSpriteNode spriteNodeWithTexture:pMBuy1Texture];
    pMBuy1.size = CGSizeMake(pMBuy1.frame.size.width/s, pMBuy1.frame.size.height / s);
    pMBuy1.position = CGPointMake(-500, 0);
    pMBuy1.zPosition = 135;
    pMBuy1.name = @"buyRetry2";
    [self.spriteLayer addChild:pMBuy1];
    
    okTexture = [buttonSprites textureNamed:@"FFGameSceneOkButton"];
    
    ok = [SKSpriteNode spriteNodeWithTexture:okTexture];
    ok.size = CGSizeMake(ok.frame.size.width/s, ok.frame.size.height / s);
    ok.position = CGPointMake(0, -500);
    ok.zPosition = 135;
    ok.name = @"OK";
    [self.spriteLayer addChild:ok];
    
    SKAction *rbSeq = [SKAction sequence:@[[SKAction moveByX:700 y:0 duration:0.33333333],[SKAction moveByX:-200 y:0 duration:0.16666667]]];
    SKAction *b991Seq = [SKAction sequence:@[[SKAction waitForDuration:0.08333333],[SKAction moveByX:700 y:0 duration:0.33333333],[SKAction moveByX:-200 y:0 duration:0.16666667]]];
    SKAction *buy1Seq = [SKAction sequence:@[[SKAction waitForDuration:0.16666667],[SKAction moveTo:CGPointMake(0, -self.frame.size.height/10) duration:0.33333333],[SKAction moveTo:CGPointMake(0, self.frame.size.height/5.9) duration:0.16666667]]];
    [retryBox runAction:rbSeq];
    [box991 runAction:b991Seq];
    [pMBuy runAction:buy1Seq];
    
    SKAction *rb2Seq = [SKAction sequence:@[[SKAction moveByX:-700 y:0 duration:0.33333333],[SKAction moveByX:200 y:0 duration:0.16666667]]];
    SKAction *b992Seq = [SKAction sequence:@[[SKAction waitForDuration:0.08333333],[SKAction moveByX:-700 y:0 duration:0.33333333],[SKAction moveByX:200 y:0 duration:0.16666667]]];
    SKAction *buy2Seq = [SKAction sequence:@[[SKAction waitForDuration:0.16666667],[SKAction moveTo:CGPointMake(0, -self.frame.size.height/15) duration:0.33333333],[SKAction moveTo:CGPointMake(0, -self.frame.size.height/10) duration:0.16666667]]];
    [retryBox2 runAction:rb2Seq];
    [box992 runAction:b992Seq];
    [pMBuy1 runAction:buy2Seq];
    
    SKAction *w25Seq = [SKAction sequence:@[[SKAction moveByX:0 y:700 duration:0.33333333],[SKAction moveByX:0 y:-200 duration:0.16666667]]];
    SKAction *okSeq = [SKAction sequence:@[[SKAction waitForDuration:0.16666667],[SKAction moveTo:CGPointMake(0, -self.frame.size.height/10) duration:0.33333333],[SKAction moveTo:CGPointMake(0, -self.frame.size.height/3.2) duration:0.16666667]]];
    [waitBox runAction:w25Seq];
    [ok runAction:okSeq];
    
    
} //--Done--//
-(void)showCongratsBoard {
    
    congradSpritesOne = [self textureAtlasNamed:@"CongradsBoardSpritesOne"];
    congradSpritesTwo = [self textureAtlasNamed:@"CongradBoardSpritesTwo"];
    SKTextureAtlas *congradSpritesThree = [self textureAtlasNamed:@"CongradsBoardSpritesThree"];
    congradSpritesThirteen = [self textureAtlasNamed:@"CongradsBoardSpritesThirteen"];
    
    congradsBoardTexture = [congradSpritesThree textureNamed:@"CongradBoard"];
    
    congradsBoard = [SKSpriteNode spriteNodeWithTexture:congradsBoardTexture];
    congradsBoard.size = CGSizeMake(congradsBoard.frame.size.width/s, congradsBoard.frame.size.height / s);
    congradsBoard.position = CGPointZero;
    congradsBoard.zPosition = 1000;
    [self.spriteLayer addChild:congradsBoard];
    
    congradsBoardAnimsTexture = [congradSpritesOne textureNamed:@"CongradBoardAnim0001"];
    
    congradsBoardAnims = [SKSpriteNode spriteNodeWithTexture:congradsBoardAnimsTexture];
    congradsBoardAnims.size = CGSizeMake(congradsBoardAnims.frame.size.width/s, congradsBoardAnims.frame.size.height / s);
    congradsBoardAnims.position = CGPointZero;
    congradsBoardAnims.zPosition = 1001.1;
    [self.spriteLayer addChild:congradsBoardAnims];
    
    money1Texture = [congradSpritesThirteen textureNamed:@"MoneyFallAnimA0001"];
    
    money1 = [SKSpriteNode spriteNodeWithTexture:money1Texture];
    money1.size = CGSizeMake(money1.frame.size.width/s, money1.frame.size.height / s);
    money1.position = CGPointZero;
    money1.zPosition = 10001;
    [self.spriteLayer addChild:money1];
    
    money2Texture = [congradSpritesThirteen textureNamed:@"MoneyFallAnimA0001"];
    
    money2 = [SKSpriteNode spriteNodeWithTexture:money2Texture];
    money2.size = CGSizeMake(money2.frame.size.width/s, money2.frame.size.height / s);
    money2.position = CGPointZero;
    money2.zPosition = 10001;
    [self.spriteLayer addChild:money2];
    
    if (rankNumber == 2) {
        
        congranSpritesFour = [self textureAtlasNamed:@"CongradsNoardSpritesFour"];
        lvlNumberTexture = [congranSpritesFour textureNamed:@"Lvl2Anim0001"];
        
    }
    if (rankNumber == 5) {
        
        congradSpritesFive = [self textureAtlasNamed:@"CongradsBoardsSpritesFive"];
        lvlNumberTexture = [congradSpritesFive textureNamed:@"Lvl3Anim0001"];
        
    }
    if (rankNumber == 8) {
        
        
        congradSpritesSix = [self textureAtlasNamed:@"CongradsBoardSpritesSix"];
        lvlNumberTexture = [congradSpritesSix textureNamed:@"Lvl4Anim0001"];
        
    }
    if (rankNumber == 11) {
        
        congradSpritesSeven = [self textureAtlasNamed:@"CongradsBoardSpritesSeven"];
        lvlNumberTexture = [congradSpritesSeven textureNamed:@"Lvl5Anim0001"];
        
    }
    if (rankNumber == 14) {
        
        congradSpritesEight = [self textureAtlasNamed:@"CongradsBoardSpritesEight"];
        lvlNumberTexture = [congradSpritesEight textureNamed:@"Lvl6Anim0001"];
        
    }
    if (rankNumber == 17) {
        
        congradSpritesNine = [self textureAtlasNamed:@"CongradsBoardSpritesNine"];
        lvlNumberTexture = [congradSpritesNine textureNamed:@"Lvl7Anim0001"];
        
    }
    if (rankNumber == 20) {
        
        congradSpritesTen = [self textureAtlasNamed:@"CongradsBoardSpritesTen"];
        lvlNumberTexture = [congradSpritesTen textureNamed:@"Lvl8Anim0001"];
        
    }
    if (rankNumber == 23) {
        
        congradSpritesEleven = [self textureAtlasNamed:@"CongradsBoardSpritesEleven"];
        lvlNumberTexture = [congradSpritesEleven textureNamed:@"Lvl9Anim0001"];
        
    }
    if (rankNumber == 26) {
        
        congradSpritesTwelve = [self textureAtlasNamed:@"CongradsBoardSpritesTwelve"];
        lvlNumberTexture = [congradSpritesTwelve textureNamed:@"Lvl10Anim0001"];
        
    }
    
    lvlNumber = [SKSpriteNode spriteNodeWithTexture:lvlNumberTexture];
    lvlNumber.size = CGSizeMake(lvlNumber.frame.size.width/s, lvlNumber.frame.size.height / s);
    lvlNumber.position = CGPointZero;
    lvlNumber.zPosition = 1001.1;
    [self.spriteLayer addChild:lvlNumber];
    
    congradsOkTexture = [buttonSprites textureNamed:@"CongradBoardOKButton"];
    
    congradsOk = [SKSpriteNode spriteNodeWithTexture:congradsOkTexture];
    congradsOk.size = CGSizeMake(congradsOk.frame.size.width/s, congradsOk.frame.size.height / s);
    congradsOk.position = CGPointMake(0, -self.frame.size.height/6.1);
    congradsOk.zPosition = 1000.2;
    congradsOk.name = @"CongradsOk";
    [self.spriteLayer addChild:congradsOk];
    
    SKAction *congradsAnim1 = [SKAction animateWithTextures:CongradBoard_Anim1_START timePerFrame:0.083333333333];
    SKAction *congradsAnim2 = [SKAction animateWithTextures:CongradBoard_Anim2_START timePerFrame:0.083333333333];
    SKAction *moneyAnim1 = [SKAction animateWithTextures:Money_Anim_START timePerFrame:0.083333333333];
    SKAction *moneyAnim2 = [SKAction animateWithTextures:Money_Anim_START timePerFrame:0.083333333333];
    
    SKAction *sequence1 = [SKAction sequence:@[congradsAnim1,[SKAction repeatActionForever:congradsAnim2]]];
    SKAction *sequence2 = [SKAction sequence:@[moneyAnim1]];
    SKAction *repeat1 = [SKAction sequence:@[[SKAction repeatAction:sequence2 count:cm],[SKAction removeFromParent]]];
    SKAction *wait = [SKAction waitForDuration:1.2];
    SKAction *sequence25 = [SKAction sequence:@[moneyAnim2]];
    SKAction *repeat2 = [SKAction repeatAction:sequence25 count:cm];
    SKAction *sequence26 = [SKAction sequence:@[wait,repeat2,[SKAction removeFromParent]]];
    
    
    [congradsBoardAnims runAction:sequence1];
    [money1 runAction:repeat1];
    [money2 runAction:sequence26];
    
    if (rankNumber == 2) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlTwo_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlTwo_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    if (rankNumber == 5) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlThree_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlThree_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    if (rankNumber == 8) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlFour_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlFour_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    if (rankNumber == 11) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlFive_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlFive_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    if (rankNumber == 14) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlSix_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlSix_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    if (rankNumber == 17) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlSeven_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlSeven_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    if (rankNumber == 20) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlEight_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlEight_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    if (rankNumber == 23) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlNine_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlNine_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    if (rankNumber == 26) {
        
        SKAction *lvlAnim1 = [SKAction animateWithTextures:LvlTen_Anim1_START timePerFrame:0.083333333333];
        SKAction *lvlAnim2 = [SKAction animateWithTextures:LvlTen_Anim2_START timePerFrame:0.083333333333];
        SKAction *sequence3 = [SKAction sequence:@[lvlAnim1, [SKAction repeatActionForever:lvlAnim2]]];
        [lvlNumber runAction:sequence3 withKey:@"LVLPop"];
        
    }
    
}
-(void)lifeMachines {
    
    
    RankLogic *gameCheck = [[RankLogic alloc]init];
    [gameCheck loadCurrentGameNumber];
    
    
    life1MachineBackgroundTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachineBackground"];
    
    life1MachineBackground = [SKSpriteNode spriteNodeWithTexture:life1MachineBackgroundTexture];
    life1MachineBackground.size = CGSizeMake(life1MachineBackground.frame.size.width/s, life1MachineBackground.frame.size.height / s);
    life1MachineBackground.position = CGPointZero;
    life1MachineBackground.zPosition = 151.1;
    [self.spriteLayer addChild:life1MachineBackground];
    
    life1MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine1"];
    
    life1Machine = [SKSpriteNode spriteNodeWithTexture:life1MachineTexture];
    life1Machine.size = CGSizeMake(life1Machine.frame.size.width/s, life1Machine.frame.size.height / s);
    life1Machine.position = CGPointZero;
    life1Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life1Machine];
    
    life2MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine2"];
    
    life2Machine = [SKSpriteNode spriteNodeWithTexture:life2MachineTexture];
    life2Machine.size = CGSizeMake(life2Machine.frame.size.width/s, life2Machine.frame.size.height / s);
    life2Machine.position = CGPointZero;
    life2Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life2Machine];
    
    life3MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine3"];
    
    life3Machine = [SKSpriteNode spriteNodeWithTexture:life3MachineTexture];
    life3Machine.size = CGSizeMake(life3Machine.frame.size.width/s, life3Machine.frame.size.height / s);
    life3Machine.position = CGPointZero;
    life3Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life3Machine];
    
    life4MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine4"];
    
    life4Machine = [SKSpriteNode spriteNodeWithTexture:life4MachineTexture];
    life4Machine.size = CGSizeMake(life4Machine.frame.size.width/s, life4Machine.frame.size.height / s);
    life4Machine.position = CGPointZero;
    life4Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life4Machine];
    
    life5MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine5"];
    
    life5Machine = [SKSpriteNode spriteNodeWithTexture:life5MachineTexture];
    life5Machine.size = CGSizeMake(life5Machine.frame.size.width/s, life5Machine.frame.size.height / s);
    life5Machine.position = CGPointZero;
    life5Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life5Machine];
    
    life6MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine6"];
    
    life6Machine = [SKSpriteNode spriteNodeWithTexture:life6MachineTexture];
    life6Machine.size = CGSizeMake(life6Machine.frame.size.width/s, life6Machine.frame.size.height / s);
    life6Machine.position = CGPointZero;
    life6Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life6Machine];
    
    life7MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine7"];
    
    life7Machine = [SKSpriteNode spriteNodeWithTexture:life7MachineTexture];
    life7Machine.size = CGSizeMake(life7Machine.frame.size.width/s, life7Machine.frame.size.height / s);
    life7Machine.position = CGPointZero;
    life7Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life7Machine];
    
    life8MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine8"];
    
    life8Machine = [SKSpriteNode spriteNodeWithTexture:life8MachineTexture];
    life8Machine.size = CGSizeMake(life8Machine.frame.size.width/s, life8Machine.frame.size.height / s);
    life8Machine.position = CGPointZero;
    life8Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life8Machine];
    
    life9MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine9"];
    
    life9Machine = [SKSpriteNode spriteNodeWithTexture:life9MachineTexture];
    life9Machine.size = CGSizeMake(life9Machine.frame.size.width/s, life9Machine.frame.size.height / s);
    life9Machine.position = CGPointZero;
    life9Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life9Machine];
    
    life10MachineTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachine10"];
    
    life10Machine = [SKSpriteNode spriteNodeWithTexture:life10MachineTexture];
    life10Machine.size = CGSizeMake(life10Machine.frame.size.width/s, life10Machine.frame.size.height / s);
    life10Machine.position = CGPointZero;
    life10Machine.zPosition = 151.11;
    [self.spriteLayer addChild:life10Machine];
    
    lifeMachineLocksTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneLifeMachineLock"];
    
    if (maxPlaysLvl == 0) {
        lifeMachineLocks = [SKSpriteNode spriteNodeWithTexture:lifeMachineLocksTexture];
        lifeMachineLocks.size = CGSizeMake(lifeMachineLocks.frame.size.width/s, lifeMachineLocks.frame.size.height / s);
        lifeMachineLocks.position = CGPointZero;
        lifeMachineLocks.zPosition = 151.2;
        [self.spriteLayer addChild:lifeMachineLocks];
    }
    
    if (maxPlaysLvl == 0) {
        lifeMachineUPGButtonTexture = [buttonSprites textureNamed:@"FFGameSceneLifeMachineUPGButton1"];
    }if (maxPlaysLvl == 1) {
        lifeMachineUPGButtonTexture = [buttonSprites textureNamed:@"FFGameSceneLifeMachineRFLButton"];
    }
    if (currentGameNumber > 0) {
    lifeMachineUPGButton = [SKSpriteNode spriteNodeWithTexture:lifeMachineUPGButtonTexture];
    lifeMachineUPGButton.position = CGPointMake(self.frame.size.width/2.33, self.frame.size.height/2.2);
    lifeMachineUPGButton.size = CGSizeMake(lifeMachineUPGButton.frame.size.width/s, lifeMachineUPGButton.frame.size.height / s);
    lifeMachineUPGButton.zPosition = 155;
    lifeMachineUPGButton.name = @"LMUPGB";
    [self.spriteLayer addChild:lifeMachineUPGButton];
    }
    
    NSArray *rflSeq = @[[SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton1"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton2"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton3"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton4"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton5"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton6"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton6"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton5"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton4"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton3"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton2"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton1"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton"]];
    NSArray *upgSeq = @[[SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton6"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton5"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton4"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton3"],
                        [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton1"]];
    NSArray *rflSeq1 = @[[SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton1"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton2"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton3"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton4"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton5"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineUPGButton6"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton5"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton4"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton3"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton2"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton1"],
                         [SKTexture textureWithImageNamed:@"FFGameSceneLifeMachineRFLButton"]];
    if (maxPlaysLvl == 0) {
        SKAction *seq = [SKAction sequence:@[[SKAction waitForDuration:3],
                                             [SKAction animateWithTextures:rflSeq timePerFrame:0.12],
                                             [SKAction waitForDuration:3],
                                             [SKAction animateWithTextures:upgSeq timePerFrame:0.12]]];
        SKAction *rep = [SKAction repeatActionForever:seq];
        [lifeMachineUPGButton runAction:rep];
    }
    if (maxPlaysLvl == 1) {
        SKAction *seq = [SKAction sequence:@[[SKAction waitForDuration:3],
                                             [SKAction animateWithTextures:rflSeq1 timePerFrame:0.12]]];
        SKAction *rep = [SKAction repeatActionForever:seq];
        [lifeMachineUPGButton runAction:rep];
    }
    SKAction *bswait = [SKAction waitForDuration:2];
    SKAction *bspop = [SKAction scaleBy:1.1 duration:1];
    SKAction *bsshribble = [SKAction scaleTo:1 duration:1.85];
    SKAction *bssequence = [SKAction sequence:@[bspop,bsshribble]];
    SKAction *bsrepeat = [SKAction repeatActionForever:bssequence];
    SKAction *bssequence1 = [SKAction sequence:@[bswait,bsrepeat]];
    [lifeMachineUPGButton runAction:bssequence1];
    
    if (currentGameNumber == 1 & maxPlaysLvl == 0 & beatObj == NO) {
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life5Machine runAction:seq withKey:@"L1"];
    }
    if (currentGameNumber == 2 & maxPlaysLvl == 0 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life5Machine runAction:remove];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life4Machine runAction:seq withKey:@"L2"];
    }
    if (currentGameNumber == 3 & maxPlaysLvl == 0 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life5Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life4Machine runAction:remove1];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life3Machine runAction:seq withKey:@"L3"];
    }
    if (currentGameNumber == 4 & maxPlaysLvl == 0 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life5Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life4Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life3Machine runAction:remove2];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life2Machine runAction:seq withKey:@"L4"];
    }
    if (currentGameNumber == 5 & maxPlaysLvl == 0 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life5Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life4Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life3Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life2Machine runAction:remove3];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life1Machine runAction:seq withKey:@"L5"];
    }
    
    //------------------------------------Max PlaysLvL 1--------------------------------------------\\
    
    if (currentGameNumber == 1 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life10Machine runAction:seq withKey:@"L6"];
    }
    if (currentGameNumber == 2 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life9Machine runAction:seq withKey:@"L7"];
    }
    if (currentGameNumber == 3 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life8Machine runAction:seq withKey:@"L8"];
    }
    if (currentGameNumber == 4 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life7Machine runAction:seq withKey:@"L9"];
    }
    if (currentGameNumber == 5 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life6Machine runAction:seq withKey:@"L10"];
    }
    if (currentGameNumber == 6 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life5Machine runAction:seq withKey:@"L11"];
    }
    if (currentGameNumber == 7 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *remove5 = [SKAction removeFromParent];
        [life5Machine runAction:remove5];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life4Machine runAction:seq withKey:@"L12"];
    }
    if (currentGameNumber == 8 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *remove5 = [SKAction removeFromParent];
        [life5Machine runAction:remove5];
        
        SKAction *remove6 = [SKAction removeFromParent];
        [life4Machine runAction:remove6];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life3Machine runAction:seq withKey:@"L13"];
    }
    if (currentGameNumber == 9 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *remove5 = [SKAction removeFromParent];
        [life5Machine runAction:remove5];
        
        SKAction *remove6 = [SKAction removeFromParent];
        [life4Machine runAction:remove6];
        
        SKAction *remove7 = [SKAction removeFromParent];
        [life3Machine runAction:remove7];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life2Machine runAction:seq withKey:@"L14"];
    }
    if (currentGameNumber == 10 & maxPlaysLvl == 1 & beatObj == NO) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *remove5 = [SKAction removeFromParent];
        [life5Machine runAction:remove5];
        
        SKAction *remove6 = [SKAction removeFromParent];
        [life4Machine runAction:remove6];
        
        SKAction *remove7 = [SKAction removeFromParent];
        [life3Machine runAction:remove7];
        
        SKAction *remove8 = [SKAction removeFromParent];
        [life2Machine runAction:remove8];
        
        SKAction *wait = [SKAction waitForDuration:3];
        SKAction *jump = [SKAction moveByX:0 y:20 duration:0.3];
        SKAction *fall = [SKAction moveByX:0 y:-1000 duration:0.8];
        SKAction *seq = [SKAction sequence:@[wait, jump, fall]];
        [life1Machine runAction:seq withKey:@"L15"];
    }
    
    //-----------------------------------WonMachines---------------------------------------------------\\
    
    if (currentGameNumber == 1 & maxPlaysLvl == 0 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life5Machine runAction:remove];
    }
    if (currentGameNumber == 2 & maxPlaysLvl == 0 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life5Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life4Machine runAction:remove1];
    }
    if (currentGameNumber == 3 & maxPlaysLvl == 0 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life5Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life4Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life3Machine runAction:remove2];
    }
    if (currentGameNumber == 4 & maxPlaysLvl == 0 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life5Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life4Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life3Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life2Machine runAction:remove3];
    }
    
    //------------------------------------Max PlaysLvL 1--------------------------------------------\\
    
    if (currentGameNumber == 1 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
    }
    if (currentGameNumber == 2 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
    }
    if (currentGameNumber == 3 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
    }
    if (currentGameNumber == 4 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
    }
    if (currentGameNumber == 5 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
    }
    if (currentGameNumber == 6 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *remove5 = [SKAction removeFromParent];
        [life5Machine runAction:remove5];
    }
    if (currentGameNumber == 7 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *remove5 = [SKAction removeFromParent];
        [life5Machine runAction:remove5];
        
        SKAction *remove6 = [SKAction removeFromParent];
        [life4Machine runAction:remove6];
    }
    if (currentGameNumber == 8 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *remove5 = [SKAction removeFromParent];
        [life5Machine runAction:remove5];
        
        SKAction *remove6 = [SKAction removeFromParent];
        [life4Machine runAction:remove6];
        
        SKAction *remove7 = [SKAction removeFromParent];
        [life3Machine runAction:remove7];
    }
    if (currentGameNumber == 9 & maxPlaysLvl == 1 & beatObj == YES) {
        SKAction *remove = [SKAction removeFromParent];
        [life10Machine runAction:remove];
        
        SKAction *remove1 = [SKAction removeFromParent];
        [life9Machine runAction:remove1];
        
        SKAction *remove2 = [SKAction removeFromParent];
        [life8Machine runAction:remove2];
        
        SKAction *remove3 = [SKAction removeFromParent];
        [life7Machine runAction:remove3];
        
        SKAction *remove4 = [SKAction removeFromParent];
        [life6Machine runAction:remove4];
        
        SKAction *remove5 = [SKAction removeFromParent];
        [life5Machine runAction:remove5];
        
        SKAction *remove6 = [SKAction removeFromParent];
        [life4Machine runAction:remove6];
        
        SKAction *remove7 = [SKAction removeFromParent];
        [life3Machine runAction:remove7];
        
        SKAction *remove8 = [SKAction removeFromParent];
        [life2Machine runAction:remove8];
        
    }
    
    RankLogic *saveRankNumbers = [[RankLogic alloc]init];
    [saveRankNumbers saveCurrentGameNumber];
    
} //--Done--//
-(void)gameNumberIncrement {
    RankLogic *gameUp = [[RankLogic alloc]init];
    [gameUp increment1];
} //--Done--//
-(void)sideSpriteHide {
    SKAction *sequenceLeft = [SKAction sequence:@[[SKAction moveByX:100 y:0 duration:0.2],
                                                  [SKAction moveByX:-200 y:0 duration:0.2],[SKAction removeFromParent]]];
    SKAction *sequenceRight = [SKAction sequence:@[[SKAction moveByX:-100 y:0 duration:0.2],
                                                   [SKAction moveByX:200 y:0 duration:0.2],[SKAction removeFromParent]]];
    [hourGlass10SP runAction:sequenceLeft];
    [hourGlass20SP runAction:sequenceLeft];
    [hourGlass30SP runAction:sequenceLeft];
    [doublePointsSP runAction:sequenceLeft];
    [triplePointsSP runAction:sequenceLeft];
    [quadPointsSP runAction:sequenceLeft];
    
    [headStart10SP runAction:sequenceRight];
    [headStart20SP runAction:sequenceRight];
    [headStart30SP runAction:sequenceRight];
    [extraLife1SP runAction:sequenceRight];
    [extraLife2SP runAction:sequenceRight];
    [extraLife3SP runAction:sequenceRight];
    
}
-(void)reggyTaunts {
    
    robotHeadTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneHead"];
    
    robotHead = [SKSpriteNode spriteNodeWithTexture:robotHeadTexture];
    robotHead.position = CGPointZero;
    robotHead.size = CGSizeMake(robotHead.frame.size.width/s, robotHead.frame.size.height / s);
    robotHead.zPosition = 160.1;
    [self.spriteLayer addChild:robotHead];
    
    if (rankNumber < 11) {
    reggyFaceTexture = [reggyTauntSprites textureNamed:@"TauntA1"];
    
    reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
    reggyFace.position = CGPointZero;
    reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height / s);
    reggyFace.zPosition = 160.11;
    [self.spriteLayer addChild:reggyFace];
    }
    if (rankNumber >= 11) {
        reggyFaceTexture = [reggyTauntSprites textureNamed:@"TauntLl34"];
        
        reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
        reggyFace.position = CGPointZero;
        reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height / s);
        reggyFace.zPosition = 160.11;
        [self.spriteLayer addChild:reggyFace];
    }
    
    if (canTaunt == YES) {
        if (rankNumber == 0 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntA = [SKAction animateWithTextures:TauntA_Anim_Start timePerFrame:0.08333333333];
            [reggyFace runAction:tauntA];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"CrushSomeCandy" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 0 & beatObj == YES) {
            
            SKAction *tauntA1 = [SKAction animateWithTextures:TauntAa_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntA1];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"FlukeOrLuck" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 1 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntB = [SKAction animateWithTextures:TauntB_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntB];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"CollectStamps" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 1 & beatObj == YES) {
            
            SKAction *tauntBb = [SKAction animateWithTextures:TauntBb_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntBb];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"YouWon" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 2 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntC = [SKAction animateWithTextures:TauntC_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntC];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"WhyEvenTryReally" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 2 & beatObj == YES) {
            
            SKAction *tauntCc = [SKAction animateWithTextures:TauntCc_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntCc];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Finally" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 3 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntD = [SKAction animateWithTextures:TauntD_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntD];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"LuckNotSkill" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 3 & beatObj == YES) {
            
            SKAction *tauntDd = [SKAction animateWithTextures:TauntDd_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntDd];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"DollarStore" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 4 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntE = [SKAction animateWithTextures:TauntE_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntE];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"NeverTry" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 4 & beatObj == YES) {
            
            SKAction *tauntEe = [SKAction animateWithTextures:TauntEe_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntEe];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"IveSeenBetter" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 5 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntF = [SKAction animateWithTextures:TauntF_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntF];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"RushFromLosing" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 5 & beatObj == YES) {
            
            SKAction *tauntFf = [SKAction animateWithTextures:TauntFf_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntFf];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"LosingSoMuch" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 6 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntG = [SKAction animateWithTextures:TauntG_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntG];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"NotForYou" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 6 & beatObj == YES) {
            
            SKAction *tauntGg = [SKAction animateWithTextures:TauntGg_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntGg];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"CongradulationsYouSuck" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 7 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntH = [SKAction animateWithTextures:TauntH_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntH];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"HereAgian" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 7 & beatObj == YES) {
            
            SKAction *tauntHh = [SKAction animateWithTextures:TauntHh_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntHh];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"JustBecauseYouWon" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 8 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntI = [SKAction animateWithTextures:TauntI_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntI];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"WhatsWrong" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 8 & beatObj == YES) {
            
            SKAction *tauntIi = [SKAction animateWithTextures:TauntIi_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntIi];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"IDontKnow" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 9 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntJ = [SKAction animateWithTextures:TauntJ_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntJ];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"YourSoBad" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 9 & beatObj == YES) {
            
            SKAction *tauntJj = [SKAction animateWithTextures:TauntJj_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntJj];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Finally2" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 10 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntK = [SKAction animateWithTextures:TauntK_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntK];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"YourHopeless" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 10 & beatObj == YES) { // Animate That Took Alot Of Effort \\
            
            SKAction *tauntKk = [SKAction animateWithTextures:TauntKk_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntKk];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"AlotofEffort" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 11 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntL = [SKAction animateWithTextures:TauntL_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntL];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"OverAndOver" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 11 & beatObj == YES) {
            
            SKAction *tauntLl = [SKAction animateWithTextures:TauntLl_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntLl];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"MyGrandma" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 12 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntM = [SKAction animateWithTextures:TauntM_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntM];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"ACalculator" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 12 & beatObj == YES) {
            
            SKAction *tauntMm = [SKAction animateWithTextures:TauntMm_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntMm];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"ImVerySuprised" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 13 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntN = [SKAction animateWithTextures:TauntN_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntN];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"QuitNow" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 13 & beatObj == YES) {
            
            SKAction *tauntNn = [SKAction animateWithTextures:TauntNn_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntNn];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"HumansMakeMeSick" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 14 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntO = [SKAction animateWithTextures:TauntO_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntO];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"YouDeservedThat" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 14 & beatObj == YES) {
            
            SKAction *tauntOo = [SKAction animateWithTextures:TauntOo_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntOo];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"ARealChallenge" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 15 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntP = [SKAction animateWithTextures:TauntP_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntP];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"TheMoreYouTry" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 15 & beatObj == YES) {
            
            SKAction *tauntPp = [SKAction animateWithTextures:TauntPp_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntPp];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Grrr" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 16 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntQ = [SKAction animateWithTextures:TauntQ_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntQ];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"WhyDontYouGetIt" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 16 & beatObj == YES) {
            
            SKAction *tauntQq = [SKAction animateWithTextures:TauntQq_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntQq];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"YouMustFeelSpecial" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        } // animate a teeth grind animation
        if (rankNumber == 17 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntR = [SKAction animateWithTextures:TauntR_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntR];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"EndOfYou" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 17 & beatObj == YES) {
            
            SKAction *tauntRr = [SKAction animateWithTextures:TauntRr_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntRr];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"GiveUpAlready" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 18 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntS = [SKAction animateWithTextures:TauntS_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntS];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Losaaa" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 18 & beatObj == YES) {
            
            SKAction *tauntSs = [SKAction animateWithTextures:TauntSs_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntSs];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Huuuuhhh" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 19 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntT = [SKAction animateWithTextures:TauntT_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntT];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Heh" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 19 & beatObj == YES) {
            
            SKAction *tauntTt = [SKAction animateWithTextures:TauntTt_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntTt];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Huuuuhhh2" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 20 & beatObj == NO & tauntInt == 5) {
            
            /*SKAction *tauntU = [SKAction animateWithTextures:TauntU_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntU];*/
            
            [reggyFace removeFromParent];
            
            reggyFaceTexture = [reggyTauntSprites textureNamed:@"TauntT1"];
            
            reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
            reggyFace.position = CGPointZero;
            reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height / s);
            reggyFace.zPosition = 102.11;
            [self.spriteLayer addChild:reggyFace];
            
        } //Smile Animation
        if (rankNumber == 20 & beatObj == YES) {
            
            SKAction *tauntUu = [SKAction animateWithTextures:TauntUu_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntUu];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Sigh" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 21 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntV = [SKAction animateWithTextures:TauntV_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntV];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"TakeMyAdvice" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 21 & beatObj == YES) {
            
            SKAction *tauntVv = [SKAction animateWithTextures:TauntVv_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntVv];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"LuckyHuman" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 22 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntW = [SKAction animateWithTextures:TauntW_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntW];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"WhatDidITellYa" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 22 & beatObj == YES) {
            
            SKAction *tauntWw = [SKAction animateWithTextures:TauntWw_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntWw];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Bugged" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 23 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntX = [SKAction animateWithTextures:TauntX_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntX];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"CrushedYourSpirit" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 23 & beatObj == YES) {
            
            SKAction *tauntXx = [SKAction animateWithTextures:TauntXx_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntXx];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"LeaveAndNeverComeBack" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 24 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntY = [SKAction animateWithTextures:TauntY_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntY];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"YouDeservedThat" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 24 & beatObj == YES) {
            
            SKAction *tauntYy = [SKAction animateWithTextures:TauntYy_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntYy];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"Ahh" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 25 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntZ = [SKAction animateWithTextures:TauntZ_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntZ];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"NeverFaceMe" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 25 & beatObj == YES) {
            
            SKAction *tauntZz = [SKAction animateWithTextures:TauntZz_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntZz];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"NothingToMe" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 26 & beatObj == NO & tauntInt == 5) {
            
            SKAction *tauntAA = [SKAction animateWithTextures:TauntAA_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntAA];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"InferiorLifeForm" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
        if (rankNumber == 26 & beatObj == YES) {
            
            SKAction *tauntAaA = [SKAction animateWithTextures:TauntAaA_Anim_Start timePerFrame:0.083333333];
            [reggyFace runAction:tauntAaA];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"ISwearToMicrosoft" ofType:@"wav"];
            taunt = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            taunt.delegate = self;
            [taunt play];
            
        }
    }
    if (canTaunt == NO) {
       
    }
    
    
    
    if (beatObj == NO) {
        tauntInt -= 1;
        canTaunt = NO;
        NSUserDefaults *defaultTaunt = [NSUserDefaults standardUserDefaults];
        [defaultTaunt setBool:canTaunt forKey:@"canTaunt"];
        [defaultTaunt synchronize];
    }
    
}
-(void)gameOverSprites {
    
    
    NMPointsLabel *gameOverPointsLabel = (NMPointsLabel *)[self childNodeWithName:@"gameOverPointsLabel"];
    NMPointsLabel *gameOverPointsLabel2 = (NMPointsLabel *)[self childNodeWithName:@"gameOverPointsLabel2"];
    NMPointsLabel *topLabel = (NMPointsLabel *)[self childNodeWithName:@"topLabel"];
    NMPointsLabel *PointsLabel = (NMPointsLabel *)[self childNodeWithName:@"PointsLabel"];
    NMPointsLabel *PointsLabel2 = (NMPointsLabel *)[self childNodeWithName:@"PointsLabel2"];
    PointsLabel.hidden = YES;
    PointsLabel2.hidden = YES;
    
    [timer invalidate];
    [timer2 invalidate];
    [timer05 invalidate];
    [congradsBoard removeFromParent];
    [congradsBoardAnims removeFromParent];
    [money1 removeFromParent];
    [money2 removeFromParent];
    [lvlNumber removeFromParent];
    [congradsOk removeFromParent];
    [key removeFromParent];
    [self sideSpriteHide];
    [helpButton removeFromParent];
    [helpButton removeAllActions];
    [self removeActionForKey:@"foodBlowerAnim"];
    prizeShineSprites = [self textureAtlasNamed:@"PrizeShineSprites"];
    
    
    if (canHelp == YES) {
        canHelp = NO;
    }
    
    
    canTaunt = YES;
    
    Data *FBCount = [[Data alloc]init];
    [FBCount loadAmountFB];
    
    NSUserDefaults *defaultsp = [NSUserDefaults standardUserDefaults];
    NSString *points = [defaultsp objectForKey:@"points"];
    [gameOverPointsLabel setText:points];
    [gameOverPointsLabel2 setText:points];
    
    topLabel.position = CGPointMake(-self.frame.size.width/18, self.frame.size.height/22);
    topLabel.fontSize = 20;
    topLabel.zPosition = 102.5;
    topLabel.fontColor = [UIColor blackColor];
    topLabel.colorBlendFactor = 1;
    [topLabel setPoints:scoreInput];
    
    NMPointsLabel *topLabel2 = (NMPointsLabel *)[self childNodeWithName:@"topLabel2"];
    topLabel2.position = CGPointMake(-self.frame.size.width/18, self.frame.size.height/22);
    topLabel2.fontSize = 20;
    topLabel2.zPosition = 102.4;
    topLabel2.fontColor = [UIColor greenColor];
    topLabel2.colorBlendFactor = 1;
    [topLabel2 setPoints:scoreInput];
    topLabel.hidden = NO;
    topLabel2.hidden = NO;
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    amountLabel.position = CGPointMake(self.frame.size.width/10, -self.frame.size.height/40);
    amountLabel.zPosition = 150;
    amountLabel.fontSize = 20;
    amountLabel.fontColor = [UIColor whiteColor];
    amountLabel.colorBlendFactor = 1;
    [amountLabel removeActionForKey:@"levelGuap"];
    amountLabel.hidden = NO;
    
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    kasbE.position = CGPointMake(self.frame.size.width/10, -self.frame.size.height/40);
    kasbE.zPosition = 149;
    kasbE.fontSize = 20;
    kasbE.fontColor = [UIColor blackColor];
    kasbE.colorBlendFactor = 1;
    [kasbE setPoints:amountLabel.amount];
    kasbE.hidden = NO;
    
    gameOverPointsLabel.zPosition = 102.5;
    gameOverPointsLabel.fontSize = 20;
    gameOverPointsLabel.fontColor = [UIColor blackColor];
    gameOverPointsLabel.colorBlendFactor = 1;
    gameOverPointsLabel.hidden = NO;
    
    gameOverPointsLabel2.zPosition = 102.4;
    gameOverPointsLabel2.fontSize = 20;
    gameOverPointsLabel2.fontColor = [UIColor greenColor];
    gameOverPointsLabel2.colorBlendFactor = 1;
    //[gameOverPointsLabel2 setPoints:gameOverPointsLabel.number];
    gameOverPointsLabel2.hidden = NO;
    
    
    if (prizeAquired == YES) {
        
        beatObj = YES;
        
        [startGame removeFromParent];
        [tutorial removeFromParent];
        [amountLabel setPoints:amountFB -= payAmount];
        [kasbE setPoints:amountLabel.amount];
        
        RankLogic *save = [[RankLogic alloc]init];
        [save saveRankValues];
        
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        [defaults setBool:beatObj forKey:@"beatObj"];
        [defaults synchronize];
        
        NSUserDefaults *defaults1 = [NSUserDefaults standardUserDefaults];
        [defaults1 setInteger:rankNumber forKey:@"rankNumber"];
        [defaults1 synchronize];
        
    }
    if (beatObj == NO) {
        
        gameOverTextTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGameOverText"];
        gameOverText = [SKSpriteNode spriteNodeWithTexture:gameOverTextTexture];
        gameOverText.position = CGPointZero;
        gameOverText.size = CGSizeMake(gameOverText.frame.size.width/s, gameOverText.frame.size.height / s);
        gameOverText.zPosition = 101.5;
        [self.spriteLayer addChild:gameOverText];
        
        gOPUHBuy1Texture = [buttonSprites textureNamed:@"FFGameSceneRecommendedBuy1"];
        
        gOPUHBuy1 = [SKSpriteNode spriteNodeWithTexture:gOPUHBuy1Texture];
        gOPUHBuy1.position = CGPointMake(-self.frame.size.width/3.3, -self.frame.size.height/2.2);
        gOPUHBuy1.size = CGSizeMake(gOPUHBuy1.frame.size.width/s, gOPUHBuy1.frame.size.height / s);
        gOPUHBuy1.zPosition = 106;
        [self.spriteLayer addChild:gOPUHBuy1];
        
        gOPUHBuy2Texture = [buttonSprites textureNamed:@"FFGameSceneRecommendedBuy2"];
        
        gOPUHBuy2 = [SKSpriteNode spriteNodeWithTexture:gOPUHBuy2Texture];
        gOPUHBuy2.position = CGPointMake(0, -self.frame.size.height/2.2);
        gOPUHBuy2.size = CGSizeMake(gOPUHBuy2.frame.size.width/s, gOPUHBuy2.frame.size.height / s);
        gOPUHBuy2.zPosition = 106;
        [self.spriteLayer addChild:gOPUHBuy2];
        
        gOPUHBuy3Texture = [buttonSprites textureNamed:@"FFGameSceneRecommendedBuy3"];
        
        gOPUHBuy3 = [SKSpriteNode spriteNodeWithTexture:gOPUHBuy3Texture];
        gOPUHBuy3.position = CGPointMake(self.frame.size.width/3.3, -self.frame.size.height/2.2);
        gOPUHBuy3.size = CGSizeMake(gOPUHBuy3.frame.size.width/s, gOPUHBuy3.frame.size.height / s);
        gOPUHBuy3.zPosition = 106;
        [self.spriteLayer addChild:gOPUHBuy3];
        
        [[self.spriteLayer childNodeWithName:@"tutorial"] removeFromParent];
        
        SKTextureAtlas *tutorialSprites = [self textureAtlasNamed:@"Tutorial"];
        SKTexture *tutTexture = [tutorialSprites textureNamed:@"Tutorial6"];
        SKSpriteNode *tut = [SKSpriteNode spriteNodeWithTexture:tutTexture];
        tut.position = CGPointZero;
        tut.zPosition = 150;
        tut.name = @"tutorial";
        tut.size = CGSizeMake(tut.frame.size.width/s, tut.frame.size.height/s);
        [self.spriteLayer addChild:tut];
        
    }
    
    if (beatObj == YES) {
        
        gameOverTextTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneVictoryText"];
        gameOverText = [SKSpriteNode spriteNodeWithTexture:gameOverTextTexture];
        gameOverText.position = CGPointZero;
        gameOverText.size = CGSizeMake(gameOverText.frame.size.width/s, gameOverText.frame.size.height / s);
        gameOverText.zPosition = 101.5;
        [self.spriteLayer addChild:gameOverText];
        
        nextButtonTexture = [buttonSprites textureNamed:@"FFGameSceneGameOverNext"];
        
        nextButton = [SKSpriteNode spriteNodeWithTexture:nextButtonTexture];
        nextButton.position = CGPointMake(0, 2000);
        nextButton.size = CGSizeMake(nextButton.frame.size.width/s, nextButton.frame.size.height / s);
        nextButton.name = @"NextButton";
        nextButton.zPosition = 104;
        [self.spriteLayer addChild:nextButton];
        
        replayButtonTexture = [buttonSprites textureNamed:@"FFGameSceneGameOverRestart"];
        
        replayButton = [SKSpriteNode spriteNodeWithTexture:replayButtonTexture];
        replayButton.position = CGPointMake(0, 2000);
        replayButton.size = CGSizeMake(replayButton.frame.size.width/s, replayButton.frame.size.height / s);
        replayButton.name = @"ReplayButton";
        replayButton.zPosition = 104;
        [self.spriteLayer addChild:replayButton];
        
        
        
    }
    if (beatObj == NO && ((currentGameNumber < 5 & maxPlaysLvl == 0) || (currentGameNumber < 10 & maxPlaysLvl == 1))) {
        
        replayButtonTexture = [buttonSprites textureNamed:@"FFGameSceneGameOverRestart"];
        
        replayButton = [SKSpriteNode spriteNodeWithTexture:replayButtonTexture];
        replayButton.position = CGPointMake(0, 2000);
        replayButton.size = CGSizeMake(replayButton.frame.size.width/s, replayButton.frame.size.height / s);
        replayButton.name = @"ReplayButton";
        replayButton.zPosition = 104;
        [self.spriteLayer addChild:replayButton];
    }
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    topRank = [defaults integerForKey:@"topRank"];
    
    if (rankNumber < topRank && ((currentGameNumber < 5 & maxPlaysLvl == 0) || (currentGameNumber < 10 & maxPlaysLvl == 1))) {
        
        nextButtonTexture = [buttonSprites textureNamed:@"FFGameSceneGameOverNext"];
        
        nextButton = [SKSpriteNode spriteNodeWithTexture:nextButtonTexture];
        nextButton.position = CGPointMake(0, 2000);
        nextButton.name = @"NextButton";
        nextButton.size = CGSizeMake(nextButton.frame.size.width/s, nextButton.frame.size.height / s);
        nextButton.zPosition = 104;
        [self.spriteLayer addChild:nextButton];
        
    }
    
    homeButtonTexture = [buttonSprites textureNamed:@"FFGameSceneGameOverHome"];
    
    homeButton = [SKSpriteNode spriteNodeWithTexture:homeButtonTexture];
    homeButton.position = CGPointMake(0, 2000);
    homeButton.size = CGSizeMake(homeButton.frame.size.width/s, homeButton.frame.size.height / s);
    homeButton.name = @"HomeButton";
    homeButton.zPosition = 105;
    [self.spriteLayer addChild:homeButton];
    
    backButtonTexture = [buttonSprites textureNamed:@"FFGameSceneGameOverBack"];
    
    backButton = [SKSpriteNode spriteNodeWithTexture:backButtonTexture];
    backButton.position = CGPointMake(0, 2000);
    backButton.size = CGSizeMake(backButton.frame.size.width/s, backButton.frame.size.height / s);
    backButton.name = @"BackButton";
    backButton.zPosition = 103;
    [self.spriteLayer addChild:backButton];
    
    blackScreenTexture = [gameSceneSpritesEight textureNamed:@"FFGameSceneBlackScreen"];
    
    blackScreen = [SKSpriteNode spriteNodeWithTexture:blackScreenTexture];
    blackScreen.position = CGPointZero;
    blackScreen.size = CGSizeMake(blackScreen.frame.size.width/s, blackScreen.frame.size.height / s);
    blackScreen.zPosition = 101;
    blackScreen.alpha = 0.1;
    [self.spriteLayer addChild:blackScreen];
    
    smokeTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSmoke1"];
    
    smoke = [SKSpriteNode spriteNodeWithTexture:smokeTexture];
    smoke.position = CGPointZero;
    smoke.size = CGSizeMake(smoke.frame.size.width/s, smoke.frame.size.height / s);
    smoke.zPosition = 102.2;
    [self.spriteLayer addChild:smoke];
    
    SKAction *sequence = [SKAction sequence:@[[SKAction animateWithTextures:Smoke_Anim_START timePerFrame:0.083333333],[SKAction removeFromParent]]];
    [smoke runAction:sequence completion:^{
        [self reggyTaunts];
    }];
    
    SKAction *gameOverFade = [SKAction fadeAlphaTo:0.1 duration:0.4];
    SKAction *gameOverColor = [SKAction fadeAlphaTo:1.0 duration:0.4];
    SKAction *gameOverSequence = [SKAction sequence:@[gameOverFade,gameOverColor]];
    SKAction *gameOverActionRepeatForever = [SKAction repeatActionForever:gameOverSequence];
    [gameOverText runAction:gameOverActionRepeatForever];
    
    SKAction *blackScreenWait = [SKAction waitForDuration:1.0];
    SKAction *blackScreenFade = [SKAction fadeAlphaTo:0.5 duration:0.4];
    SKAction *blackScreenSequence = [SKAction sequence:@[blackScreenWait, blackScreenFade]];
    [blackScreen runAction:blackScreenSequence];
    
    SKAction *homeButtonWait = [SKAction waitForDuration:1.8];
    SKAction *homeButtonMove = [SKAction moveTo:CGPointMake(0, 0) duration:1];
    SKAction *homeButtonBounce = [SKAction moveTo:CGPointMake(0, 20) duration:0.2];
    SKAction *homeButtonFall = [SKAction moveTo:CGPointMake(self.frame.size.width/2.9, 0) duration:0.2];
    SKAction *homeButtonSequence = [SKAction sequence:@[homeButtonWait,homeButtonMove,homeButtonBounce,homeButtonFall]];
    [homeButton runAction:homeButtonSequence];
    
    SKAction *replayButtonWait = [SKAction waitForDuration:2.0];
    SKAction *replayButtonMove = [SKAction moveTo:CGPointMake(0, 0) duration:1];
    SKAction *replayButtonBounce = [SKAction moveTo:CGPointMake(0, 20) duration:0.2];
    SKAction *replayButtonFall = [SKAction moveTo:CGPointMake(-self.frame.size.width/4, -self.frame.size.height/10) duration:0.2];
    SKAction *replayButtonSequence = [SKAction sequence:@[replayButtonWait,replayButtonMove,replayButtonBounce,replayButtonFall]];
    [replayButton runAction:replayButtonSequence];
    
    SKAction *nextButtonWait = [SKAction waitForDuration:2.0];
    SKAction *nextButtonMove = [SKAction moveTo:CGPointMake(0, 0) duration:1];
    SKAction *nextButtonBounce = [SKAction moveTo:CGPointMake(0, 20) duration:0.2];
    SKAction *nextButtonFall = [SKAction moveTo:CGPointMake(-self.frame.size.width/2.7, 0) duration:0.2];
    SKAction *nextButtonSequence = [SKAction sequence:@[nextButtonWait,nextButtonMove,nextButtonBounce,nextButtonFall]];
    [nextButton runAction:nextButtonSequence];
    
    SKAction *backButtonWait = [SKAction waitForDuration:2.2];
    SKAction *backButtonMove = [SKAction moveTo:CGPointMake(0, 0) duration:1];
    SKAction *backButtonBounce = [SKAction moveTo:CGPointMake(0, 20) duration:0.2];
    SKAction *backButtonFall = [SKAction moveTo:CGPointMake(self.frame.size.width/5, -self.frame.size.height/10) duration:0.2];
    SKAction *backButtonSequence = [SKAction sequence:@[backButtonWait,backButtonMove,backButtonBounce,backButtonFall]];
    [backButton runAction:backButtonSequence];
    
        if (pay == YES) {
            [amountLabel runAction:[SKAction repeatAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0.0 duration:0.2],[SKAction fadeAlphaTo:1 duration:0.2]]] count:8]];
            [kasbE runAction:[SKAction repeatAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0.0 duration:0.2],[SKAction fadeAlphaTo:1 duration:0.2]]] count:8]];
            SKAction *moneyAnim = [SKAction sequence:@[[SKAction waitForDuration:2.5],[SKAction runBlock:^{
            [self updateFactoryBucksLabel];
            }]]];
        [self runAction:moneyAnim];
        }
    
    [self removeSprites];
    [pause removeFromParent];
    [self lifeMachines];
    
    // LVL 1
    if (rankNumber == 0) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneShrimpScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftGlovesShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGlovesShine2"]];
        
        if (bronze101 == YES) {
            
            bronzeApple = [SKSpriteNode spriteNodeWithTexture:bronzeAppleTexture];
            bronzeApple.position = CGPointZero;
            bronzeApple.size = CGSizeMake(bronzeApple.frame.size.width/s, bronzeApple.frame.size.height / s);
            bronzeApple.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeApple];
        }
        
        if (silver101 == YES) {
            
            silverApple = [SKSpriteNode spriteNodeWithTexture:silverAppleTexture];
            silverApple.position = CGPointZero;
            silverApple.size = CGSizeMake(silverApple.frame.size.width/s, silverApple.frame.size.height / s);
            silverApple.zPosition = 102.12;
            [self.spriteLayer addChild:silverApple];
        }
        
        if (gold101 == YES) {
            if (prizeAquired == YES) {
                goldenAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftGloves"];
            }
            goldenApple = [SKSpriteNode spriteNodeWithTexture:goldenAppleTexture];
            goldenApple.position = CGPointZero;
            goldenApple.size = CGSizeMake(goldenApple.frame.size.width/s, goldenApple.frame.size.height / s);
            goldenApple.zPosition = 102.13;
            [self.spriteLayer addChild:goldenApple];
        }
        if (bronze102 == YES) {
            bronzeAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightGloves"];
            
            bronzeApple = [SKSpriteNode spriteNodeWithTexture:bronzeAppleTexture];
            bronzeApple.position = CGPointZero;
            bronzeApple.size = CGSizeMake(bronzeApple.frame.size.width/s, bronzeApple.frame.size.height / s);
            bronzeApple.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeApple];
        }
        
        if (silver102 == YES) {
            silverAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightGloves"];
            
            silverApple = [SKSpriteNode spriteNodeWithTexture:silverAppleTexture];
            silverApple.position = CGPointZero;
            silverApple.size = CGSizeMake(silverApple.frame.size.width/s, silverApple.frame.size.height / s);
            silverApple.zPosition = 102.12;
            [self.spriteLayer addChild:silverApple];
        }
        
        if (gold102 == YES) {
            goldenAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightGloves"];
            
            goldenApple = [SKSpriteNode spriteNodeWithTexture:goldenAppleTexture];
            goldenApple.position = CGPointZero;
            goldenApple.size = CGSizeMake(goldenApple.frame.size.width/s, goldenApple.frame.size.height / s);
            goldenApple.zPosition = 102.13;
            [self.spriteLayer addChild:goldenApple];
        }
        if (bronze103 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown10"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver103 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown10"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.51;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold103 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown10"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.51;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling10"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.52;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard1"];
        
        gOPUHBuy3.name = @"BuySR10";
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuyDP";
        
    }
    if (rankNumber == 1)   {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneShrimpScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightGlovesShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGlovesShine2"]];
        
        if (bronze102 == YES) {
            
            bronzeApple = [SKSpriteNode spriteNodeWithTexture:bronzeAppleTexture];
            bronzeApple.position = CGPointZero;
            bronzeApple.size = CGSizeMake(bronzeApple.frame.size.width/s, bronzeApple.frame.size.height / s);
            bronzeApple.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeApple];
            
        }
        
        if (silver102 == YES) {
            
            silverApple = [SKSpriteNode spriteNodeWithTexture:silverAppleTexture];
            silverApple.position = CGPointZero;
            silverApple.size = CGSizeMake(silverApple.frame.size.width/s, silverApple.frame.size.height / s);
            silverApple.zPosition = 102.12;
            [self.spriteLayer addChild:silverApple];
        }
        
        if (gold102 == YES) {
            if (prizeAquired == YES) {
                goldenAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightGloves"];
            }
            goldenApple = [SKSpriteNode spriteNodeWithTexture:goldenAppleTexture];
            goldenApple.position = CGPointZero;
            goldenApple.size = CGSizeMake(goldenApple.frame.size.width/s, goldenApple.frame.size.height / s);
            goldenApple.zPosition = 102.13;
            [self.spriteLayer addChild:goldenApple];
        }
        
        if (bronze101 == YES) {
            bronzeAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftGloves"];
            
            bronzeApple = [SKSpriteNode spriteNodeWithTexture:bronzeAppleTexture];
            bronzeApple.position = CGPointZero;
            bronzeApple.size = CGSizeMake(bronzeApple.frame.size.width/s, bronzeApple.frame.size.height / s);
            bronzeApple.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeApple];
        }
        
        if (silver101 == YES) {
            silverAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftGloves"];
            
            silverApple = [SKSpriteNode spriteNodeWithTexture:silverAppleTexture];
            silverApple.position = CGPointZero;
            silverApple.size = CGSizeMake(silverApple.frame.size.width/s, silverApple.frame.size.height / s);
            silverApple.zPosition = 102.12;
            [self.spriteLayer addChild:silverApple];
        }
        
        if (gold101 == YES) {
            goldenAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftGloves"];
            
            goldenApple = [SKSpriteNode spriteNodeWithTexture:goldenAppleTexture];
            goldenApple.position = CGPointZero;
            goldenApple.size = CGSizeMake(goldenApple.frame.size.width/s, goldenApple.frame.size.height / s);
            goldenApple.zPosition = 102.13;
            [self.spriteLayer addChild:goldenApple];
        }
        
        if (bronze103 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown10"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver103 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown10"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold103 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown10"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling10"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard2"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuySR10";
    }
    if (rankNumber == 2) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneShrimpScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameShrimpCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameShrimpCrownShine2"]];
        
        if (bronze102 == YES) {
            bronzeAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightGloves"];
            
            bronzeApple = [SKSpriteNode spriteNodeWithTexture:bronzeAppleTexture];
            bronzeApple.position = CGPointZero;
            bronzeApple.size = CGSizeMake(bronzeApple.frame.size.width/s, bronzeApple.frame.size.height / s);
            bronzeApple.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeApple];
        }
        if (silver102 == YES) {
            silverAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightGloves"];
            
            silverApple = [SKSpriteNode spriteNodeWithTexture:silverAppleTexture];
            silverApple.position = CGPointZero;
            silverApple.size = CGSizeMake(silverApple.frame.size.width/s, silverApple.frame.size.height / s);
            silverApple.zPosition = 102.12;
            [self.spriteLayer addChild:silverApple];
        }
        if (gold102 == YES) {
            goldenAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightGloves"];
            
            goldenApple = [SKSpriteNode spriteNodeWithTexture:goldenAppleTexture];
            goldenApple.position = CGPointZero;
            goldenApple.size = CGSizeMake(goldenApple.frame.size.width/s, goldenApple.frame.size.height / s);
            goldenApple.zPosition = 102.13;
            [self.spriteLayer addChild:goldenApple];
        }
        if (bronze101 == YES) {
            bronzeAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftGloves"];
            
            bronzeApple = [SKSpriteNode spriteNodeWithTexture:bronzeAppleTexture];
            bronzeApple.position = CGPointZero;
            bronzeApple.size = CGSizeMake(bronzeApple.frame.size.width/s, bronzeApple.frame.size.height / s);
            bronzeApple.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeApple];
        }
        if (silver101 == YES) {
            silverAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftGloves"];
            
            silverApple = [SKSpriteNode spriteNodeWithTexture:silverAppleTexture];
            silverApple.position = CGPointZero;
            silverApple.size = CGSizeMake(silverApple.frame.size.width/s, silverApple.frame.size.height / s);
            silverApple.zPosition = 102.12;
            [self.spriteLayer addChild:silverApple];
        }
        if (gold101 == YES) {
            goldenAppleTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftGloves"];
            
            goldenApple = [SKSpriteNode spriteNodeWithTexture:goldenAppleTexture];
            goldenApple.position = CGPointZero;
            goldenApple.size = CGSizeMake(goldenApple.frame.size.width/s, goldenApple.frame.size.height / s);
            goldenApple.zPosition = 102.13;
            [self.spriteLayer addChild:goldenApple];
        }
        if (bronze103 == YES) {
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver103 == YES) {
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.51;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold103 == YES) {
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.51;
            [self.spriteLayer addChild:goldCrown];
            
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.52;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard3"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuyDP";
        gOPUHBuy3.name = @"BuySR10";
    }
    // LVL 2
    if (rankNumber == 3) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueTangScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftAcornShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftAcornShine2"]];
        
        if (bronze201 == YES) {
            
            bronzeAcorn = [SKSpriteNode spriteNodeWithTexture:bronzeAcornTexture];
            bronzeAcorn.position = CGPointZero;
            bronzeAcorn.size = CGSizeMake(bronzeAcorn.frame.size.width/s, bronzeAcorn.frame.size.height / s);
            bronzeAcorn.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeAcorn];
            
        }
        
        if (silver201 == YES) {
            silverAcorn = [SKSpriteNode spriteNodeWithTexture:silverAcornTexture];
            silverAcorn.position = CGPointZero;
            silverAcorn.size = CGSizeMake(silverAcorn.frame.size.width/s, silverAcorn.frame.size.height / s);
            silverAcorn.zPosition = 102.12;
            [self.spriteLayer addChild:silverAcorn];
        }
        
        if (gold201 == YES) {
            if (prizeAquired == YES) {
                goldenAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftAcorn"];
            }
            goldenAcorn = [SKSpriteNode spriteNodeWithTexture:goldenAcornTexture];
            goldenAcorn.position = CGPointZero;
            goldenAcorn.size = CGSizeMake(goldenAcorn.frame.size.width/s, goldenAcorn.frame.size.height / s);
            goldenAcorn.zPosition = 102.13;
            [self.spriteLayer addChild:goldenAcorn];
        }
        if (bronze202 == YES) {
            bronzeAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightAcorn"];
            
            bronzeAcorn = [SKSpriteNode spriteNodeWithTexture:bronzeAcornTexture];
            bronzeAcorn.position = CGPointZero;
            bronzeAcorn.size = CGSizeMake(bronzeAcorn.frame.size.width/s, bronzeAcorn.frame.size.height / s);
            bronzeAcorn.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeAcorn];
        }
        
        if (silver202 == YES) {
            silverAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightAcorn"];
            
            silverAcorn = [SKSpriteNode spriteNodeWithTexture:silverAcornTexture];
            silverAcorn.position = CGPointZero;
            silverAcorn.size = CGSizeMake(silverAcorn.frame.size.width/s, silverAcorn.frame.size.height / s);
            silverAcorn.zPosition = 102.12;
            [self.spriteLayer addChild:silverAcorn];
        }
        
        if (gold202 == YES) {
            goldenAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightAcorn"];
            
            goldenAcorn = [SKSpriteNode spriteNodeWithTexture:goldenAcornTexture];
            goldenAcorn.position = CGPointZero;
            goldenAcorn.size = CGSizeMake(goldenAcorn.frame.size.width/s, goldenAcorn.frame.size.height / s);
            goldenAcorn.zPosition = 102.13;
            [self.spriteLayer addChild:goldenAcorn];
        }
        if (bronze203 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown6"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver203 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown6"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.51;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold203 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown6"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.51;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling6"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.52;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard4"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuyDP";
        gOPUHBuy3.name = @"BuySR10";
    }
    if (rankNumber == 4) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueTangScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightAcornShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightAcornShine2"]];
        
        if (bronze201 == YES) {
            
            bronzeAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftAcorn"];
            
            bronzeAcorn = [SKSpriteNode spriteNodeWithTexture:bronzeAcornTexture];
            bronzeAcorn.position = CGPointZero;
            bronzeAcorn.size = CGSizeMake(bronzeAcorn.frame.size.width/s, bronzeAcorn.frame.size.height / s);
            bronzeAcorn.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeAcorn];
            
        }
        
        if (silver201 == YES) {
            silverAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftAcorn"];
            
            silverAcorn = [SKSpriteNode spriteNodeWithTexture:silverAcornTexture];
            silverAcorn.position = CGPointZero;
            silverAcorn.size = CGSizeMake(silverAcorn.frame.size.width/s, silverAcorn.frame.size.height / s);
            silverAcorn.zPosition = 102.12;
            [self.spriteLayer addChild:silverAcorn];
        }
        
        if (gold201 == YES) {
            goldenAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftAcorn"];
            
            goldenAcorn = [SKSpriteNode spriteNodeWithTexture:goldenAcornTexture];
            goldenAcorn.position = CGPointZero;
            goldenAcorn.size = CGSizeMake(goldenAcorn.frame.size.width/s, goldenAcorn.frame.size.height / s);
            goldenAcorn.zPosition = 102.13;
            [self.spriteLayer addChild:goldenAcorn];
        }
        if (bronze202 == YES) {
            
            bronzeAcorn = [SKSpriteNode spriteNodeWithTexture:bronzeAcornTexture];
            bronzeAcorn.position = CGPointZero;
            bronzeAcorn.size = CGSizeMake(bronzeAcorn.frame.size.width/s, bronzeAcorn.frame.size.height / s);
            bronzeAcorn.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeAcorn];
        }
        
        if (silver202 == YES) {
            
            silverAcorn = [SKSpriteNode spriteNodeWithTexture:silverAcornTexture];
            silverAcorn.position = CGPointZero;
            silverAcorn.size = CGSizeMake(silverAcorn.frame.size.width/s, silverAcorn.frame.size.height / s);
            silverAcorn.zPosition = 102.12;
            [self.spriteLayer addChild:silverAcorn];
        }
        
        if (gold202 == YES) {
            if (prizeAquired == YES) {
                goldenAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightAcorn"];
            }
            goldenAcorn = [SKSpriteNode spriteNodeWithTexture:goldenAcornTexture];
            goldenAcorn.position = CGPointZero;
            goldenAcorn.size = CGSizeMake(goldenAcorn.frame.size.width/s, goldenAcorn.frame.size.height/s);
            goldenAcorn.zPosition = 102.13;
            [self.spriteLayer addChild:goldenAcorn];
        }
        if (bronze203 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown6"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeAcorn.size = CGSizeMake(bronzeAcorn.frame.size.width/s, bronzeAcorn.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver203 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown6"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold203 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown6"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling6"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard5"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuySR10";
    }
    if (rankNumber == 5) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueTangScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameBlueTangCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueTangCrownShine2"]];
        
        if (bronze202 == YES) {
            bronzeAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightAcorn"];
            
            bronzeAcorn = [SKSpriteNode spriteNodeWithTexture:bronzeAcornTexture];
            bronzeAcorn.position = CGPointZero;
            bronzeAcorn.size = CGSizeMake(bronzeAcorn.frame.size.width/s, bronzeAcorn.frame.size.height / s);
            bronzeAcorn.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeAcorn];
        }
        
        if (silver202 == YES) {
            silverAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightAcorn"];
            
            silverAcorn = [SKSpriteNode spriteNodeWithTexture:silverAcornTexture];
            silverAcorn.position = CGPointZero;
            silverAcorn.size = CGSizeMake(silverAcorn.frame.size.width/s, silverAcorn.frame.size.height / s);
            silverAcorn.zPosition = 102.12;
            [self.spriteLayer addChild:silverAcorn];
        }
        
        if (gold202 == YES) {
            goldenAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightAcorn"];
            
            goldenAcorn = [SKSpriteNode spriteNodeWithTexture:goldenAcornTexture];
            goldenAcorn.position = CGPointZero;
            goldenAcorn.size = CGSizeMake(goldenAcorn.frame.size.width/s, goldenAcorn.frame.size.height / s);
            goldenAcorn.zPosition = 102.13;
            [self.spriteLayer addChild:goldenAcorn];
        }
        if (bronze201 == YES) {
            
            bronzeAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftAcorn"];
            
            bronzeAcorn = [SKSpriteNode spriteNodeWithTexture:bronzeAcornTexture];
            bronzeAcorn.position = CGPointZero;
            bronzeAcorn.size = CGSizeMake(bronzeAcorn.frame.size.width/s, bronzeAcorn.frame.size.height / s);
            bronzeAcorn.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeAcorn];
            
        }
        
        if (silver201 == YES) {
            silverAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftAcorn"];
            
            silverAcorn = [SKSpriteNode spriteNodeWithTexture:silverAcornTexture];
            silverAcorn.position = CGPointZero;
            silverAcorn.size = CGSizeMake(silverAcorn.frame.size.width/s, silverAcorn.frame.size.height / s);
            silverAcorn.zPosition = 102.12;
            [self.spriteLayer addChild:silverAcorn];
        }
        
        if (gold201 == YES) {
            goldenAcornTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftAcorn"];
            
            goldenAcorn = [SKSpriteNode spriteNodeWithTexture:goldenAcornTexture];
            goldenAcorn.position = CGPointZero;
            goldenAcorn.size = CGSizeMake(goldenAcorn.frame.size.width/s, goldenAcorn.frame.size.height / s);
            goldenAcorn.zPosition = 102.13;
            [self.spriteLayer addChild:goldenAcorn];
        }
        if (bronze203 == YES) {
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver203 == YES) {
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold203 == YES) {
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard6"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuyTP";
    }
    // LVL 3
    if (rankNumber == 6) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneHermitCrabScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftGolfClubShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftGolfClubShine2"]];
        
        if (bronze301 == YES) {
            
            bronzeGolfClub = [SKSpriteNode spriteNodeWithTexture:bronzeGolfClubTexture];
            bronzeGolfClub.position = CGPointZero;
            bronzeGolfClub.size = CGSizeMake(bronzeGolfClub.frame.size.width/s, bronzeGolfClub.frame.size.height / s);
            bronzeGolfClub.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeGolfClub];
        }
        
        if (silver301 == YES) {
            
            silverGolfClub = [SKSpriteNode spriteNodeWithTexture:silverGolfClubTexture];
            silverGolfClub.position = CGPointZero;
            silverGolfClub.size = CGSizeMake(silverGolfClub.frame.size.width/s, silverGolfClub.frame.size.height / s);
            silverGolfClub.zPosition = 102.12;
            [self.spriteLayer addChild:silverGolfClub];
        }
        
        if (gold301 == YES) {
            if (showGoldGolfClub == YES) {
                goldenGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftGolfClub"];
            }
            goldenGolfClub = [SKSpriteNode spriteNodeWithTexture:goldenGolfClubTexture];
            goldenGolfClub.position = CGPointZero;
            goldenGolfClub.size = CGSizeMake(goldenGolfClub.frame.size.width/s, goldenGolfClub.frame.size.height / s);
            goldenGolfClub.zPosition = 102.51;
            [self.spriteLayer addChild:goldenGolfClub];
        }
        if (bronze302 == YES) {
            bronzeGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightGolfClub"];
            
            bronzeGolfClub = [SKSpriteNode spriteNodeWithTexture:bronzeGolfClubTexture];
            bronzeGolfClub.position = CGPointZero;
            bronzeGolfClub.size = CGSizeMake(bronzeGolfClub.frame.size.width/s, bronzeGolfClub.frame.size.height / s);
            bronzeGolfClub.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeGolfClub];
        }
        
        if (silver302 == YES) {
            silverGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightGolfClub"];
            
            silverGolfClub = [SKSpriteNode spriteNodeWithTexture:silverGolfClubTexture];
            silverGolfClub.position = CGPointZero;
            silverGolfClub.size = CGSizeMake(silverGolfClub.frame.size.width/s, silverGolfClub.frame.size.height / s);
            silverGolfClub.zPosition = 102.12;
            [self.spriteLayer addChild:silverGolfClub];
        }
        
        if (gold302 == YES) {
            goldenGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightGolfClub"];
            
            goldenGolfClub = [SKSpriteNode spriteNodeWithTexture:goldenGolfClubTexture];
            goldenGolfClub.position = CGPointZero;
            goldenGolfClub.size = CGSizeMake(goldenGolfClub.frame.size.width/s, goldenGolfClub.frame.size.height / s);
            goldenGolfClub.zPosition = 102.13;
            [self.spriteLayer addChild:goldenGolfClub];
        }
        if (bronze303 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown2"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeAcorn.size = CGSizeMake(bronzeAcorn.frame.size.width/s, bronzeAcorn.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver303 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown2"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.51;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold303 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown2"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.51;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling2"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.52;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard7"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuyEL2";
    }
    if (rankNumber == 7) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneHermitCrabScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightGolfClubShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightGolfClubShine2"]];
        
        if (bronze302 == YES) {
            
            bronzeGolfClub = [SKSpriteNode spriteNodeWithTexture:bronzeGolfClubTexture];
            bronzeGolfClub.position = CGPointZero;
            bronzeGolfClub.size = CGSizeMake(bronzeGolfClub.frame.size.width/s, bronzeGolfClub.frame.size.height / s);
            bronzeGolfClub.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeGolfClub];
        }
        
        if (silver302 == YES) {
            
            silverGolfClub = [SKSpriteNode spriteNodeWithTexture:silverGolfClubTexture];
            silverGolfClub.position = CGPointZero;
            silverGolfClub.size = CGSizeMake(silverGolfClub.frame.size.width/s, silverGolfClub.frame.size.height / s);
            silverGolfClub.zPosition = 102.12;
            [self.spriteLayer addChild:silverGolfClub];
        }
        
        if (gold302 == YES) {
            if (showGoldGolfClub == YES) {
                goldenGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightGolfClub"];
            }
            goldenGolfClub = [SKSpriteNode spriteNodeWithTexture:goldenGolfClubTexture];
            goldenGolfClub.position = CGPointZero;
            goldenGolfClub.size = CGSizeMake(goldenGolfClub.frame.size.width/s, goldenGolfClub.frame.size.height / s);
            goldenGolfClub.zPosition = 102.13;
            [self.spriteLayer addChild:goldenGolfClub];
        }
        
        if (bronze301 == YES) {
            bronzeGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftGolfClub"];
            
            bronzeGolfClub = [SKSpriteNode spriteNodeWithTexture:bronzeGolfClubTexture];
            bronzeGolfClub.position = CGPointZero;
            bronzeGolfClub.size = CGSizeMake(bronzeGolfClub.frame.size.width/s, bronzeGolfClub.frame.size.height / s);
            bronzeGolfClub.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeGolfClub];
        }
        
        if (silver301 == YES) {
            silverGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftGolfClub"];
            
            silverGolfClub = [SKSpriteNode spriteNodeWithTexture:silverGolfClubTexture];
            silverGolfClub.position = CGPointZero;
            silverGolfClub.size = CGSizeMake(silverGolfClub.frame.size.width/s, silverGolfClub.frame.size.height / s);
            silverGolfClub.zPosition = 102.12;
            [self.spriteLayer addChild:silverGolfClub];
        }
        
        if (gold301 == YES) {
            goldenGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftGolfClub"];
            
            goldenGolfClub = [SKSpriteNode spriteNodeWithTexture:goldenGolfClubTexture];
            goldenGolfClub.position = CGPointZero;
            goldenGolfClub.size = CGSizeMake(goldenGolfClub.frame.size.width/s, goldenGolfClub.frame.size.height / s);
            goldenGolfClub.zPosition = 102.51;
            [self.spriteLayer addChild:goldenGolfClub];
        }
        
        if (bronze303 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown2"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver303 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown2"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.51;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold303 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown2"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.51;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling2"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.52;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard8"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuyEL2";
    }
    if (rankNumber == 8) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneHermitCrabScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameHermitCrabCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameHermitCrabCrownShine2"]];
        
        if (bronze302 == YES) {
            bronzeGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightGolfClub"];
            
            bronzeGolfClub = [SKSpriteNode spriteNodeWithTexture:bronzeGolfClubTexture];
            bronzeGolfClub.position = CGPointZero;
            bronzeGolfClub.size = CGSizeMake(bronzeGolfClub.frame.size.width/s, bronzeGolfClub.frame.size.height / s);
            bronzeGolfClub.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeGolfClub];
        }
        
        if (silver302 == YES) {
            silverGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightGolfClub"];
            
            silverGolfClub = [SKSpriteNode spriteNodeWithTexture:silverGolfClubTexture];
            silverGolfClub.position = CGPointZero;
            silverGolfClub.size = CGSizeMake(silverGolfClub.frame.size.width/s, silverGolfClub.frame.size.height / s);
            silverGolfClub.zPosition = 102.12;
            [self.spriteLayer addChild:silverGolfClub];
        }
        
        if (gold302 == YES) {
            goldenGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightGolfClub"];
            
            goldenGolfClub = [SKSpriteNode spriteNodeWithTexture:goldenGolfClubTexture];
            goldenGolfClub.position = CGPointZero;
            goldenGolfClub.size = CGSizeMake(goldenGolfClub.frame.size.width/s, goldenGolfClub.frame.size.height / s);
            goldenGolfClub.zPosition = 102.13;
            [self.spriteLayer addChild:goldenGolfClub];
        }
        if (bronze301 == YES) {
            bronzeGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftGolfClub"];
            
            bronzeGolfClub = [SKSpriteNode spriteNodeWithTexture:bronzeGolfClubTexture];
            bronzeGolfClub.position = CGPointZero;
            bronzeGolfClub.size = CGSizeMake(bronzeGolfClub.frame.size.width/s, bronzeGolfClub.frame.size.height / s);
            bronzeGolfClub.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeGolfClub];
        }
        
        if (silver301 == YES) {
            silverGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftGolfClub"];
            
            silverGolfClub = [SKSpriteNode spriteNodeWithTexture:silverGolfClubTexture];
            silverGolfClub.position = CGPointZero;
            silverGolfClub.size = CGSizeMake(silverGolfClub.frame.size.width/s, silverGolfClub.frame.size.height / s);
            silverGolfClub.zPosition = 102.12;
            [self.spriteLayer addChild:silverGolfClub];
        }
        
        if (gold301 == YES) {
            goldenGolfClubTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftGolfClub"];
            
            goldenGolfClub = [SKSpriteNode spriteNodeWithTexture:goldenGolfClubTexture];
            goldenGolfClub.position = CGPointZero;
            goldenGolfClub.size = CGSizeMake(goldenGolfClub.frame.size.width/s, goldenGolfClub.frame.size.height / s);
            goldenGolfClub.zPosition = 102.51;
            [self.spriteLayer addChild:goldenGolfClub];
        }
        if (bronze303 == YES) {
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        if (silver303 == YES) {
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.51;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold303 == YES) {
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.51;
            [self.spriteLayer addChild:goldCrown];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.52;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard8"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuyEL2";
    }
    // LVL 4
    if (rankNumber == 9) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneOctopusScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftBarShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftBarShine2"]];
        
        if (bronze401 == YES) {
            
            
            bronzeBar = [SKSpriteNode spriteNodeWithTexture:bronzeBarTexture];
            bronzeBar.position = CGPointZero;
            bronzeBar.size = CGSizeMake(bronzeBar.frame.size.width/s, bronzeBar.frame.size.height / s);
            bronzeBar.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeBar];
        }
        if (silver401 == YES) {
            
            
            silverBar = [SKSpriteNode spriteNodeWithTexture:silverBarTexture];
            silverBar.position = CGPointZero;
            silverBar.size = CGSizeMake(silverBar.frame.size.width/s, silverBar.frame.size.height / s);
            silverBar.zPosition = 102.1;
            [self.spriteLayer addChild:silverBar];
        }
        if (gold401 == YES) {
            if (prizeAquired == YES) {
                goldenBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftBar"];
            }
            goldenBar = [SKSpriteNode spriteNodeWithTexture:goldenBarTexture];
            goldenBar.position = CGPointZero;
            goldenBar.size = CGSizeMake(goldenBar.frame.size.width/s, goldenBar.frame.size.height / s);
            goldenBar.zPosition = 102.1;
            [self.spriteLayer addChild:goldenBar];
        }
        if (bronze402 == YES) {
            bronzeBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightBar"];
            
            bronzeBar = [SKSpriteNode spriteNodeWithTexture:bronzeBarTexture];
            bronzeBar.position = CGPointZero;
            bronzeBar.size = CGSizeMake(bronzeBar.frame.size.width/s, bronzeBar.frame.size.height / s);
            bronzeBar.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeBar];
        }
        
        if (silver402 == YES) {
            silverBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightBar"];
            
            silverBar = [SKSpriteNode spriteNodeWithTexture:silverBarTexture];
            silverBar.position = CGPointZero;
            silverBar.size = CGSizeMake(silverBar.frame.size.width/s, silverBar.frame.size.height / s);
            silverBar.zPosition = 102.1;
            [self.spriteLayer addChild:silverBar];
        }
        
        if (gold402 == YES) {
            goldenBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightBar"];
            
            goldenBar = [SKSpriteNode spriteNodeWithTexture:goldenBarTexture];
            goldenBar.position = CGPointZero;
            goldenBar.size = CGSizeMake(goldenBar.frame.size.width/s, goldenBar.frame.size.height / s);
            goldenBar.zPosition = 102.1;
            [self.spriteLayer addChild:goldenBar];
        }
        if (bronze403 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown9"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver403 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown9"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold403 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown9"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling9"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard10"];
        
        gOPUHBuy1.name = @"BuyTR10";
        gOPUHBuy2.name = @"BuyEL1";
        gOPUHBuy3.name = @"BuySR20";
    }
    if (rankNumber == 10) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneOctopusScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightBarShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightBarShine2"]];
        
        if (bronze402 == YES) {
            
            
            bronzeBar = [SKSpriteNode spriteNodeWithTexture:bronzeBarTexture];
            bronzeBar.position = CGPointZero;
            bronzeBar.size = CGSizeMake(bronzeBar.frame.size.width/s, bronzeBar.frame.size.height / s);
            bronzeBar.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeBar];
        }
        
        if (silver402 == YES) {
            
            
            silverBar = [SKSpriteNode spriteNodeWithTexture:silverBarTexture];
            silverBar.position = CGPointZero;
            silverBar.size = CGSizeMake(silverBar.frame.size.width/s, silverBar.frame.size.height / s);
            silverBar.zPosition = 102.1;
            [self.spriteLayer addChild:silverBar];
        }
        
        if (gold402 == YES) {
            if (prizeAquired == YES) {
                goldenBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightBar"];
            }
            goldenBar = [SKSpriteNode spriteNodeWithTexture:goldenBarTexture];
            goldenBar.position = CGPointZero;
            goldenBar.size = CGSizeMake(goldenBar.frame.size.width/s, goldenBar.frame.size.height / s);
            goldenBar.zPosition = 102.1;
            [self.spriteLayer addChild:goldenBar];
        }
        
        if (bronze401 == YES) {
            bronzeBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftBar"];
            
            bronzeBar = [SKSpriteNode spriteNodeWithTexture:bronzeBarTexture];
            bronzeBar.position = CGPointZero;
            bronzeBar.size = CGSizeMake(bronzeBar.frame.size.width/s, bronzeBar.frame.size.height / s);
            bronzeBar.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeBar];
        }
        
        if (silver401 == YES) {
            silverBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftBar"];
            
            silverBar = [SKSpriteNode spriteNodeWithTexture:silverBarTexture];
            silverBar.position = CGPointZero;
            silverBar.size = CGSizeMake(silverBar.frame.size.width/s, silverBar.frame.size.height / s);
            silverBar.zPosition = 102.1;
            [self.spriteLayer addChild:silverBar];
        }
        
        if (gold401 == YES) {
            goldenBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftBar"];
            
            goldenBar = [SKSpriteNode spriteNodeWithTexture:goldenBarTexture];
            goldenBar.position = CGPointZero;
            goldenBar.size = CGSizeMake(goldenBar.frame.size.width/s, goldenBar.frame.size.height / s);
            goldenBar.zPosition = 102.1;
            [self.spriteLayer addChild:goldenBar];
        }
        
        if (bronze403 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown9"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver403 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown9"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold403 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown9"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling9"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard11"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuyEL2";
    }
    if (rankNumber == 11) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneOctopusScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameOctopusCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine2"]];
        
        if (bronze402 == YES) {
            bronzeBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightBar"];
            
            bronzeBar = [SKSpriteNode spriteNodeWithTexture:bronzeBarTexture];
            bronzeBar.position = CGPointZero;
            bronzeBar.size = CGSizeMake(bronzeBar.frame.size.width/s, bronzeBar.frame.size.height / s);
            bronzeBar.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeBar];
        }
        if (silver402 == YES) {
            silverBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightBar"];
            
            silverBar = [SKSpriteNode spriteNodeWithTexture:silverBarTexture];
            silverBar.position = CGPointZero;
            silverBar.size = CGSizeMake(silverBar.frame.size.width/s, silverBar.frame.size.height / s);
            silverBar.zPosition = 102.1;
            [self.spriteLayer addChild:silverBar];
        }
        if (gold402 == YES) {
            goldenBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightBar"];
            
            goldenBar = [SKSpriteNode spriteNodeWithTexture:goldenBarTexture];
            goldenBar.position = CGPointZero;
            goldenBar.size = CGSizeMake(goldenBar.frame.size.width/s, goldenBar.frame.size.height / s);
            goldenBar.zPosition = 102.1;
            [self.spriteLayer addChild:goldenBar];
        }
        if (bronze401 == YES) {
            bronzeBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftBar"];
            
            bronzeBar = [SKSpriteNode spriteNodeWithTexture:bronzeBarTexture];
            bronzeBar.position = CGPointZero;
            bronzeBar.size = CGSizeMake(bronzeBar.frame.size.width/s, bronzeBar.frame.size.height / s);
            bronzeBar.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeBar];
        }
        if (silver401 == YES) {
            silverBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftBar"];
            
            silverBar = [SKSpriteNode spriteNodeWithTexture:silverBarTexture];
            silverBar.position = CGPointZero;
            silverBar.size = CGSizeMake(silverBar.frame.size.width/s, silverBar.frame.size.height / s);
            silverBar.zPosition = 102.1;
            [self.spriteLayer addChild:silverBar];
        }
        if (gold401 == YES) {
            goldenBarTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftBar"];
            
            goldenBar = [SKSpriteNode spriteNodeWithTexture:goldenBarTexture];
            goldenBar.position = CGPointZero;
            goldenBar.size = CGSizeMake(goldenBar.frame.size.width/s, goldenBar.frame.size.height / s);
            goldenBar.zPosition = 102.1;
            [self.spriteLayer addChild:goldenBar];
        }
        if (bronze403 == YES) {
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        if (silver403 == YES) {
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        if (gold403 == YES) {
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard12"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuyEL2";
    }
    // LVL 5
    if (rankNumber == 12) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneSealScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftMicrophoneShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftMicrophoneShine2"]];
        
        if (bronze501 == YES) {
            
            
            bronzeMicrophone = [SKSpriteNode spriteNodeWithTexture:bronzeMicrophoneTexture];
            bronzeMicrophone.position = CGPointZero;
            bronzeMicrophone.size = CGSizeMake(bronzeMicrophone.frame.size.width/s, bronzeMicrophone.frame.size.height / s);
            bronzeMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeMicrophone];
            
        }
        
        if (silver501 == YES) {
            
            silverMicrophone = [SKSpriteNode spriteNodeWithTexture:silverMicrophoneTexture];
            silverMicrophone.position = CGPointZero;
            silverMicrophone.size = CGSizeMake(silverMicrophone.frame.size.width/s, silverMicrophone.frame.size.height / s);
            silverMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:silverMicrophone];
        }
        
        if (gold501 == YES) {
            if (prizeAquired == YES) {
                goldenMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftMicrophone"];
            }
            goldenMicrophone = [SKSpriteNode spriteNodeWithTexture:goldenMicrophoneTexture];
            goldenMicrophone.position = CGPointZero;
            goldenMicrophone.size = CGSizeMake(goldenMicrophone.frame.size.width/s, goldenMicrophone.frame.size.height / s);
            goldenMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:goldenMicrophone];
        }
        if (bronze502 == YES) {
            bronzeMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightMicrophone"];
            
            bronzeMicrophone = [SKSpriteNode spriteNodeWithTexture:bronzeMicrophoneTexture];
            bronzeMicrophone.position = CGPointZero;
            bronzeMicrophone.size = CGSizeMake(bronzeMicrophone.frame.size.width/s, bronzeMicrophone.frame.size.height / s);
            bronzeMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeMicrophone];
        }
        
        if (silver502 == YES) {
            silverMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightMicrophone"];
            
            silverMicrophone = [SKSpriteNode spriteNodeWithTexture:silverMicrophoneTexture];
            silverMicrophone.position = CGPointZero;
            silverMicrophone.size = CGSizeMake(silverMicrophone.frame.size.width/s, silverMicrophone.frame.size.height / s);
            silverMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:silverMicrophone];
        }
        
        if (gold502 == YES) {
            goldenMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightMicrophone"];
            
            goldenMicrophone = [SKSpriteNode spriteNodeWithTexture:goldenMicrophoneTexture];
            goldenMicrophone.position = CGPointZero;
            goldenMicrophone.size = CGSizeMake(goldenMicrophone.frame.size.width/s, goldenMicrophone.frame.size.height / s);
            goldenMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:goldenMicrophone];
        }
        if (bronze503 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown5"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver503 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown5"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold503 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown5"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling5"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard13"];
        
        gOPUHBuy1.name = @"BuyTR10";
        gOPUHBuy2.name = @"BuyEL2";
        gOPUHBuy3.name = @"BuySR20";
    }
    if (rankNumber == 13) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneSealScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightMicrophoneShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightMicrophoneShine2"]];
        
        if (bronze502 == YES) {
            
            bronzeMicrophone = [SKSpriteNode spriteNodeWithTexture:bronzeMicrophoneTexture];
            bronzeMicrophone.position = CGPointZero;
            bronzeMicrophone.size = CGSizeMake(bronzeMicrophone.frame.size.width/s, bronzeMicrophone.frame.size.height / s);
            bronzeMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeMicrophone];
        }
        
        if (silver502 == YES) {
            
            silverMicrophone = [SKSpriteNode spriteNodeWithTexture:silverMicrophoneTexture];
            silverMicrophone.position = CGPointZero;
            silverMicrophone.size = CGSizeMake(silverMicrophone.frame.size.width/s, silverMicrophone.frame.size.height / s);
            silverMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:silverMicrophone];
        }
        
        if (gold502 == YES) {
            if (prizeAquired == YES) {
                goldenMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightMicrophone"];
            }
            goldenMicrophone = [SKSpriteNode spriteNodeWithTexture:goldenMicrophoneTexture];
            goldenMicrophone.position = CGPointZero;
            goldenMicrophone.size = CGSizeMake(goldenMicrophone.frame.size.width/s, goldenMicrophone.frame.size.height / s);
            goldenMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:goldenMicrophone];
        }
        
        if (bronze501 == YES) {
            
            bronzeMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftMicrophone"];
            
            bronzeMicrophone = [SKSpriteNode spriteNodeWithTexture:bronzeMicrophoneTexture];
            bronzeMicrophone.position = CGPointZero;
            bronzeMicrophone.size = CGSizeMake(bronzeMicrophone.frame.size.width/s, bronzeMicrophone.frame.size.height / s);
            bronzeMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeMicrophone];
            
        }
        
        if (silver501 == YES) {
            silverMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftMicrophone"];
            
            silverMicrophone = [SKSpriteNode spriteNodeWithTexture:silverMicrophoneTexture];
            silverMicrophone.position = CGPointZero;
            silverMicrophone.size = CGSizeMake(silverMicrophone.frame.size.width/s, silverMicrophone.frame.size.height / s);
            silverMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:silverMicrophone];
        }
        
        if (gold501 == YES) {
            goldenMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftMicrophone"];
            
            goldenMicrophone = [SKSpriteNode spriteNodeWithTexture:goldenMicrophoneTexture];
            goldenMicrophone.position = CGPointZero;
            goldenMicrophone.size = CGSizeMake(goldenMicrophone.frame.size.width/s, goldenMicrophone.frame.size.height / s);
            goldenMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:goldenMicrophone];
        }
        
        if (bronze503 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown5"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver503 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown5"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold503 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown5"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling5"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard14"];
        
        gOPUHBuy1.name = @"BuyEL1";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuyEL2";
    }
    if (rankNumber == 14) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneSealScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameOctopusCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameOctopusCrownShine2"]];
        
        if (bronze502 == YES) {
            bronzeMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightMicrophone"];
            
            bronzeMicrophone = [SKSpriteNode spriteNodeWithTexture:bronzeMicrophoneTexture];
            bronzeMicrophone.position = CGPointZero;
            bronzeMicrophone.size = CGSizeMake(bronzeMicrophone.frame.size.width/s, bronzeMicrophone.frame.size.height / s);
            bronzeMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeMicrophone];
        }
        
        if (silver502 == YES) {
            silverMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightMicrophone"];
            
            silverMicrophone = [SKSpriteNode spriteNodeWithTexture:silverMicrophoneTexture];
            silverMicrophone.position = CGPointZero;
            silverMicrophone.size = CGSizeMake(silverMicrophone.frame.size.width/s, silverMicrophone.frame.size.height / s);
            silverMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:silverMicrophone];
        }
        
        if (gold502 == YES) {
            goldenMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightMicrophone"];
            
            goldenMicrophone = [SKSpriteNode spriteNodeWithTexture:goldenMicrophoneTexture];
            goldenMicrophone.position = CGPointZero;
            goldenMicrophone.size = CGSizeMake(goldenMicrophone.frame.size.width/s, goldenMicrophone.frame.size.height / s);
            goldenMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:goldenMicrophone];
        }
        if (bronze501 == YES) {
            
            bronzeMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftMicrophone"];
            
            bronzeMicrophone = [SKSpriteNode spriteNodeWithTexture:bronzeMicrophoneTexture];
            bronzeMicrophone.position = CGPointZero;
            bronzeMicrophone.size = CGSizeMake(bronzeMicrophone.frame.size.width/s, bronzeMicrophone.frame.size.height / s);
            bronzeMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeMicrophone];
            
        }
        
        if (silver501 == YES) {
            silverMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftMicrophone"];
            
            silverMicrophone = [SKSpriteNode spriteNodeWithTexture:silverMicrophoneTexture];
            silverMicrophone.position = CGPointZero;
            silverMicrophone.size = CGSizeMake(silverMicrophone.frame.size.width/s, silverMicrophone.frame.size.height / s);
            silverMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:silverMicrophone];
        }
        
        if (gold501 == YES) {
            
            goldenMicrophoneTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftMicrophone"];
            
            goldenMicrophone = [SKSpriteNode spriteNodeWithTexture:goldenMicrophoneTexture];
            goldenMicrophone.position = CGPointZero;
            goldenMicrophone.size = CGSizeMake(goldenMicrophone.frame.size.width/s, goldenMicrophone.frame.size.height / s);
            goldenMicrophone.zPosition = 102.1;
            [self.spriteLayer addChild:goldenMicrophone];
        }
        if (bronze503 == YES) {
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver503 == YES) {
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold503 == YES) {
            
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard15"];
        
        gOPUHBuy1.name = @"BuyEL2";
        gOPUHBuy2.name = @"BuySR20";
        gOPUHBuy3.name = @"BuyTP";
    } //save seal shine values
    // LVL 6
    if (rankNumber == 15) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueMarlinScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftChaliceShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftChaliceShine2"]];
        
        if (bronze601 == YES) {
            
            bronzeChalice = [SKSpriteNode spriteNodeWithTexture:bronzeChaliceTexture];
            bronzeChalice.position = CGPointZero;
            bronzeChalice.size = CGSizeMake(bronzeChalice.frame.size.width/s, bronzeChalice.frame.size.height / s);
            bronzeChalice.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeChalice];
            
        }
        
        if (silver601 == YES) {
            
            
            silverChalice = [SKSpriteNode spriteNodeWithTexture:silverChaliceTexture];
            silverChalice.position = CGPointZero;
            silverChalice.size = CGSizeMake(silverChalice.frame.size.width/s, silverChalice.frame.size.height / s);
            silverChalice.zPosition = 102.1;
            [self.spriteLayer addChild:silverChalice];
        }
        
        if (gold601 == YES) {
            if (prizeAquired == YES) {
                goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftChalice"];
            }
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        if (bronze602 == YES) {
            goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightChalice"];
            
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        
        if (silver602 == YES) {
            silverChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightChalice"];
            
            silverChalice = [SKSpriteNode spriteNodeWithTexture:silverChaliceTexture];
            silverChalice.position = CGPointZero;
            silverChalice.size = CGSizeMake(silverChalice.frame.size.width/s, silverChalice.frame.size.height / s);
            silverChalice.zPosition = 102.1;
            [self.spriteLayer addChild:silverChalice];
        }
        
        if (gold602 == YES) {
            goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightChalice"];
            
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        if (bronze603 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown4"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver603 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown4"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold603 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown4"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling4"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard16"];
        
        gOPUHBuy1.name = @"BuyTR10";
        gOPUHBuy2.name = @"BuyEL2";
        gOPUHBuy3.name = @"BuyTP";
    }
    if (rankNumber == 16) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueMarlinScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightChaliceShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightChaliceShine2"]];
        
        if (bronze602 == YES) {
            
            
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        
        if (silver602 == YES) {
            
            
            silverChalice = [SKSpriteNode spriteNodeWithTexture:silverChaliceTexture];
            silverChalice.position = CGPointZero;
            silverChalice.size = CGSizeMake(silverChalice.frame.size.width/s, silverChalice.frame.size.height / s);
            silverChalice.zPosition = 102.1;
            [self.spriteLayer addChild:silverChalice];
        }
        
        if (gold602 == YES) {
            if (prizeAquired == YES) {
                goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightChalice"];
            }
            
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        
        if (bronze601 == YES) {
            
            bronzeChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftChalice"];
            
            bronzeChalice = [SKSpriteNode spriteNodeWithTexture:bronzeChaliceTexture];
            bronzeChalice.position = CGPointZero;
            bronzeChalice.size = CGSizeMake(bronzeChalice.frame.size.width/s, bronzeChalice.frame.size.height / s);
            bronzeChalice.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeChalice];
            
        }
        
        if (silver601 == YES) {
            silverChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftChalice"];
            
            silverChalice = [SKSpriteNode spriteNodeWithTexture:silverChaliceTexture];
            silverChalice.position = CGPointZero;
            silverChalice.size = CGSizeMake(silverChalice.frame.size.width/s, silverChalice.frame.size.height / s);
            silverChalice.zPosition = 102.1;
            [self.spriteLayer addChild:silverChalice];
        }
        
        if (gold601 == YES) {
            goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftChalice"];
            
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        
        if (bronze603 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown4"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver603 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown4"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold603 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown4"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling4"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard17"];
        
        gOPUHBuy1.name = @"BuyTR10";
        gOPUHBuy2.name = @"BuyEL3";
        gOPUHBuy3.name = @"BuySR20";
    }
    if (rankNumber == 17) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueMarlinScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameBlueMarlinCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameBlueMarlinCrownShine2"]];
        
        if (bronze602 == YES) {
            goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightChalice"];
            
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        if (silver602 == YES) {
            silverChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightChalice"];
            
            silverChalice = [SKSpriteNode spriteNodeWithTexture:silverChaliceTexture];
            silverChalice.position = CGPointZero;
            silverChalice.size = CGSizeMake(silverChalice.frame.size.width/s, silverChalice.frame.size.height / s);
            silverChalice.zPosition = 102.1;
            [self.spriteLayer addChild:silverChalice];
        }
        if (gold602 == YES) {
            goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightChalice"];
            
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        if (bronze601 == YES) {
            
            bronzeChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftChalice"];
            
            bronzeChalice = [SKSpriteNode spriteNodeWithTexture:bronzeChaliceTexture];
            bronzeChalice.position = CGPointZero;
            bronzeChalice.size = CGSizeMake(bronzeChalice.frame.size.width/s, bronzeChalice.frame.size.height / s);
            bronzeChalice.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeChalice];
        }
        if (silver601 == YES) {
            silverChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftChalice"];
            
            silverChalice = [SKSpriteNode spriteNodeWithTexture:silverChaliceTexture];
            silverChalice.position = CGPointZero;
            silverChalice.size = CGSizeMake(silverChalice.frame.size.width/s, silverChalice.frame.size.height / s);
            silverChalice.zPosition = 102.1;
            [self.spriteLayer addChild:silverChalice];
        }
        if (gold601 == YES) {
            goldenChaliceTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftChalice"];
            
            goldenChalice = [SKSpriteNode spriteNodeWithTexture:goldenChaliceTexture];
            goldenChalice.position = CGPointZero;
            goldenChalice.size = CGSizeMake(goldenChalice.frame.size.width/s, goldenChalice.frame.size.height / s);
            goldenChalice.zPosition = 102.1;
            [self.spriteLayer addChild:goldenChalice];
        }
        if (bronze603 == YES) {
            
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver603 == YES) {
            
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold603 == YES) {
            
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard18"];
        
        gOPUHBuy1.name = @"BuyTR20";
        gOPUHBuy2.name = @"BuyEL3";
        gOPUHBuy3.name = @"BuySR30";
    }
    // LVL 7
    if (rankNumber == 18) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneDolphinScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftWatchShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftWatchShine2"]];
        
        if (bronze701 == YES) {
            
            
            bronzeWatch = [SKSpriteNode spriteNodeWithTexture:bronzeWatchTexture];
            bronzeWatch.position = CGPointZero;
            bronzeWatch.size = CGSizeMake(bronzeWatch.frame.size.width/s, bronzeWatch.frame.size.height / s);
            bronzeWatch.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeWatch];
        }
        
        if (silver701 == YES) {
            
            
            silverWatch = [SKSpriteNode spriteNodeWithTexture:silverWatchTexture];
            silverWatch.position = CGPointZero;
            silverWatch.size = CGSizeMake(silverWatch.frame.size.width/s, silverWatch.frame.size.height / s);
            silverWatch.zPosition = 102.1;
            [self.spriteLayer addChild:silverWatch];
        }
        
        if (gold701 == YES) {
            if (prizeAquired == YES) {
                goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftWatch"];
            }
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        if (bronze702 == YES) {
            goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightWatch"];
            
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        
        if (silver702 == YES) {
            silverWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightWatch"];
            
            silverWatch = [SKSpriteNode spriteNodeWithTexture:silverWatchTexture];
            silverWatch.position = CGPointZero;
            silverWatch.size = CGSizeMake(silverWatch.frame.size.width/s, silverWatch.frame.size.height / s);
            silverWatch.zPosition = 102.1;
            [self.spriteLayer addChild:silverWatch];
        }
        
        if (gold702 == YES) {
            goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightWatch"];
            
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        if (bronze703 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown8"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver703 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown8"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold703 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown8"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling8"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard19"];
        
        gOPUHBuy1.name = @"BuyTR20";
        gOPUHBuy2.name = @"BuyEL3";
        gOPUHBuy3.name = @"BuySR30";
    }
    if (rankNumber == 19) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneDolphinScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightWatchShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightWatchShine2"]];
        
        if (bronze702 == YES) {
            
            
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        
        if (silver702 == YES) {
            
            
            silverWatch = [SKSpriteNode spriteNodeWithTexture:silverWatchTexture];
            silverWatch.position = CGPointZero;
            silverWatch.size = CGSizeMake(silverWatch.frame.size.width/s, silverWatch.frame.size.height / s);
            silverWatch.zPosition = 102.1;
            [self.spriteLayer addChild:silverWatch];
        }
        
        if (gold702 == YES) {
            if (prizeAquired == YES) {
                goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightWatch"];
            }
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        
        if (bronze701 == YES) {
            bronzeWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftWatch"];
            
            bronzeWatch = [SKSpriteNode spriteNodeWithTexture:bronzeWatchTexture];
            bronzeWatch.position = CGPointZero;
            bronzeWatch.size = CGSizeMake(bronzeWatch.frame.size.width/s, bronzeWatch.frame.size.height / s);
            bronzeWatch.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeWatch];
        }
        
        if (silver701 == YES) {
            silverWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftWatch"];
            
            silverWatch = [SKSpriteNode spriteNodeWithTexture:silverWatchTexture];
            silverWatch.position = CGPointZero;
            silverWatch.size = CGSizeMake(silverWatch.frame.size.width/s, silverWatch.frame.size.height / s);
            silverWatch.zPosition = 102.1;
            [self.spriteLayer addChild:silverWatch];
        }
        
        if (gold701 == YES) {
            goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftWatch"];
            
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        
        if (bronze703 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown8"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver703 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown8"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold703 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown8"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling8"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard20"];
        
        gOPUHBuy1.name = @"BuySR20";
        gOPUHBuy2.name = @"BuyEL3";
        gOPUHBuy3.name = @"BuyHG30";
    }
    if (rankNumber == 20) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneDolphinScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameDolphinCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameDolphinCrownShine2"]];
        
        if (bronze702 == YES) {
            goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightWatch"];
            
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        
        if (silver702 == YES) {
            silverWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightWatch"];
            
            silverWatch = [SKSpriteNode spriteNodeWithTexture:silverWatchTexture];
            silverWatch.position = CGPointZero;
            silverWatch.size = CGSizeMake(silverWatch.frame.size.width/s, silverWatch.frame.size.height / s);
            silverWatch.zPosition = 102.1;
            [self.spriteLayer addChild:silverWatch];
        }
        
        if (gold702 == YES) {
            goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightWatch"];
            
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        if (bronze701 == YES) {
            bronzeWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftWatch"];
            
            bronzeWatch = [SKSpriteNode spriteNodeWithTexture:bronzeWatchTexture];
            bronzeWatch.position = CGPointZero;
            bronzeWatch.size = CGSizeMake(bronzeWatch.frame.size.width/s, bronzeWatch.frame.size.height / s);
            bronzeWatch.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeWatch];
        }
        
        if (silver701 == YES) {
            silverWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftWatch"];
            
            silverWatch = [SKSpriteNode spriteNodeWithTexture:silverWatchTexture];
            silverWatch.position = CGPointZero;
            silverWatch.size = CGSizeMake(silverWatch.frame.size.width/s, silverWatch.frame.size.height / s);
            silverWatch.zPosition = 102.1;
            [self.spriteLayer addChild:silverWatch];
        }
        
        if (gold701 == YES) {
            goldenWatchTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftWatch"];
            
            goldenWatch = [SKSpriteNode spriteNodeWithTexture:goldenWatchTexture];
            goldenWatch.position = CGPointZero;
            goldenWatch.size = CGSizeMake(goldenWatch.frame.size.width/s, goldenWatch.frame.size.height / s);
            goldenWatch.zPosition = 102.1;
            [self.spriteLayer addChild:goldenWatch];
        }
        if (bronze703 == YES) {
            
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver703 == YES) {
            
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold703 == YES) {
            
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard21"];
        
        gOPUHBuy1.name = @"BuyEL3";
        gOPUHBuy2.name = @"BuySR30";
        gOPUHBuy3.name = @"BuyQP";
    }
    // LVL 8
    if (rankNumber == 21) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueWhaleScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftSwordShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftSwordShine2"]];
        
        if (bronze801 == YES) {
            
            
            bronzeSwords = [SKSpriteNode spriteNodeWithTexture:bronzeSwordsTexture];
            bronzeSwords.position = CGPointZero;
            bronzeSwords.size = CGSizeMake(bronzeSwords.frame.size.width/s, bronzeSwords.frame.size.height / s);
            bronzeSwords.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeSwords];
        }
        
        if (silver801 == YES) {
            
            
            silverSwords = [SKSpriteNode spriteNodeWithTexture:silverSwordsTexture];
            silverSwords.position = CGPointZero;
            silverSwords.size = CGSizeMake(silverSwords.frame.size.width/s, silverSwords.frame.size.height / s);
            silverSwords.zPosition = 102.1;
            [self.spriteLayer addChild:silverSwords];
        }
        
        if (gold801 == YES) {
            if (prizeAquired == YES) {
                goldenSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftSwords"];
            }
            goldenSwords = [SKSpriteNode spriteNodeWithTexture:goldenSwordsTexture];
            goldenSwords.position = CGPointZero;
            goldenSwords.size = CGSizeMake(goldenSwords.frame.size.width/s, goldenSwords.frame.size.height / s);
            goldenSwords.zPosition = 102.1;
            [self.spriteLayer addChild:goldenSwords];
        }
        if (bronze802 == YES) {
            bronzeSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightSwords"];
            
            bronzeSwords = [SKSpriteNode spriteNodeWithTexture:bronzeSwordsTexture];
            bronzeSwords.position = CGPointZero;
            bronzeSwords.size = CGSizeMake(bronzeSwords.frame.size.width/s, bronzeSwords.frame.size.height / s);
            bronzeSwords.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeSwords];
        }
        
        if (silver802 == YES) {
            silverSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightSwords"];
            
            silverSwords = [SKSpriteNode spriteNodeWithTexture:silverSwordsTexture];
            silverSwords.position = CGPointZero;
            silverSwords.size = CGSizeMake(silverSwords.frame.size.width/s, silverSwords.frame.size.height / s);
            silverSwords.zPosition = 102.1;
            [self.spriteLayer addChild:silverSwords];
        }
        
        if (gold802 == YES) {
            goldenSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightSwords"];
            
            goldenSwords = [SKSpriteNode spriteNodeWithTexture:goldenSwordsTexture];
            goldenSwords.position = CGPointZero;
            goldenSwords.size = CGSizeMake(goldenSwords.frame.size.width/s, goldenSwords.frame.size.height / s);
            goldenSwords.zPosition = 102.1;
            [self.spriteLayer addChild:goldenSwords];
        }
        if (bronze803 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown1"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver803 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown1"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold803 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown1"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling1"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard22"];
        
        gOPUHBuy1.name = @"BuyTR20";
        gOPUHBuy2.name = @"BuyEL3";
        gOPUHBuy3.name = @"BuySR30";
    }
    if (rankNumber == 22) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueWhaleScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightSwordShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightSwordShine2"]];
        
        if (bronze802 == YES) {
            
            
            bronzeSwords = [SKSpriteNode spriteNodeWithTexture:bronzeSwordsTexture];
            bronzeSwords.position = CGPointZero;
            bronzeSwords.size = CGSizeMake(bronzeSwords.frame.size.width/s, bronzeSwords.frame.size.height / s);
            bronzeSwords.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeSwords];
        }
        
        if (silver802 == YES) {
            
            
            silverSwords = [SKSpriteNode spriteNodeWithTexture:silverSwordsTexture];
            silverSwords.position = CGPointZero;
            silverSwords.size = CGSizeMake(silverSwords.frame.size.width/s, silverSwords.frame.size.height / s);
            silverSwords.zPosition = 102.1;
            [self.spriteLayer addChild:silverSwords];
        }
        
        if (gold802 == YES) {
            if (prizeAquired == YES) {
                goldenSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightSwords"];
            }
            goldenSwords = [SKSpriteNode spriteNodeWithTexture:goldenSwordsTexture];
            goldenSwords.position = CGPointZero;
            goldenSwords.size = CGSizeMake(goldenSwords.frame.size.width/s, goldenSwords.frame.size.height / s);
            goldenSwords.zPosition = 102.1;
            [self.spriteLayer addChild:goldenSwords];
        }
        
        if (bronze801 == YES) {
            bronzeSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftSwords"];
            
            bronzeSwords = [SKSpriteNode spriteNodeWithTexture:bronzeSwordsTexture];
            bronzeSwords.position = CGPointZero;
            bronzeSwords.size = CGSizeMake(bronzeSwords.frame.size.width/s, bronzeSwords.frame.size.height / s);
            bronzeSwords.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeSwords];
        }
        
        if (silver801 == YES) {
            silverSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftSwords"];
            
            silverSwords = [SKSpriteNode spriteNodeWithTexture:silverSwordsTexture];
            silverSwords.position = CGPointZero;
            silverSwords.size = CGSizeMake(silverSwords.frame.size.width/s, silverSwords.frame.size.height / s);
            silverSwords.zPosition = 102.1;
            [self.spriteLayer addChild:silverSwords];
        }
        
        if (gold801 == YES) {
            goldenSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftSwords"];
            
            goldenSwords = [SKSpriteNode spriteNodeWithTexture:goldenSwordsTexture];
            goldenSwords.position = CGPointZero;
            goldenSwords.size = CGSizeMake(goldenSwords.frame.size.width/s, goldenSwords.frame.size.height / s);
            goldenSwords.zPosition = 102.1;
            [self.spriteLayer addChild:goldenSwords];
        }
        
        if (bronze803 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown1"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver803 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown1"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold803 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown1"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling1"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard23"];
        
        gOPUHBuy1.name = @"BuyTR20";
        gOPUHBuy2.name = @"BuyEL3";
        gOPUHBuy3.name = @"BuySR30";
    }
    if (rankNumber == 23) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneBlueWhaleScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameWhaleCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameWhaleCrownShine2"]];
        
        if (bronze802 == YES) {
            bronzeSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightSwords"];
            
            bronzeSwords = [SKSpriteNode spriteNodeWithTexture:bronzeSwordsTexture];
            bronzeSwords.position = CGPointZero;
            bronzeSwords.size = CGSizeMake(bronzeSwords.frame.size.width/s, bronzeSwords.frame.size.height / s);
            bronzeSwords.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeSwords];
        }
        
        if (silver802 == YES) {
            silverSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightSwords"];
            
            silverSwords = [SKSpriteNode spriteNodeWithTexture:silverSwordsTexture];
            silverSwords.position = CGPointZero;
            silverSwords.size = CGSizeMake(silverSwords.frame.size.width/s, silverSwords.frame.size.height / s);
            silverSwords.zPosition = 102.1;
            [self.spriteLayer addChild:silverSwords];
        }
        
        if (gold802 == YES) {
            goldenSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightSwords"];
            
            goldenSwords = [SKSpriteNode spriteNodeWithTexture:goldenSwordsTexture];
            goldenSwords.position = CGPointZero;
            goldenSwords.size = CGSizeMake(goldenSwords.frame.size.width/s, goldenSwords.frame.size.height / s);
            goldenSwords.zPosition = 102.1;
            [self.spriteLayer addChild:goldenSwords];
        }
        if (bronze801 == YES) {
            bronzeSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftSwords"];
            
            bronzeSwords = [SKSpriteNode spriteNodeWithTexture:bronzeSwordsTexture];
            bronzeSwords.position = CGPointZero;
            bronzeSwords.size = CGSizeMake(bronzeSwords.frame.size.width/s, bronzeSwords.frame.size.height / s);
            bronzeSwords.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeSwords];
        }
        
        if (silver801 == YES) {
            silverSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftSwords"];
            
            silverSwords = [SKSpriteNode spriteNodeWithTexture:silverSwordsTexture];
            silverSwords.position = CGPointZero;
            silverSwords.size = CGSizeMake(silverSwords.frame.size.width/s, silverSwords.frame.size.height / s);
            silverSwords.zPosition = 102.1;
            [self.spriteLayer addChild:silverSwords];
        }
        
        if (gold801 == YES) {
            goldenSwordsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftSwords"];
            
            goldenSwords = [SKSpriteNode spriteNodeWithTexture:goldenSwordsTexture];
            goldenSwords.position = CGPointZero;
            goldenSwords.size = CGSizeMake(goldenSwords.frame.size.width/s, goldenSwords.frame.size.height / s);
            goldenSwords.zPosition = 102.1;
            [self.spriteLayer addChild:goldenSwords];
        }
        if (bronze803 == YES) {
            
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver803 == YES) {
            
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold803 == YES) {
            
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard24"];
        
        gOPUHBuy1.name = @"BuyTR30";
        gOPUHBuy2.name = @"BuyEL3";
        gOPUHBuy3.name = @"BuySR30";
    }
    // LVL 9
    if (rankNumber == 24) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneKillerWhaleScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameLeftUnicornShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameLeftUnicornShine2"]];
        
        if (bronze901 == YES) {
            
            
            bronzeUnicron = [SKSpriteNode spriteNodeWithTexture:bronzeUnicronTexture];
            bronzeUnicron.position = CGPointZero;
            bronzeUnicron.size = CGSizeMake(bronzeUnicron.frame.size.width/s, bronzeUnicron.frame.size.height / s);
            bronzeUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeUnicron];
        }
        
        if (silver901 == YES) {
            
            
            silverUnicron = [SKSpriteNode spriteNodeWithTexture:silverUnicronTexture];
            silverUnicron.position = CGPointZero;
            silverUnicron.size = CGSizeMake(silverUnicron.frame.size.width/s, silverUnicron.frame.size.height / s);
            silverUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:silverUnicron];
        }
        
        if (gold901 == YES) {
            if (prizeAquired == YES) {
                goldenUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftUnicorn"];
            }
            
            goldenUnicron = [SKSpriteNode spriteNodeWithTexture:goldenUnicronTexture];
            goldenUnicron.position = CGPointZero;
            goldenUnicron.size = CGSizeMake(goldenUnicron.frame.size.width/s, goldenUnicron.frame.size.height / s);
            goldenUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:goldenUnicron];
        }
        if (bronze902 == YES) {
            bronzeUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightUnicorn"];
            
            bronzeUnicron = [SKSpriteNode spriteNodeWithTexture:bronzeUnicronTexture];
            bronzeUnicron.position = CGPointZero;
            bronzeUnicron.size = CGSizeMake(bronzeUnicron.frame.size.width/s, bronzeUnicron.frame.size.height / s);
            bronzeUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeUnicron];
        }
        
        if (silver902 == YES) {
            silverUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightUnicorn"];
            
            silverUnicron = [SKSpriteNode spriteNodeWithTexture:silverUnicronTexture];
            silverUnicron.position = CGPointZero;
            silverUnicron.size = CGSizeMake(silverUnicron.frame.size.width/s, silverUnicron.frame.size.height / s);
            silverUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:silverUnicron];
        }
        
        if (gold902 == YES) {
            goldenUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightUnicorn"];
            
            goldenUnicron = [SKSpriteNode spriteNodeWithTexture:goldenUnicronTexture];
            goldenUnicron.position = CGPointZero;
            goldenUnicron.size = CGSizeMake(goldenUnicron.frame.size.width/s, goldenUnicron.frame.size.height / s);
            goldenUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:goldenUnicron];
        }
        if (bronze903 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown3"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver903 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown3"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold903 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown3"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [buttonSprites textureNamed:@"FFGameSceneCrownBling3"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard25"];
        
        gOPUHBuy1.name = @"BuyTR30";
        gOPUHBuy2.name = @"BuyEL3";
        gOPUHBuy3.name = @"BuySR30";
    }
    if (rankNumber == 25) {
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneKillerWhaleScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameRightUnicornShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameRightUnicornShine2"]];
        
        if (bronze902 == YES) {
            
            bronzeUnicron = [SKSpriteNode spriteNodeWithTexture:bronzeUnicronTexture];
            bronzeUnicron.position = CGPointZero;
            bronzeUnicron.size = CGSizeMake(bronzeUnicron.frame.size.width/s, bronzeUnicron.frame.size.height / s);
            bronzeUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeUnicron];
        }
        
        if (silver902 == YES) {
            
            silverUnicron = [SKSpriteNode spriteNodeWithTexture:silverUnicronTexture];
            silverUnicron.position = CGPointZero;
            silverUnicron.size = CGSizeMake(silverUnicron.frame.size.width/s, silverUnicron.frame.size.height / s);
            silverUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:silverUnicron];
        }
        
        if (gold902 == YES) {
            if (prizeAquired == YES) {
                goldenUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightUnicorn"];
            }
            goldenUnicron = [SKSpriteNode spriteNodeWithTexture:goldenUnicronTexture];
            goldenUnicron.position = CGPointZero;
            goldenUnicron.size = CGSizeMake(goldenUnicron.frame.size.width/s, goldenUnicron.frame.size.height / s);
            goldenUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:goldenUnicron];
        }
        
        if (bronze901 == YES) {
            bronzeUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftUnicorn"];
            
            bronzeUnicron = [SKSpriteNode spriteNodeWithTexture:bronzeUnicronTexture];
            bronzeUnicron.position = CGPointZero;
            bronzeUnicron.size = CGSizeMake(bronzeUnicron.frame.size.width/s, bronzeUnicron.frame.size.height / s);
            bronzeUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeUnicron];
        }
        
        if (silver901 == YES) {
            silverUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftUnicorn"];
            
            silverUnicron = [SKSpriteNode spriteNodeWithTexture:silverUnicronTexture];
            silverUnicron.position = CGPointZero;
            silverUnicron.size = CGSizeMake(silverUnicron.frame.size.width/s, silverUnicron.frame.size.height / s);
            silverUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:silverUnicron];
        }
        
        if (gold901 == YES) {
            goldenUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftUnicorn"];
            
            goldenUnicron = [SKSpriteNode spriteNodeWithTexture:goldenUnicronTexture];
            goldenUnicron.position = CGPointZero;
            goldenUnicron.size = CGSizeMake(goldenUnicron.frame.size.width/s, goldenUnicron.frame.size.height / s);
            goldenUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:goldenUnicron];
        }
        
        if (bronze903 == YES) {
            bronzeCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeCrown3"];
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver903 == YES) {
            silverCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverCrown3"];
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold903 == YES) {
            goldCrownTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldCrown3"];
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            crownBlingTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCrownBling3"];
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard26"];
        
        gOPUHBuy1.name = @"BuyEL3";
        gOPUHBuy2.name = @"BuySR30";
        gOPUHBuy3.name = @"BuyQP";
    }
    if (rankNumber == 26) { 
        
        scoreBoardTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneKillerWhaleScoreBoard"];
        
        prizeShineTexture = [prizeShineSprites textureNamed:@"FFGameSceneGameKillerWhaleCrownShine1"];
        
        LGPSAni = @[[SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine1"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine2"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine6"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine5"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine4"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine3"],
                    [SKTexture textureWithImageNamed:@"FFGameSceneGameKillerWhaleCrownShine2"]];
        
        if (bronze902 == YES) {
            bronzeUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeRightUnicorn"];
            
            bronzeUnicron = [SKSpriteNode spriteNodeWithTexture:bronzeUnicronTexture];
            bronzeUnicron.position = CGPointZero;
            bronzeUnicron.size = CGSizeMake(bronzeUnicron.frame.size.width/s, bronzeUnicron.frame.size.height / s);
            bronzeUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeUnicron];
        }
        
        if (silver902 == YES) {
            silverUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverRightUnicorn"];
            
            silverUnicron = [SKSpriteNode spriteNodeWithTexture:silverUnicronTexture];
            silverUnicron.position = CGPointZero;
            silverUnicron.size = CGSizeMake(silverUnicron.frame.size.width/s, silverUnicron.frame.size.height / s);
            silverUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:silverUnicron];
        }
        
        if (gold902 == YES) {
            goldenUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenRightUnicorn"];
            
            goldenUnicron = [SKSpriteNode spriteNodeWithTexture:goldenUnicronTexture];
            goldenUnicron.position = CGPointZero;
            goldenUnicron.size = CGSizeMake(goldenUnicron.frame.size.width/s, goldenUnicron.frame.size.height / s);
            goldenUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:goldenUnicron];
        }
        if (bronze901 == YES) {
            bronzeUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneBronzeLeftUnicorn"];
            
            bronzeUnicron = [SKSpriteNode spriteNodeWithTexture:bronzeUnicronTexture];
            bronzeUnicron.position = CGPointZero;
            bronzeUnicron.size = CGSizeMake(bronzeUnicron.frame.size.width/s, bronzeUnicron.frame.size.height / s);
            bronzeUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:bronzeUnicron];
        }
        
        if (silver901 == YES) {
            silverUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneSilverLeftUnicorn"];
            
            silverUnicron = [SKSpriteNode spriteNodeWithTexture:silverUnicronTexture];
            silverUnicron.position = CGPointZero;
            silverUnicron.size = CGSizeMake(silverUnicron.frame.size.width/s, silverUnicron.frame.size.height / s);
            silverUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:silverUnicron];
        }
        
        if (gold901 == YES) {
            goldenUnicronTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneGoldenLeftUnicorn"];
            
            goldenUnicron = [SKSpriteNode spriteNodeWithTexture:goldenUnicronTexture];
            goldenUnicron.position = CGPointZero;
            goldenUnicron.size = CGSizeMake(goldenUnicron.frame.size.width/s, goldenUnicron.frame.size.height / s);
            goldenUnicron.zPosition = 102.1;
            [self.spriteLayer addChild:goldenUnicron];
        }
        if (bronze903 == YES) {
            
            
            bronzeCrown = [SKSpriteNode spriteNodeWithTexture:bronzeCrownTexture];
            bronzeCrown.position = CGPointZero;
            bronzeCrown.size = CGSizeMake(bronzeCrown.frame.size.width/s, bronzeCrown.frame.size.height / s);
            bronzeCrown.zPosition = 102.51;
            [self.spriteLayer addChild:bronzeCrown];
        }
        
        if (silver903 == YES) {
            
            
            silverCrown = [SKSpriteNode spriteNodeWithTexture:silverCrownTexture];
            silverCrown.position = CGPointZero;
            silverCrown.size = CGSizeMake(silverCrown.frame.size.width/s, silverCrown.frame.size.height / s);
            silverCrown.zPosition = 102.52;
            [self.spriteLayer addChild:silverCrown];
        }
        
        if (gold903 == YES) {
            
            
            goldCrown = [SKSpriteNode spriteNodeWithTexture:goldCrownTexture];
            goldCrown.position = CGPointZero;
            goldCrown.size = CGSizeMake(goldCrown.frame.size.width/s, goldCrown.frame.size.height / s);
            goldCrown.zPosition = 102.53;
            [self.spriteLayer addChild:goldCrown];
            
            
            
            crownBling = [SKSpriteNode spriteNodeWithTexture:crownBlingTexture];
            crownBling.position = CGPointZero;
            crownBling.size = CGSizeMake(crownBling.frame.size.width/s, crownBling.frame.size.height / s);
            crownBling.zPosition = 102.54;
            [self.spriteLayer addChild:crownBling];
            
            SKAction *desize = [SKAction fadeAlphaTo:0.3 duration:1];
            SKAction *resize = [SKAction fadeAlphaTo:1 duration:1];
            SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
            SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
            [crownBling runAction:repeatSeq];
        }
        
        gOPUHTexture = [gameSceneSpritesSix textureNamed:@"FFGameSceneRecommendedBoard27"];
        
        gOPUHBuy1.name = @"BuyEL3";
        gOPUHBuy2.name = @"BuySR30";
        gOPUHBuy3.name = @"BuyQP";
    }
    
    /*if (rankNumber == 27) {
     
     scoreBoard = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSharkScoreBoard"];
     scoreBoard.position = CGPointMake(0, 500);
     scoreBoard.zPosition = 102;
     [self.spriteLayer addChild:scoreBoard];
     
     if (bronze1002 == YES) {
     goldenEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneBronzeEagle"];
     goldenEagle.position = CGPointMake(60, 125);
     goldenEagle.zPosition = 102.1;
     [self.spriteLayer addChild:goldenEagle];
     }
     
     if (silver1002 == YES) {
     silverEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSilverEagle"];
     silverEagle.position = CGPointMake(60, 125);
     silverEagle.zPosition = 102.1;
     [self.spriteLayer addChild:silverEagle];
     }
     
     if (gold1002 == YES) {
     goldenEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGoldenEagle"];
     goldenEagle.position = CGPointMake(60, 125);
     goldenEagle.zPosition = 102.1;
     [self.spriteLayer addChild:goldenEagle];
     }
     if (bronze1003 == YES) {
     bronzeCrown = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneBronzeCrown"];
     bronzeCrown.position = CGPointMake(5, 183);
     bronzeCrown.zRotation = M_PI/-8.0f;
     bronzeCrown.zPosition = 102.51;
     [self.spriteLayer addChild:bronzeCrown];
     }
     
     if (silver1003 == YES) {
     silverCrown = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSilverCrown"];
     silverCrown.position = CGPointMake(5, 183);
     silverCrown.zRotation = M_PI/-8.0f;
     silverCrown.zPosition = 102.52;
     [self.spriteLayer addChild:silverCrown];
     }
     
     if (gold1003 == YES) {
     goldCrown = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGoldenCrown"];
     goldCrown.position = CGPointMake(5, 183);
     goldCrown.zRotation = M_PI/-8.0f;
     goldCrown.zPosition = 102.53;
     [self.spriteLayer addChild:goldCrown];
     
     crownBling = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneCrownBling"];
     crownBling.position = CGPointMake(13, 190);
     crownBling.zPosition = 102.54;
     [self.spriteLayer addChild:crownBling];
     
     SKAction *desize = [SKAction scaleTo:0.3 duration:1];
     SKAction *resize = [SKAction scaleTo:1 duration:1];
     SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
     SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
     [crownBling runAction:repeatSeq];
     }
     
     
     
     
     gOPUH = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneRecommendedBoard"]; //For Rank 1
     gOPUH.position = CGPointZero;
     gOPUH.zPosition = 105;
     [self.spriteLayer addChild:gOPUH];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(-123, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuyDoublePoints";
     [self.spriteLayer addChild:gOPUHBuy];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(-4, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuyExtraLives1";
     [self.spriteLayer addChild:gOPUHBuy];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(114, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuySpeedReducer10";
     [self.spriteLayer addChild:gOPUHBuy];
     }
     if (rankNumber == 28) {
     
     scoreBoard = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSharkScoreBoard"];
     scoreBoard.position = CGPointMake(0, 500);
     scoreBoard.zPosition = 102;
     [self.spriteLayer addChild:scoreBoard];
     
     if (bronze1001 == YES) {
     
     bronzeEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneBronzeEagle"];
     bronzeEagle.position = CGPointMake(-65, 125);
     bronzeEagle.xScale = -1.0;
     bronzeEagle.zPosition = 102.1;
     [self.spriteLayer addChild:bronzeEagle];
     
     }
     
     if (silver1001 == YES) {
     silverEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSilverEagle"];
     silverEagle.position = CGPointMake(-65, 125);
     silverEagle.xScale = -1.0;
     silverEagle.zPosition = 102.1;
     [self.spriteLayer addChild:silverEagle];
     }
     
     if (gold1001 == YES) {
     goldenEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGoldenEagle"];
     goldenEagle.position = CGPointMake(-65, 125);
     goldenEagle.xScale = -1.0;
     goldenEagle.zPosition = 102.1;
     [self.spriteLayer addChild:goldenEagle];
     }
     if (bronze1003 == YES) {
     bronzeCrown = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneBronzeCrown"];
     bronzeCrown.position = CGPointMake(5, 183);
     bronzeCrown.zRotation = M_PI/-8.0f;
     bronzeCrown.zPosition = 102.51;
     [self.spriteLayer addChild:bronzeCrown];
     }
     
     if (silver1003 == YES) {
     silverCrown = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSilverCrown"];
     silverCrown.position = CGPointMake(5, 183);
     silverCrown.zRotation = M_PI/-8.0f;
     silverCrown.zPosition = 102.52;
     [self.spriteLayer addChild:silverCrown];
     }
     
     if (gold1003 == YES) {
     goldCrown = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGoldenCrown"];
     goldCrown.position = CGPointMake(5, 183);
     goldCrown.zRotation = M_PI/-8.0f;
     goldCrown.zPosition = 102.53;
     [self.spriteLayer addChild:goldCrown];
     
     crownBling = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneCrownBling"];
     crownBling.position = CGPointMake(13, 190);
     crownBling.zPosition = 102.54;
     [self.spriteLayer addChild:crownBling];
     
     SKAction *desize = [SKAction scaleTo:0.3 duration:1];
     SKAction *resize = [SKAction scaleTo:1 duration:1];
     SKAction *scaleSeq = [SKAction sequence:@[desize,resize]];
     SKAction *repeatSeq = [SKAction repeatActionForever:scaleSeq];
     [crownBling runAction:repeatSeq];
     }
     gOPUH = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneRecommendedBoard"]; //For Rank 1
     gOPUH.position = CGPointZero;
     gOPUH.zPosition = 105;
     [self.spriteLayer addChild:gOPUH];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(-123, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuyDoublePoints";
     [self.spriteLayer addChild:gOPUHBuy];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(-4, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuyExtraLives1";
     [self.spriteLayer addChild:gOPUHBuy];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(114, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuySpeedReducer10";
     [self.spriteLayer addChild:gOPUHBuy];
     }
     if (rankNumber == 29) {
     
     scoreBoard = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSharkScoreBoard"];
     scoreBoard.position = CGPointMake(0, 500);
     scoreBoard.zPosition = 102;
     [self.spriteLayer addChild:scoreBoard];
     
     if (bronze1001 == YES) {
     
     bronzeEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneBronzeEagle"];
     bronzeEagle.position = CGPointMake(-65, 125);
     bronzeEagle.xScale = -1.0;
     bronzeEagle.zPosition = 102.1;
     [self.spriteLayer addChild:bronzeEagle];
     
     }
     
     if (silver1001 == YES) {
     silverEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSilverEagle"];
     silverEagle.position = CGPointMake(-65, 125);
     silverEagle.xScale = -1.0;
     silverEagle.zPosition = 102.1;
     [self.spriteLayer addChild:silverEagle];
     }
     
     if (gold1001 == YES) {
     goldenEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGoldenEagle"];
     goldenEagle.position = CGPointMake(-65, 125);
     goldenEagle.xScale = -1.0;
     goldenEagle.zPosition = 102.1;
     [self.spriteLayer addChild:goldenEagle];
     }
     
     if (bronze1002 == YES) {
     goldenEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneBronzeEagle"];
     goldenEagle.position = CGPointMake(60, 125);
     goldenEagle.zPosition = 102.1;
     [self.spriteLayer addChild:goldenEagle];
     }
     
     if (silver1002 == YES) {
     silverEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneSilverEagle"];
     silverEagle.position = CGPointMake(60, 125);
     silverEagle.zPosition = 102.1;
     [self.spriteLayer addChild:silverEagle];
     }
     
     if (gold1002 == YES) {
     goldenEagle = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGoldenEagle"];
     goldenEagle.position = CGPointMake(60, 125);
     goldenEagle.zPosition = 102.1;
     [self.spriteLayer addChild:goldenEagle];
     }
     gOPUH = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneRecommendedBoard"]; //For Rank 1
     gOPUH.position = CGPointZero;
     gOPUH.zPosition = 105;
     [self.spriteLayer addChild:gOPUH];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(-123, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuyDoublePoints";
     [self.spriteLayer addChild:gOPUHBuy];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(-4, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuyExtraLives1";
     [self.spriteLayer addChild:gOPUHBuy];
     
     gOPUHBuy = [SKSpriteNode spriteNodeWithImageNamed:@"FFGameSceneGameOverBuy"];
     gOPUHBuy.position = CGPointMake(114, -301);
     gOPUHBuy.zPosition = 106;
     gOPUHBuy.name = @"BuySpeedReducer10";
     [self.spriteLayer addChild:gOPUHBuy];
     }*/
    
    NMPointsLabel *countDownLabel = (NMPointsLabel *)[self childNodeWithName:@"countDownLabel"];
    NMPointsLabel *foodCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"foodCollectedLabel"];
    NMPointsLabel *fruitsCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"fruitsCollectedLabel"];
    NMPointsLabel *vegetablesCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"vegetablesCollectedLabel"];
    NMPointsLabel *othersCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"othersCollectedLabel"];
    NMPointsLabel *foodsCountDownLabel = (NMPointsLabel *)[self childNodeWithName:@"foodsCountDownLabel"];
    
        scoreBoard = [SKSpriteNode spriteNodeWithTexture:scoreBoardTexture];
        scoreBoard.position = CGPointMake(0, 500);
        scoreBoard.size = CGSizeMake(scoreBoard.frame.size.width/s, scoreBoard.frame.size.height / s);
        scoreBoard.zPosition = 102.001;
        [self.spriteLayer addChild:scoreBoard];
        
        SKAction *scoreBoardWait = [SKAction waitForDuration:0.5];
        SKAction *scoreBoardMove = [SKAction moveTo:CGPointZero duration:0.35];
        SKAction *scoreBoardBounce = [SKAction moveTo:CGPointMake(0, 20) duration:0.2];
        SKAction *scoreBoardFall = [SKAction moveTo:CGPointZero duration:0.2];
        SKAction *scoreBoardSequence = [SKAction sequence:@[scoreBoardWait,scoreBoardMove,scoreBoardBounce,scoreBoardFall]];
    [scoreBoard runAction:scoreBoardSequence completion:^{
        
        prizeShine = [SKSpriteNode spriteNodeWithTexture:prizeShineTexture];
        prizeShine.position = CGPointZero;
        prizeShine.size = CGSizeMake(prizeShine.frame.size.width/s, prizeShine.frame.size.height / s);
        prizeShine.zPosition = 102.01;
        [self.spriteLayer addChild:prizeShine];
        
        SKAction *LGPSAniAnimate = [SKAction animateWithTextures:LGPSAni timePerFrame:0.083333333];
        
        [prizeShine runAction:[SKAction repeatActionForever:LGPSAniAnimate]];
        
    }];
    
    if (beatObj == NO) {
        
            gOPUH = [SKSpriteNode spriteNodeWithTexture:gOPUHTexture]; //For Rank 1
            gOPUH.position = CGPointZero;
            gOPUH.size = CGSizeMake(gOPUH.frame.size.width/s, gOPUH.frame.size.height / s);
            gOPUH.zPosition = 105;
            [self.spriteLayer addChild:gOPUH];
            
            gOPUHNumsTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneRecommendedAnimated1"];
            
            gOPUHNums = [SKSpriteNode spriteNodeWithTexture:gOPUHNumsTexture];
            gOPUHNums.position = CGPointZero;
            gOPUHNums.size = CGSizeMake(gOPUHNums.frame.size.width/s, gOPUHNums.frame.size.height / s);
            gOPUHNums.zPosition = 135;
            [self.spriteLayer addChild:gOPUHNums];
        
        SKAction * oS = [SKAction sequence:@[[SKAction moveByX:0 y:20 duration:0],
                                             [SKAction moveByX:0 y:-1000 duration:1],
                                             [SKAction removeFromParent]]];
        
        SKAction * oS1 = [SKAction sequence:@[[SKAction moveByX:0 y:20 duration:0],
                                              [SKAction moveByX:0 y:-1020 duration:1],
                                              [SKAction waitForDuration:12],
                                              [SKAction moveByX:0 y:1020 duration:1],
                                              [SKAction moveByX:0 y:-20 duration:0.25]]];
        
            SKAction * gS = [SKAction sequence:@[[SKAction moveByX:0 y:-1000 duration:0],
                                                 [SKAction moveByX:0 y:1020 duration:1],
                                                 [SKAction moveByX:0 y:-20 duration:0.25]]];
        NSArray *GOPUHCD = @[[SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated1"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated2"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated3"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated4"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated5"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated6"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated7"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated8"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated9"],
                             [SKTexture textureWithImageNamed:@"FFGameSceneRecommendedAnimated10"]];
        SKAction *GOPUHCDPause = [SKAction waitForDuration:3];
        SKAction *GOPUHCDAnimate = [SKAction animateWithTextures:GOPUHCD timePerFrame:1];
        SKAction *GOPUHCDSequence1 = [SKAction sequence:@[GOPUHCDPause,GOPUHCDAnimate,oS,[SKAction removeFromParent]]];
        SKAction *GOPUHCDSequence2 = [SKAction sequence:@[GOPUHCDPause,[SKAction waitForDuration:10],oS,[SKAction removeFromParent]]];
        
        [gOPUH runAction:[SKAction sequence:@[gS,GOPUHCDSequence2]]];
        [gOPUHBuy1 runAction:[SKAction sequence:@[gS,GOPUHCDSequence2]]];
        [gOPUHBuy2 runAction:[SKAction sequence:@[gS,GOPUHCDSequence2]]];
        [gOPUHBuy3 runAction:[SKAction sequence:@[gS,GOPUHCDSequence2]]];
        [gOPUHNums runAction:[SKAction sequence:@[gS,GOPUHCDSequence1]]];
        [[self.spriteLayer childNodeWithName:@"tutorial"] runAction:[SKAction sequence:@[gS,GOPUHCDSequence2]]];
        
        [timerMachine runAction:oS1];
        [countDownLabel runAction:oS1];
        [amountMachine runAction:oS1];
        [foodCollectedLabel runAction:oS1];
        [fruitsCollectedLabel runAction:oS1];
        [vegetablesCollectedLabel runAction:oS1];
        [othersCollectedLabel runAction:oS1];
        [foodsCountDownLabel runAction:oS1];
        
        
    }
    
    NSUserDefaults *defaultTaunt = [NSUserDefaults standardUserDefaults];
    [defaultTaunt setBool:canTaunt forKey:@"canTaunt"];
    [defaultTaunt synchronize];
    
    RankLogic *save = [[RankLogic alloc]init];
    [save saveRankValues];
    
    NSUserDefaults *defaultsz = [NSUserDefaults standardUserDefaults];
    [defaultsz setBool:beatObj forKey:@"beatObj"];
    [defaultsz synchronize];
    
    NSUserDefaults *defaults1 = [NSUserDefaults standardUserDefaults];
    [defaults1 setInteger:rankNumber forKey:@"rankNumber"];
    [defaults1 synchronize];
    
    if (prizeAquired == YES) {
        prizeAquired = NO;
    }
    
    //Game Over Apears and starts Blinking then the screen gets darker and the Scoreboard falls in following the buttons in condescending order
    
    
} //--Add GOPUHSprites for each rank + animations and buttton arangement--//
-(void)gameOver {
    
    Data *FBCount = [[Data alloc]init];
    [FBCount loadAmountFB];
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    
    NMPointsLabel *pointsLabel = (NMPointsLabel *)[self childNodeWithName:@"pointsLabel"];
    pointsLabel.hidden = YES;
    NMPointsLabel *pointsLabel2 = (NMPointsLabel *)[self childNodeWithName:@"pointsLabel2"];
    pointsLabel2.hidden = YES;
    SKLabelNode *asNumLabel = (SKLabelNode *)[self childNodeWithName:@"asNumLabel"];
    asNum = 0;
    asNumLabel.hidden = YES;
    
    NSString *points = pointsLabel.text;
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:points forKey:@"points"];
    [defaults synchronize];
    
    [curtain removeFromParent];
    [crackedScreen removeFromParent];
    [eggedScreen removeFromParent];
    [ReggyBot removeAllActions];
    [foodBlowSensor removeFromParent];
    [self removeActionForKey:@"foodBlowerAnim"];
    [ReggyBot runAction:[SKAction sequence:@[[SKAction moveToX:-self.frame.size.width * 2 duration:0.3],[SKAction removeFromParent]]]];
    foodBlowReggy = NO;
    
    // make pause instead of remove
    [foodBlowSensor removeFromParent];
    [helpButton removeFromParent];
    [helpButton removeAllActions];
    foodDFoodSK.speed = 0;
    sideFood.speed = 0;
    gameSceneSpritesNine = nil;
    gameSceneSpritesThree = nil;
    gameOver = YES;
    self.sequenceLayer.paused = YES;
    
    if (invalidateTimer == YES) {
        [timer invalidate];
        [timer05 invalidate];
        [timer15 invalidate];
        [timer2 invalidate];
    }
    
    [self updateHighScore];
    
    if (beatObj == NO) {
        
        RankLogic *incCGN = [[RankLogic alloc]init];
        [incCGN increment1];
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Buzzer" ofType:@"wav"];
        buzzer = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        buzzer.delegate = self;
        buzzer.volume = 1.0;
        [buzzer play];
    }
    if (beatObj == YES) {
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"PrizeCollected" ofType:@"wav"];
        prizeCollected = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        prizeCollected.delegate = self;
        prizeCollected.volume = 1.0;
        [prizeCollected play];
    }
    
    if ((currentGameNumber > 4 & maxPlaysLvl == 0) || (currentGameNumber > 9 & maxPlaysLvl == 1)) {
        goDelay = YES;
        canPlay = NO;
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        [defaults setBool:canPlay forKey:@"canPlay"];
        [defaults synchronize];
        [self retrySprites];
        [self getDate];
        [self waitTime];
    }
    
    cm = (payAmount * 0.01)/2.2;
    
    if (pay == YES) {
        [pause removeFromParent];
        [amountLabel setPoints:amountFB -= payAmount];
        [kasbE setPoints:amountLabel.amount];
    }
    if (pay == NO) {
        [amountLabel setPoints:amountFB];
        [kasbE setPoints:amountLabel.amount];
    }
    
    if (rankNumber == 2 & pay == YES & canPlayRank3 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        kasbE.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    if (rankNumber == 5 & pay == YES & canPlayRank6 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        amountLabel.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    if (rankNumber == 8 & pay == YES & canPlayRank9 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        kasbE.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    if (rankNumber == 11 & pay == YES & canPlayRank12 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        kasbE.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    if (rankNumber == 14 & pay == YES & canPlayRank15 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        kasbE.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    if (rankNumber == 17 & pay == YES & canPlayRank18 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        kasbE.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    if (rankNumber == 20 & pay == YES & canPlayRank21 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        kasbE.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    if (rankNumber == 23 & pay == YES & canPlayRank24 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        kasbE.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    if (rankNumber == 26 & pay == YES & canPlayRank27 == NO) {
        amountLabel.position = CGPointMake(0, -175);
        amountLabel.hidden = NO;
        amountLabel.zPosition = 10000;
        kasbE.position = CGPointMake(0, -175);
        kasbE.hidden = NO;
        kasbE.zPosition = 10000;
        goDelay = YES;
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount]]];
        [amountLabel runAction:repeat withKey:@"levelGuap"];
        [self showCongratsBoard];
        pay = NO;
    }
    
    if ((showGoldGloves == YES || showGoldEagle == YES || showGoldAcorn == YES || showGoldApple == YES || showGoldBar == YES || showGoldChalice == YES || showGoldEagle == YES || showGoldGolfClub == YES || showGoldMicrophone == YES || showGoldSwords == YES || showGoldUnicron == YES || showGoldWatch == YES)) {
        goDelay = YES;
        [self goToVictoryPrizeScreen];
    }
    
    if (goDelay == NO) {
        [self performSelector:@selector(gameOverSprites) withObject:nil afterDelay:0.5];
    }
    
    [self removeFood];
    if (goDelay == YES) {
        NSLog(@"betterLuckNextTime");
    }
    NSLog(@"Game Over");
    [self deActivate];
    
    
} //--Done--//
-(void)getDate {
    NSDate *todaysDate = [NSDate date];
    NSLog(@"%@",todaysDate);
} //--Done--//
-(void)waitTime {
    NSTimeInterval expiration = 1500;
    
    
    NSDate *expirationDate = [NSDate dateWithTimeIntervalSinceNow:expiration];
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:expirationDate forKey:@"expirationDate"];
    [defaults setBool:YES forKey:@"timer"];
    [defaults synchronize];
} //--Done--//
-(void)updateFactoryBucksLabel {
    
    SKTextureAtlas *congradSpritesSixteen = [self textureAtlasNamed:@"CongradsBoardSpritesSixteen"];
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    
    SKTexture *objMoney1Texture = [congradSpritesSixteen textureNamed:@"ObjectiveMoneyAnim0001"];
    
    SKSpriteNode *objMoney1 = [SKSpriteNode spriteNodeWithTexture:objMoney1Texture];
    objMoney1.position = CGPointZero;
    objMoney1.name = @"objCash";
    objMoney1.size = CGSizeMake(objMoney1.frame.size.width/s, objMoney1.frame.size.height / s);
    objMoney1.zPosition = 10002;
    [self.spriteLayer addChild:objMoney1];
    
    /*SKTexture *objMoney2Texture = [congradSpritesSixteen textureNamed:@"ObjectiveMoneyAnim0001"];
    
    SKSpriteNode *objMoney2 = [SKSpriteNode spriteNodeWithTexture:objMoney2Texture];
    objMoney2.position = CGPointZero;
    objMoney2.name = @"objCash";
    objMoney2.size = CGSizeMake(objMoney2.frame.size.width/s, objMoney2.frame.size.height / s);
    objMoney2.zPosition = 10003;
    [self.spriteLayer addChild:objMoney2];*/
    
    NSUInteger mac;
    
    mac = (payAmount * 0.01)/1.75;
    
        SKAction *moneyUp = [SKAction runBlock:^{[amountLabel setPoints:amountLabel.amount + 1];[kasbE setPoints:kasbE.amount + 1];}];
        SKAction *wait = [SKAction waitForDuration:0.01];
        SKAction *repeat = [SKAction sequence:@[[SKAction repeatAction:[SKAction sequence:@[moneyUp,wait]] count:payAmount],[SKAction runBlock:^{
            
        }]]];
        [amountLabel runAction:repeat];
        
        SKAction *moneyAnim = [SKAction animateWithTextures:OBJMoneyAnim_Anim1_START timePerFrame:0.08333333];
        SKAction *repeatM1 = [SKAction sequence:@[[SKAction repeatAction:moneyAnim count:mac],[SKAction removeFromParent]]];
        [objMoney1 runAction:repeatM1 completion:^{
            
            NSLog(@"Done ---------->>>>>>> | <<<<<<<------------- Done");
            
            
        }];
        
        /*SKAction *moneyAnim2 = [SKAction animateWithTextures:OBJMoneyAnim_Anim2_START timePerFrame:0.08333333];
        SKAction *repeatM2 = [SKAction sequence:@[[SKAction waitForDuration:0.5],[SKAction repeatAction:moneyAnim2 count:mac],[SKAction removeFromParent]]];
        [objMoney2 runAction:repeatM2 completion:^{
            
            NSLog(@"Done ---------->>>>>>> | <<<<<<<------------- Done");
            
            
        }];*/
    
} //--Change the Update Amount# by ranks Reward--//
-(void)updateHighScore {
    
    NMPointsLabel *pointsLabel = (NMPointsLabel *)[self childNodeWithName:@"pointsLabel"];
    NMPointsLabel *topLabel = (NMPointsLabel *)[self childNodeWithName:@"topLabel"];
    NMPointsLabel *topLabel2 = (NMPointsLabel *)[self childNodeWithName:@"topLabel2"];
    
    Data *load = [[Data alloc]init];
    [load loadTopScore];
    
    NSUserDefaults *defaultsHS = [NSUserDefaults standardUserDefaults];
    NSString *scoreInputString = [defaultsHS objectForKey:@"scoreInput"];
    [topLabel setText:scoreInputString];
    
    if (pointsLabel.number > topLabel.number) {
        [topLabel setPoints:pointsLabel.number];
        [topLabel2 setPoints:pointsLabel.number];
        scoreInput = topLabel.number;
        NSLog(@"HighScore:" @"%ld", (long)scoreInput);
        scoreInputString = pointsLabel.text;
        Data *save = [[Data alloc]init];
        [save saveTopScore];
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        [defaults setObject:scoreInputString forKey:@"scoreInput"];
        [defaults synchronize];
        
    }
    
} //--Done--//
-(void)resumeFromLoss {
    
    NMPointsLabel *pointsLabel = (NMPointsLabel *)[self childNodeWithName:@"pointsLabel"];
    NMPointsLabel *pointsLabel2 = (NMPointsLabel *)[self childNodeWithName:@"pointsLabel2"];
    NMPointsLabel *gameOverPointsLabel = (NMPointsLabel *)[self childNodeWithName:@"gameOverPointsLabel"];
    NMPointsLabel *gameOverPointsLabel2 = (NMPointsLabel *)[self childNodeWithName:@"gameOverPointsLabel2"];
    NMPointsLabel *countDownLabel = (NMPointsLabel *)[self childNodeWithName:@"countDownLabel"];
    NMPointsLabel *foodCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"foodCollectedLabel"];
    NMPointsLabel *fruitsCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"fruitsCollectedLabel"];
    NMPointsLabel *vegetablesCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"vegetablesCollectedLabel"];
    NMPointsLabel *othersCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"othersCollectedLabel"];
    NMPointsLabel *foodsCountDownLabel = (NMPointsLabel *)[self childNodeWithName:@"foodsCountDownLabel"];
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    NMPointsLabel *topLabel = (NMPointsLabel *)[self childNodeWithName:@"topLabel"];
    NMPointsLabel *topLabel2 = (NMPointsLabel *)[self childNodeWithName:@"topLabel2"];
    NMPointsLabel *gameOC = (NMPointsLabel *)[self childNodeWithName:@"gameOC"];
    NMPointsLabel *gameOC2 = (NMPointsLabel *)[self childNodeWithName:@"gameOC2"];
    
    [gameOC removeFromParent];
    [gameOC2 removeFromParent];
    
    canPlay = YES;
    pointsLabel.hidden = NO;
    pointsLabel2.hidden = NO;
    gameOverPointsLabel.hidden = YES;
    gameOverPointsLabel2.hidden = YES;
    amountLabel.hidden = YES;
    topLabel.hidden = YES;
    topLabel2.hidden = YES;
    kasbE.hidden = YES;
    resumeFromLoss = YES;
    goDelay = NO;
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    pointsLabel.number = [defaults integerForKey:@"GOPLN"];
    
    NSUserDefaults *defaults1 = [NSUserDefaults standardUserDefaults];
    gameOverPointsLabel.number = [defaults1 integerForKey:@"GOPLN"];
    
    NSUserDefaults *defaults2 = [NSUserDefaults standardUserDefaults];
    countDownLabel.number = [defaults2 integerForKey:@"CDLN"];
    
    NSUserDefaults *defaults3 = [NSUserDefaults standardUserDefaults];
    foodCollectedLabel.number = [defaults3 integerForKey:@"FLN"];
    
    NSUserDefaults *defaults4 = [NSUserDefaults standardUserDefaults];
    fruitsCollectedLabel.number = [defaults4 integerForKey:@"FRLN"];
    
    NSUserDefaults *defaults5 = [NSUserDefaults standardUserDefaults];
    vegetablesCollectedLabel.number = [defaults5 integerForKey:@"VLN"];
    
    NSUserDefaults *defaults6 = [NSUserDefaults standardUserDefaults];
    othersCollectedLabel.number = [defaults6 integerForKey:@"OLN"];
    
    NSUserDefaults *defaults7 = [NSUserDefaults standardUserDefaults];
    foodsCountDownLabel.number = [defaults7 integerForKey:@"FCDLN"];
    
    NSUserDefaults *defaults8 = [NSUserDefaults standardUserDefaults];
    g = [defaults8 integerForKey:@"GRVTY"];
    
    [gSBlackScreen removeFromParent];
    [retryBox removeFromParent];
    [box991 removeFromParent];
    [retryBox2 removeFromParent];
    [box992 removeFromParent];
    [waitBox removeFromParent];
    [pMBuy removeFromParent];
    [pMBuy1 removeFromParent];
    [ok removeFromParent];
    [timeCircle removeFromParent];
    foodDFoodSK.speed = 1;
    sideFood.speed = 1;
    clouds.speed = 1;
    
    [self sideSprites];
    
    if (rankNumber > 0) {
       self.physicsWorld.gravity = CGVectorMake(0, g);
    }
    if (rankNumber == 1) {
        self.physicsWorld.gravity = CGVectorMake(0, -1);
    }
    
    
    if (self.rightWay == YES) {
        tutorialTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneTutorial"];
    }
    if (self.rightWay == NO) {
        tutorialTexture = [gameSceneSpritesFour textureNamed:@"FFGameSceneTutorial1"];
    }
    if (countDownLabel.secondsCount == 0) {
        [countDownLabel setTimer:30];
    }
    if (foodsCountDownLabel.secondsCount == 0) {
        [foodsCountDownLabel setTimer:30];
    }
    
    tutorial = [SKSpriteNode spriteNodeWithTexture:tutorialTexture];
    tutorial.position = CGPointZero;
    tutorial.size = CGSizeMake(tutorial.frame.size.width/s, tutorial.frame.size.height / s);
    tutorial.zPosition = 4.5;
    [self.spriteLayer addChild:tutorial];
    
    SKAction *hideTutorial = [SKAction fadeAlphaTo:0.0 duration:1];
    SKAction *showTutorial = [SKAction fadeAlphaTo:1.0 duration:1];
    SKAction *startGame1 = [SKAction performSelector:@selector(countdownGo) onTarget:self];
    SKAction *tutorialSequence = [SKAction sequence:@[showTutorial, hideTutorial, showTutorial, hideTutorial, startGame1]];
    SKAction *tutorialRepeat = [SKAction repeatActionForever:tutorialSequence];
    [tutorial runAction:tutorialRepeat];
    
    SKAction *wait4 = [SKAction waitForDuration:2];
    SKAction *depuase = [SKAction runBlock:^{
        self.sequenceLayer.paused = NO;
        //gravitySequence.speed = 1;
        sequenceFBG.speed = 1;
        sideFoodAnimSequence.speed = 1;
        if (invalidateTimer == NO) {
            if (countDownLabel.hidden == NO) {
                [self time];
            }
            if (foodsCountDownLabel.hidden == NO) {
                [self time2];
            }
        }
        [self countdownGo];
    }];
    SKAction *deSeq = [SKAction sequence:@[wait4,depuase]];
    [self runAction:deSeq];
    
    SKAction *countDownSequence = [SKAction sequence:@[[SKAction waitForDuration:3],[SKAction runBlock:^{
        pauseTexture = [buttonSprites textureNamed:@"FFGameScenePauseButton"];
        
        pause = [SKSpriteNode spriteNodeWithTexture:pauseTexture];
        pause.position = CGPointMake(-self.frame.size.width/2.6, self.frame.size.height/2.3);
        pause.size = CGSizeMake(pause.frame.size.width/s, pause.frame.size.height / s);
        pause.zPosition = 5;
        pause.name = @"Pause";
        [self.spriteLayer addChild:pause];
    }]]];
    [self runAction:countDownSequence];
    
}
-(void)deActivate {
    if (self.activateDP == YES) {
        [self deActivatedDP];
    }
    if (self.activateTP == YES) {
        [self deActivatedTP];
    }
    if (self.activateQP == YES) {
        [self deActivatedQP];
    }
    if (self.activateEL1 == YES) {
        [self deActivatedEL1];
    }
    if (self.activateEL2 == YES) {
        [self deActivatedEL2];
    }
    if (self.activateEL3 == YES) {
        [self deActivatedEL3];
    }
    if (self.activateHG10 == YES) {
        [self deActivatedHG10];
    }
    if (self.activateHG20 == YES) {
        [self deActivatedHG20];
    }
    if (self.activateHG30 == YES) {
        [self deActivatedHG30];
    }
    if (self.activateHS10 == YES) {
        [self deActivatedHS10];
    }
    if (self.activateHS20 == YES) {
        [self deActivatedHS20];
    }
    if (self.activateHS30 == YES) {
        [self deActivatedHS30];
    }
} //--Done--//

#pragma mark - Pause

-(void)removeSprites {
    
    [factoryBucksTitleBox removeFromParent];
    [gSBlackScreen removeFromParent];
    [gSHome removeFromParent];
    [gSRestart removeFromParent];
    [maxUpgradeBoxes removeFromParent];
    [ok removeFromParent];
    [box991 removeFromParent];
    [box992 removeFromParent];
    [pause removeFromParent];
    [pMBoxes removeFromParent];
    [pMBuy removeFromParent];
    [pMBuy1 removeFromParent];
    [pMFactoryBucksButton removeFromParent];
    [pMPowerUpsButton removeFromParent];
    [powerUpsTitleBox removeFromParent];
    [resume removeFromParent];
    [retryBox removeFromParent];
    [retryBox2 removeFromParent];
    [waitBox removeFromParent];
    [timeCircle removeFromParent];
    [speedReducerPM removeFromParent];
    [headStartPM removeFromParent];
    [extraLivesPM removeFromParent];
    [sidePM removeFromParent];
    [sideSR removeFromParent];
    [sideEL removeFromParent];
    [sideHS removeFromParent];
    [sideCS removeFromParent];
    [sidePUHolderPM removeFromParent];
    [pmScene removeFromParent];
    [srScene removeFromParent];
    [elScene removeFromParent];
    [trScene removeFromParent];
    [puBuy1  removeFromParent];
    [puBuy2 removeFromParent];
    [puBuy3 removeFromParent];
    [puBuy4 removeFromParent];
    [puBuy5 removeFromParent];
    [puBuy6 removeFromParent];
    [puBuy7 removeFromParent];
    [puBuy8 removeFromParent];
    [puBuy9 removeFromParent];
    [puBuy10 removeFromParent];
    [puBuy11 removeFromParent];
    [puBuy12 removeFromParent];
    [buy300k removeFromParent];
    [buy150k removeFromParent];
    [buy45k removeFromParent];
    [buy75k removeFromParent];
    [buy30k removeFromParent];
    [buy9k removeFromParent];
    
    
} //--Delete and change to pauseMenuSprites--//
-(void)pauseGame {
    
   
    Data *FBCount = [[Data alloc]init];
    [FBCount loadAmountFB];
    
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    amountLabel.position = CGPointMake(self.frame.size.width/5.5, self.frame.size.height/2.25);
    amountLabel.zPosition = 150;
    amountLabel.fontSize = 20;
    amountLabel.fontColor = [UIColor whiteColor];
    amountLabel.colorBlendFactor = 1;
    [amountLabel setPoints:amountFB];
    amountLabel.hidden = NO;
    
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    kasbE.position = CGPointMake(self.frame.size.width/5.5, self.frame.size.height/2.25);
    kasbE.zPosition = 149;
    kasbE.fontSize = 20;
    kasbE.fontColor = [UIColor blackColor];
    kasbE.colorBlendFactor = 1;
    [kasbE setPoints:amountFB];
    kasbE.hidden = NO;
    
    gSBlackScreenTexture = [gameSceneSpritesEight textureNamed:@"FFGameScenePauseScene"];
    
    gSBlackScreen = [SKSpriteNode spriteNodeWithTexture:gSBlackScreenTexture];
    gSBlackScreen.position = CGPointMake(0, 0);
    gSBlackScreen.size = CGSizeMake(gSBlackScreen.frame.size.width/s, gSBlackScreen.frame.size.height/s);
    gSBlackScreen.zPosition = 134;
    gSBlackScreen.alpha = 1;
    [self.pauseLayer addChild:gSBlackScreen];
    
    resumeTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuResume"];
    
    resume = [SKSpriteNode spriteNodeWithTexture:resumeTexture];
    resume.position = CGPointMake(self.frame.size.width/-2.4, self.frame.size.height/2.2);
    resume.size = CGSizeMake(resume.frame.size.width/s, resume.frame.size.height/s);
    resume.zPosition = 135;
    resume.name = @"Resume";
    [self.pauseLayer addChild:resume];
    
    pMBackButtonTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuBack"];
    
    pMBackButton = [SKSpriteNode spriteNodeWithTexture:pMBackButtonTexture];
    pMBackButton.position = CGPointMake(self.frame.size.width/-2.4, self.frame.size.height/2.6);
    pMBackButton.size = CGSizeMake(pMBackButton.frame.size.width/s, pMBackButton.frame.size.height/s);
    pMBackButton.zPosition = 135;
    pMBackButton.name = @"PMBack";
    [self.pauseLayer addChild:pMBackButton];
    
    gSHomeTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuHome"];
    
    gSHome = [SKSpriteNode spriteNodeWithTexture:gSHomeTexture];
    gSHome.position = CGPointMake(self.frame.size.width/-3.5, self.frame.size.height/2.2);
    gSHome.size = CGSizeMake(gSHome.frame.size.width/s, gSHome.frame.size.height/s);
    gSHome.zPosition = 135;
    gSHome.name = @"HomePM";
    [self.pauseLayer addChild:gSHome];
    
    gSRestartTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuRestart"];
    
    gSRestart = [SKSpriteNode spriteNodeWithTexture:gSRestartTexture];
    gSRestart.position = CGPointMake(self.frame.size.width/-6.7, self.frame.size.height/2.2);
    gSRestart.size = CGSizeMake(gSRestart.frame.size.width/s, gSRestart.frame.size.height/s);
    gSRestart.zPosition = 135;
    gSRestart.name = @"Restart";
    [self.pauseLayer addChild:gSRestart];
    
    pMPowerUpsButtonTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuPowerUpsButton"];
    
    pMPowerUpsButton = [SKSpriteNode spriteNodeWithTexture:pMPowerUpsButtonTexture];
    pMPowerUpsButton.position = CGPointMake(-self.frame.size.width/2.8, -self.frame.size.height/2.35);
    pMPowerUpsButton.size = CGSizeMake(pMPowerUpsButton.frame.size.width/s, pMPowerUpsButton.frame.size.height/s);
    pMPowerUpsButton.zPosition = 135;
    pMPowerUpsButton.name = @"PMPowerUpsButton";
    [self.pauseLayer addChild:pMPowerUpsButton];
    
    pMFactoryBucksButtonTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuFactoryBucksButton"];
    
    pMFactoryBucksButton = [SKSpriteNode spriteNodeWithTexture:pMFactoryBucksButtonTexture];
    pMFactoryBucksButton.position = CGPointMake(self.frame.size.width/2.8, -self.frame.size.height/2.35);
    pMFactoryBucksButton.size = CGSizeMake(pMFactoryBucksButton.frame.size.width/s, pMFactoryBucksButton.frame.size.height/s);
    pMFactoryBucksButton.zPosition = 135;
    pMFactoryBucksButton.name = @"PMFactoryBucksButton";
    [self.pauseLayer addChild:pMFactoryBucksButton];
    
    pMBoxesTexture = [gameSceneSpritesFive textureNamed:@"FFGameScenePauseMenuFactoryBucksLabel"];
    
    pMBoxes = [SKSpriteNode spriteNodeWithTexture:pMBoxesTexture];
    pMBoxes.position = CGPointZero;
    pMBoxes.size = CGSizeMake(pMBoxes.frame.size.width/s, pMBoxes.frame.size.height/s);
    pMBoxes.zPosition = 134.5;
    [self.pauseLayer addChild:pMBoxes];
    
    objectiveButtonTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuObjectivesButton"];
    
    objectiveButton = [SKSpriteNode spriteNodeWithTexture:objectiveButtonTexture];
    objectiveButton.position = CGPointMake(0, -self.frame.size.height/2.2);
    objectiveButton.size = CGSizeMake(objectiveButton.frame.size.width/s, objectiveButton.frame.size.height/s);
    objectiveButton.zPosition = 134.5;
    objectiveButton.name = @"ObjButton";
    [self.pauseLayer addChild:objectiveButton];
    
} //--Done--//
-(void)unPause {
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    NMPointsLabel *foodsCountDownLabel = (NMPointsLabel *)[self childNodeWithName:@"foodsCountDownLabel"];
    NMPointsLabel *countDownLabel = (NMPointsLabel *)[self childNodeWithName:@"countDownLabel"];
    kasbE.hidden = YES;
    amountLabel.hidden = YES;
    
    threeTexture = [gameSceneSpritesFive textureNamed:@"FFGameSceneCountdown3"];
    
    three = [SKSpriteNode spriteNodeWithTexture:threeTexture];
    three.position = CGPointZero;
    three.size = CGSizeMake(three.frame.size.width/s, three.frame.size.height/s);
    three.zPosition = 200;
    [self.gameLayer addChild:three];
    NSArray *textures = @[[SKTexture textureWithImageNamed:@"FFGameSceneCountdown3"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneCountdown2"],
                          [SKTexture textureWithImageNamed:@"FFGameSceneCountdown1"]];
    
    SKAction *countDown = [SKAction animateWithTextures:textures timePerFrame:1];
    SKAction *removeNumbers = [SKAction removeFromParent];
    SKAction *countDownSeq = [SKAction sequence:@[countDown,removeNumbers]];
    [three runAction:countDownSeq];
    SKAction *countDownSequence = [SKAction sequence:@[[SKAction waitForDuration:4.5],[SKAction runBlock:^{
        
        pauseTexture = [buttonSprites textureNamed:@"FFGameScenePauseButton"];
        
        pause = [SKSpriteNode spriteNodeWithTexture:pauseTexture];
        pause.position = CGPointMake(-self.frame.size.width/2.6, self.frame.size.height/2.3);
        pause.size = CGSizeMake(pause.frame.size.width/s, pause.frame.size.height/s);
        pause.zPosition = 5;
        pause.name = @"Pause";
        [self.spriteLayer addChild:pause];
        
    }]]];
    [self runAction:countDownSequence];
    
    [self sideSprites];
    
    if (canActivateDP == YES || canActivateTP == YES || canActivateQP == YES || canActivateEL1 == YES || canActivateEL2 == YES || canActivateEL3 == YES || canActivateHG10 == YES || canActivateHG20 == YES || canActivateHG30 == YES || canActivateHS10 == YES || canActivateHS20 == YES || canActivateHS30 == YES) {
        
        [powerUpHolder removeFromParent];
        
        powerUpHolderTexture = [gameSceneSpritesFive textureNamed:@"FFGameScenePowerUpAnimHolder"];
        
        powerUpHolder = [SKSpriteNode spriteNodeWithTexture:powerUpHolderTexture];
        powerUpHolder.position = CGPointZero;
        powerUpHolder.size = CGSizeMake(powerUpHolder.frame.size.width/s, powerUpHolder.frame.size.height / s);
        powerUpHolder.zPosition = 4.9;
        [self.spriteLayer addChild:powerUpHolder];
        
    }
    
    SKAction *wait4 = [SKAction waitForDuration:3];
    SKAction *depuase = [SKAction runBlock:^{
        pauseMenuObjectiveSprites = nil;
        pauseMenuFoodSprites = nil;
        gameSceneSpritesEight = nil;
        if (invalidateTimer == NO) {
            if (countDownLabel.hidden == NO) {
                [self time];
            }
            if (foodsCountDownLabel.hidden == NO) {
                [self time2];
            }
        }
        //[self runAction:gravitySequence withKey:@"G1"];
        self.spriteLayer.paused = NO;
        self.sequenceLayer.paused = NO;
        freeze = NO;
        //flipSequnce.speed = 1;
        sprite.physicsBody.dynamic = YES;
        
        if (self.activateHS10 == YES & asNum <= 5 == YES) {
            if (self.rightWay == YES) {
                if (self.isAFruit == YES) {
                    
                    [sprite runAction:autoSwipeF withKey:@"LeftSwipe"];
                    
                }
                if (self.isAVeggy == YES) {
                    
                    [sprite runAction:autoSwipeV withKey:@"RightSwipe"];
                    
                }
            }
            if (self.rightWay == NO) {
                if (self.isAFruit == YES) {
                    
                    [sprite runAction:autoSwipeV withKey:@"LeftSwipe"];
                    
                }
                if (self.isAVeggy == YES) {
                    
                    [sprite runAction:autoSwipeF withKey:@"RightSwipe"];
                    
                }
            }
            if (self.isAOther == YES) {
                
                [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
                
            }
        }
        if (self.activateHS20 == YES & asNum <= 10) {
            if (self.rightWay == YES) {
                if (self.isAFruit == YES) {
                    
                    [sprite runAction:autoSwipeF withKey:@"LeftSwipe"];
                    
                }
                if (self.isAVeggy == YES) {
                    
                    [sprite runAction:autoSwipeV withKey:@"RightSwipe"];
                    
                }
            }
            if (self.rightWay == NO) {
                if (self.isAFruit == YES) {
                    
                    [sprite runAction:autoSwipeV withKey:@"LeftSwipe"];
                    
                }
                if (self.isAVeggy == YES) {
                    
                    [sprite runAction:autoSwipeF withKey:@"RightSwipe"];
                    
                }
            }
            if (self.isAOther == YES) {
                
                [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
                
            }
        }
        if (self.activateHS30 == YES & asNum <= 15) {
            if (self.rightWay == YES) {
                if (self.isAFruit == YES) {
                    
                    [sprite runAction:autoSwipeF withKey:@"LeftSwipe"];
                    
                }
                if (self.isAVeggy == YES) {
                    
                    [sprite runAction:autoSwipeV withKey:@"RightSwipe"];
                    
                }
            }
            if (self.rightWay == NO) {
                if (self.isAFruit == YES) {
                    
                    [sprite runAction:autoSwipeV withKey:@"LeftSwipe"];
                    
                }
                if (self.isAVeggy == YES) {
                    
                    [sprite runAction:autoSwipeF withKey:@"RightSwipe"];
                    
                }
            }
            if (self.isAOther == YES) {
                
                [sprite runAction:[SKAction sequence:@[autoSwipeO]] withKey:@"BotSwipe"];
                
            }
        }
        }];
    SKAction *deSeq = [SKAction sequence:@[wait4,depuase]];
    [self runAction:deSeq];
    
    //self.paused = NO;
} //--Done--//
-(void)factoryBucksScene {
    
    factoryBucksTitleBoxTexture = [gameSceneSpritesEight textureNamed:@"FFGameScenePauseMenuFactoryBucksScene"];
    
    factoryBucksTitleBox = [SKSpriteNode spriteNodeWithTexture:factoryBucksTitleBoxTexture];
    factoryBucksTitleBox.position = CGPointZero;
    factoryBucksTitleBox.size = CGSizeMake(factoryBucksTitleBox.frame.size.width/s, factoryBucksTitleBox.frame.size.height/s);
    factoryBucksTitleBox.zPosition = 250;
    [self.pauseLayer addChild:factoryBucksTitleBox];
    
    buy300kTexture = [buttonSprites textureNamed:@"ShopBuyButton"];
    
    buy300k = [SKSpriteNode spriteNodeWithTexture:buy300kTexture];
    buy300k.position = CGPointMake(self.frame.size.width/-25, self.frame.size.height/4);
    buy300k.size = CGSizeMake(buy300k.frame.size.width/s, buy300k.frame.size.height/s);
    buy300k.zPosition = 251;
    buy300k.name = @"buy300k";
    [self.pauseLayer addChild:buy300k];
    
    buy150kTexture = [buttonSprites textureNamed:@"ShopBuyButton"];
    
    buy150k = [SKSpriteNode spriteNodeWithTexture:buy150kTexture];
    buy150k.position = CGPointMake(self.frame.size.width/-25, self.frame.size.height/8);
    buy150k.size = CGSizeMake(buy150k.frame.size.width/s, buy150k.frame.size.height/s);
    buy150k.zPosition = 251;
    buy150k.name = @"buy150k";
    [self.pauseLayer addChild:buy150k];
    
    buy75kTexture = [buttonSprites textureNamed:@"ShopBuyButton"];
    
    buy75k = [SKSpriteNode spriteNodeWithTexture:buy75kTexture];
    buy75k.position = CGPointMake(self.frame.size.width/-25, self.frame.size.height/90);
    buy75k.size = CGSizeMake(buy75k.frame.size.width/s, buy75k.frame.size.height/s);
    buy75k.zPosition = 251;
    buy75k.name = @"buy75k";
    [self.pauseLayer addChild:buy75k];
    
    buy45kTexture = [buttonSprites textureNamed:@"ShopBuyButton"];
    
    buy45k = [SKSpriteNode spriteNodeWithTexture:buy45kTexture];
    buy45k.position = CGPointMake(self.frame.size.width/-25, -self.frame.size.height/10);
    buy45k.size = CGSizeMake(buy45k.frame.size.width/s, buy45k.frame.size.height/s);
    buy45k.zPosition = 251;
    buy45k.name = @"buy45k";
    [self.pauseLayer addChild:buy45k];
    
    buy30kTexture = [buttonSprites textureNamed:@"ShopBuyButton"];
    
    buy30k = [SKSpriteNode spriteNodeWithTexture:buy30kTexture];
    buy30k.position = CGPointMake(self.frame.size.width/-25, -self.frame.size.height/5.1);
    buy30k.size = CGSizeMake(buy30k.frame.size.width/s, buy30k.frame.size.height/s);
    buy30k.zPosition = 251;
    buy30k.name = @"buy30k";
    [self.pauseLayer addChild:buy30k];
    
    buy9kTexture = [buttonSprites textureNamed:@"ShopBuyButton"];
    
    buy9k = [SKSpriteNode spriteNodeWithTexture:buy9kTexture];
    buy9k.position = CGPointMake(self.frame.size.width/-25, -self.frame.size.height/3.35);
    buy9k.size = CGSizeMake(buy9k.frame.size.width/s, buy9k.frame.size.height/s);
    buy9k.zPosition = 251;
    buy9k.name = @"buy9k";
    [self.pauseLayer addChild:buy9k];
    
} // FactoryBucksScene --- Pause Menu --- ))))))))))000000000000
-(void)powerUpsScene {
    
    
    
    sidePMTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuPMButton"];
    
    sidePM = [SKSpriteNode spriteNodeWithTexture:sidePMTexture];
    sidePM.position = CGPointMake(self.frame.size.width/-2.8, self.frame.size.height/5);
    sidePM.size = CGSizeMake(sidePM.frame.size.width/s, sidePM.frame.size.height/s);
    sidePM.zPosition = 135;
    sidePM.name = @"PointsMultiplier";
    [self.pauseLayer addChild:sidePM];
    
    sideSRTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuSRButton"];
    
    sideSR = [SKSpriteNode spriteNodeWithTexture:sideSRTexture];
    sideSR.position = CGPointMake(self.frame.size.width/-2.8, self.frame.size.height/12);
    sideSR.size = CGSizeMake(sideSR.frame.size.width/s, sideSR.frame.size.height/s);
    sideSR.zPosition = 135;
    sideSR.name = @"SpeedReducer";
    [self.pauseLayer addChild:sideSR];
    
    sideELTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuELButton"];
    
    sideEL = [SKSpriteNode spriteNodeWithTexture:sideELTexture];
    sideEL.position = CGPointMake(self.frame.size.width/-2.8, -self.frame.size.height/30);
    sideEL.size = CGSizeMake(sideEL.frame.size.width/s, sideEL.frame.size.height/s);
    sideEL.zPosition = 135;
    sideEL.name = @"ExtraLives";
    [self.pauseLayer addChild:sideEL];
    
    sideHSTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuTRButton"];
    
    sideHS = [SKSpriteNode spriteNodeWithTexture:sideHSTexture];
    sideHS.position = CGPointMake(self.frame.size.width/-2.8, -self.frame.size.height/6.7);
    sideHS.size = CGSizeMake(sideHS.frame.size.width/s, sideHS.frame.size.height/s);
    sideHS.zPosition = 135;
    sideHS.name = @"HeadStart";
    [self.pauseLayer addChild:sideHS];
    
    sidePDTexture = [buttonSprites textureNamed:@"FFGameScenePauseMenuPDButton"];
    
    sidePD = [SKSpriteNode spriteNodeWithTexture:sidePDTexture];
    sidePD.position = CGPointMake(self.frame.size.width/-2.8, -self.frame.size.height/3.8);
    sidePD.size = CGSizeMake(sidePD.frame.size.width/s, sidePD.frame.size.height/s);
    sidePD.zPosition = 135;
    sidePD.name = @"PackageDeals";
    [self.pauseLayer addChild:sidePD];
    
    
} // PowerUpScene --- Pause Menu --- ))))))))))000000000000
-(void)removeAtlasMemory {
    gameSceneSpritesOne = nil;
    gameSceneSpritesTwo = nil;
    gameSceneSpritesThree = nil;
    gameSceneSpritesFour = nil;
    gameSceneSpritesFive = nil;
    gameSceneSpritesSix = nil;
    gameSceneSpritesSeven = nil;
    gameSceneSpritesEight = nil;
    gameSceneSpritesNine = nil;
    reggyTauntSprites = nil;
    foodSprites = nil;
    powerUpAnimSprites1 = nil;
    congradSpritesOne = nil;
     congradSpritesTwo = nil;
     //congradSpritesThree = nil;
     congradSpritesFive = nil;
     congradSpritesFour = nil;
     congranSpritesFour = nil;
     congradSpritesSix = nil;
     congradSpritesSeven = nil;
     congradSpritesEight = nil;
     congradSpritesNine = nil;
     congradSpritesTen = nil;
     congradSpritesEleven = nil;
     congradSpritesTwelve = nil;
     congradSpritesThirteen = nil;
     congradSpritesFourteen = nil;
     congradSpritesFifteen = nil;
     prizeShineSprites = nil;
     pauseMenuObjectiveSprites = nil;
     pauseMenuFoodSprites = nil;
     reggyAnimSprites = nil;
     bossBattleIntro1 = nil;
     lightningAttackSprites1 = nil;
     lightningAttackSprites2 = nil;
     lightningAttackSprites3 = nil;
     lightningAttackSprites4 = nil;
     lightningAttackSprites5 = nil;
     ReggyBatPull = nil;
     ReggyWave = nil;
     ReggySmashSprites = nil;
     ReggyFoodFallSprites = nil;
     ReggyEatSprites = nil;
     ReggySheildSprites = nil;
     ReggyMotherBoardSprites = nil;
     ReggyBigMistake = nil;
     ReggySpareMe = nil;
     ReggyWeakHumans = nil;
     ReggyReggyBoom = nil;
     EnergyPullSprites = nil;
     HealthBarSprites = nil;
     shadeAnimSprites = nil;
     creditSprites = nil;
    [self.spriteLayer removeActionForKey:@"G1"];
    [self.sequenceLayer removeAllActions];
}
-(void)goToLoadingScreen {
    
    self.skView = (SKView *)self.view;
    [self.skView presentScene:nil];
    [self removeAtlasMemory];
    // Create and configure the scene.
    LoadingScreen *Lscene = [LoadingScreen sceneWithSize:self.skView.bounds.size];
    self.scene.scaleMode = SKSceneScaleModeAspectFill;
    
    // Present the scene.
    [self.skView presentScene:Lscene];
    
}
-(void)goToHomeScreen {
    
    self.skView = (SKView *)self.view;
    [self.skView presentScene:nil];
    [self removeAtlasMemory];
    // Create and configure the scene.
    MainMenu *Mainscene = [MainMenu sceneWithSize:self.skView.bounds.size];
    self.scene.scaleMode = SKSceneScaleModeAspectFill;
    
    // Present the scene.
    [self.skView presentScene:Mainscene];
    
    
}
-(void)goToVictoryPrizeScreen {
    
    self.skView = (SKView *)self.view;
    [self.skView presentScene:nil];
    [self removeAtlasMemory];
    // Create and configure the scene.
    VictoryPrizeScreen *VictoryScreen = [VictoryPrizeScreen sceneWithSize:self.skView.bounds.size];
    VictoryScreen.scaleMode = SKSceneScaleModeAspectFill;
    // Present the scene.
    [self.skView presentScene:VictoryScreen];
    
}
-(void)goToArcadeScreen {
    
    self.skView = (SKView *)self.view;
    [self.skView presentScene:nil];
    [self removeAtlasMemory];
    // Create and configure the scene.
    ArcadeMenu *FFArcade = [[ArcadeMenu alloc]initWithSize:self.skView.bounds.size];
    FFArcade = [ArcadeMenu sceneWithSize:self.skView.bounds.size];
    FFArcade.scaleMode = SKSceneScaleModeAspectFill;
    // Present the scene.
    [self.skView presentScene:FFArcade];
    
}
-(void)goToNormalMode {
    
    NSLog(@"Play");
    
    self.skView = (SKView *)self.view;
    [self.skView presentScene:nil];
    [self removeAtlasMemory];
    // Create and configure the scene.
    GameScene *Gscene = [GameScene sceneWithSize:self.skView.bounds.size];
    Gscene.scaleMode = SKSceneScaleModeAspectFill;
    
    // Load the level.
    //NormalLogic *logic = [[NormalLogic alloc] init];
    //Gscene.logic = logic;
    
    // Present the scene.
    [self.skView presentScene:Gscene];
    
}
-(void)leaveGame {
    if (gameBegan == NO || beatObj == YES) {
        [self goToArcadeScreen];
    }
    
    if (gameBegan == YES & beatObj == NO) {
    [self.pauseLayer removeFromParent];
    [self.pauseLayer removeAllChildren];
    [self.pauseLayer removeAllActions];
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    amountLabel.hidden = YES;
    kasbE.hidden = YES;
    
    leaveGamePSTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneEndGameProjection"];
    
    leaveGamePS = [SKSpriteNode spriteNodeWithTexture:leaveGamePSTexture];
    leaveGamePS.position = CGPointZero;
    leaveGamePS.size = CGSizeMake(leaveGamePS.frame.size.width/s, leaveGamePS.frame.size.height/s);
    leaveGamePS.zPosition = 200;
    [self.spriteLayer addChild:leaveGamePS];
    
    
    okPSTexture = [buttonSprites textureNamed:@"FFGameSceneEndGameProjectionOK"];
    
    okPS = [SKSpriteNode spriteNodeWithTexture:okPSTexture];
    okPS.position = CGPointMake(self.frame.size.width/9, self.frame.size.height/7);
    okPS.size = CGSizeMake(okPS.frame.size.width/s, okPS.frame.size.height/s);
    okPS.zPosition = 201;
    okPS.name = @"okPSAM";
    [self.spriteLayer addChild:okPS];
    
    
    cancelPSTexture = [buttonSprites textureNamed:@"FFGameSceneEndGameProjectionCancel"];
    
    cancelPS = [SKSpriteNode spriteNodeWithTexture:cancelPSTexture];
    cancelPS.position = CGPointMake(self.frame.size.width/8, -self.frame.size.height/13);
    cancelPS.size = CGSizeMake(cancelPS.frame.size.width/s, cancelPS.frame.size.height/s);
    cancelPS.zPosition = 201;
    cancelPS.name = @"cancelPS";
    [self.spriteLayer addChild:cancelPS];
    }
}
-(void)leaveGame2 {
    
    if (gameBegan == NO || beatObj == YES) {
        [self goToHomeScreen];
    }
    
    if (gameBegan == YES & beatObj == NO) {
    [self.pauseLayer removeFromParent];
    [self.pauseLayer removeAllChildren];
    [self.pauseLayer removeAllActions];
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    amountLabel.hidden = YES;
    kasbE.hidden = YES;
    
    leaveGamePSTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneEndGameProjection"];
    
    leaveGamePS = [SKSpriteNode spriteNodeWithTexture:leaveGamePSTexture];
    leaveGamePS.position = CGPointZero;
    leaveGamePS.size = CGSizeMake(leaveGamePS.frame.size.width/s, leaveGamePS.frame.size.height/s);
    leaveGamePS.zPosition = 200;
    [self.spriteLayer addChild:leaveGamePS];
    
    
    okPSTexture = [buttonSprites textureNamed:@"FFGameSceneEndGameProjectionOK"];
    
    okPS = [SKSpriteNode spriteNodeWithTexture:okPSTexture];
    okPS.position = CGPointMake(self.frame.size.width/9, self.frame.size.height/7);
    okPS.size = CGSizeMake(okPS.frame.size.width/s, okPS.frame.size.height/s);
    okPS.zPosition = 201;
    okPS.name = @"okPSH";
    [self.spriteLayer addChild:okPS];
    
    
    cancelPSTexture = [buttonSprites textureNamed:@"FFGameSceneEndGameProjectionCancel"];
    
    cancelPS = [SKSpriteNode spriteNodeWithTexture:cancelPSTexture];
    cancelPS.position = CGPointMake(self.frame.size.width/8, -self.frame.size.height/13);;
    cancelPS.size = CGSizeMake(cancelPS.frame.size.width/s, cancelPS.frame.size.height/s);
    cancelPS.zPosition = 201;
    cancelPS.name = @"cancelPS";
    [self.spriteLayer addChild:cancelPS];
    }
    
}
-(void)restartGame {
    
    if (gameBegan == NO || beatObj == YES) {
        [self goToNormalMode];
    }
    
    if (gameBegan == YES & beatObj == NO) {
    [self.pauseLayer removeFromParent];
    [self.pauseLayer removeAllChildren];
    [self.pauseLayer removeAllActions];
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    amountLabel.hidden = YES;
    kasbE.hidden = YES;
    
    leaveGamePSTexture = [gameSceneSpritesSeven textureNamed:@"FFGameSceneEndGameProjection1"];
    
    leaveGamePS = [SKSpriteNode spriteNodeWithTexture:leaveGamePSTexture];
    leaveGamePS.position = CGPointZero;
    leaveGamePS.size = CGSizeMake(leaveGamePS.frame.size.width/s, leaveGamePS.frame.size.height/s);
    leaveGamePS.zPosition = 200;
    [self.spriteLayer addChild:leaveGamePS];
    
    
    okPSTexture = [buttonSprites textureNamed:@"FFGameSceneEndGameProjectionOK"];
    
    okPS = [SKSpriteNode spriteNodeWithTexture:okPSTexture];
    okPS.position = CGPointMake(self.frame.size.width/9, self.frame.size.height/7);
    okPS.size = CGSizeMake(okPS.frame.size.width/s, okPS.frame.size.height/s);
    okPS.zPosition = 201;
    okPS.name = @"okPSRS";
    [self.spriteLayer addChild:okPS];
    
    
    cancelPSTexture = [buttonSprites textureNamed:@"FFGameSceneEndGameProjectionCancel"];
    
    cancelPS = [SKSpriteNode spriteNodeWithTexture:cancelPSTexture];
    cancelPS.position = CGPointMake(self.frame.size.width/8, -self.frame.size.height/13);
    cancelPS.size = CGSizeMake(cancelPS.frame.size.width/s, cancelPS.frame.size.height/s);
    cancelPS.zPosition = 201;
    cancelPS.name = @"cancelPS";
    [self.spriteLayer addChild:cancelPS];
    }
    
}
-(void)revive {
    
    NSUserDefaults *defaults8 = [NSUserDefaults standardUserDefaults];
    g = [defaults8 integerForKey:@"GRVTY"];
    
    [ReggyBot removeFromParent];
    [reggyFace removeFromParent];
    [retryBattle removeFromParent];
    [reviveButton removeFromParent];
    endB = NO;
    
    self.reggyLayer = [SKNode node];
    self.reggyLayer.position = CGPointZero;
    
    [self.spriteLayer addChild:self.reggyLayer];
    
    cycle = 0;
    
    [humanHealthBar removeFromParent];
    [energyBar removeFromParent];
    [lifeBarCount removeFromParent];
    
    humanHPNum = 10;
    humanHP = 0;
    ep = 0;
    
    lifeBarCount = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
    lifeBarCount.position = CGPointMake(-self.frame.size.width/3.55, -self.frame.size.height/2.82);
    lifeBarCount.name = @"lifeBarCount";
    lifeBarCount.colorBlendFactor = 1;
    lifeBarCount.fontColor = [UIColor whiteColor];
    lifeBarCount.zPosition = 1000;
    lifeBarCount.fontSize = 10;
    lifeBarCount.text = [NSString stringWithFormat:@" %li %@",(long)humanHPNum, @"/ 10"];
    [self.spriteLayer addChild:lifeBarCount];
    
    NSString *currentelement = [humanHPArray objectAtIndex:humanHP];
    humanHealthBarTexture = [HealthBarSprites textureNamed:currentelement];
    humanHealthBar = [SKSpriteNode spriteNodeWithTexture:humanHealthBarTexture];
    humanHealthBar.position = CGPointZero;
    humanHealthBar.zPosition = 999;
    [self.spriteLayer addChild:humanHealthBar];
    
    NSString *currentelement1 = [energy objectAtIndex:ep];
    energyBarTexture = [HealthBarSprites textureNamed:currentelement1];
    energyBar = [SKSpriteNode spriteNodeWithTexture:energyBarTexture];
    energyBar.position = CGPointZero;
    energyBar.zPosition = 998;
    [self.spriteLayer addChild:energyBar];
    
    
    if (rankNumber == 27) {
        [self battleSequence1];
    }
    if (rankNumber == 28) {
        [self battleSequence2];
    }
    if (rankNumber == 29) {
        [self battleSequence3];
    }
    [self countdownGo];
    
}
-(void)refillLives {
    
    [life5Machine removeActionForKey:@"L1"];
    [life4Machine removeActionForKey:@"L2"];
    [life3Machine removeActionForKey:@"L3"];
    [life2Machine removeActionForKey:@"L4"];
    [life1Machine removeActionForKey:@"L5"];
    [life10Machine removeActionForKey:@"L6"];
    [life9Machine removeActionForKey:@"L7"];
    [life8Machine removeActionForKey:@"L8"];
    [life7Machine removeActionForKey:@"L9"];
    [life6Machine removeActionForKey:@"L10"];
    [life5Machine removeActionForKey:@"L11"];
    [life4Machine removeActionForKey:@"L12"];
    [life3Machine removeActionForKey:@"L13"];
    [life2Machine removeActionForKey:@"L14"];
    [life1Machine removeActionForKey:@"L15"];
    
    if (canPlay == NO) {
        canPlay = YES;
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        [defaults setBool:canPlay forKey:@"canPlay"];
        [defaults synchronize];
    }
    if ((currentGameNumber > 4 & maxPlaysLvl == 0) || (currentGameNumber > 9 & maxPlaysLvl == 1)) {
        
        replayButtonTexture = [buttonSprites textureNamed:@"FFGameSceneGameOverRestart"];
        
        replayButton = [SKSpriteNode spriteNodeWithTexture:replayButtonTexture];
        replayButton.position = CGPointMake(0, 2000);
        replayButton.size = CGSizeMake(replayButton.frame.size.width/s, replayButton.frame.size.height / s);
        replayButton.name = @"ReplayButton";
        replayButton.zPosition = 104;
        [self.spriteLayer addChild:replayButton];
        
        SKAction *replayButtonWait = [SKAction waitForDuration:2.0];
        SKAction *replayButtonMove = [SKAction moveTo:CGPointMake(0, 0) duration:1];
        SKAction *replayButtonBounce = [SKAction moveTo:CGPointMake(0, 20) duration:0.2];
        SKAction *replayButtonFall = [SKAction moveTo:CGPointMake(-self.frame.size.width/4, -self.frame.size.height/9) duration:0.2];
        SKAction *replayButtonSequence = [SKAction sequence:@[replayButtonWait,replayButtonMove,replayButtonBounce,replayButtonFall]];
        [replayButton runAction:replayButtonSequence];
    }
    
    RankLogic *upgradMXLLVL = [[RankLogic alloc]init];
    [upgradMXLLVL incrementMaxPlays];
    
    SKAction *group = [SKAction group:@[[SKAction rotateByAngle:M_PI * 2 duration:0.4],
                                        [SKAction scaleTo:0.0 duration:0.5]]];
    SKAction *sequence = [SKAction sequence:@[group,[SKAction removeFromParent]]];
    [lifeMachineLocks runAction:sequence];
    [lifeMachineUPGButton runAction:sequence];
    
    SKAction *seq = [SKAction sequence:@[[SKAction waitForDuration:1],[SKAction performSelector:@selector(lifeMachines) onTarget:self]]];
    [self runAction:seq];
    
}
-(void)upgradeLives {
    
    [life5Machine removeActionForKey:@"L1"];
    [life4Machine removeActionForKey:@"L2"];
    [life3Machine removeActionForKey:@"L3"];
    [life2Machine removeActionForKey:@"L4"];
    [life1Machine removeActionForKey:@"L5"];
    [life10Machine removeActionForKey:@"L6"];
    [life9Machine removeActionForKey:@"L7"];
    [life8Machine removeActionForKey:@"L8"];
    [life7Machine removeActionForKey:@"L9"];
    [life6Machine removeActionForKey:@"L10"];
    [life5Machine removeActionForKey:@"L11"];
    [life4Machine removeActionForKey:@"L12"];
    [life3Machine removeActionForKey:@"L13"];
    [life2Machine removeActionForKey:@"L14"];
    [life1Machine removeActionForKey:@"L15"];
    
    if (canPlay == NO) {
        canPlay = YES;
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        [defaults setBool:canPlay forKey:@"canPlay"];
        [defaults synchronize];
    }
    if ((currentGameNumber > 4 & maxPlaysLvl == 0) || (currentGameNumber > 9 & maxPlaysLvl == 1)) {
        
        replayButtonTexture = [buttonSprites textureNamed:@"FFGameSceneGameOverRestart"];
        
        replayButton = [SKSpriteNode spriteNodeWithTexture:replayButtonTexture];
        replayButton.position = CGPointMake(0, 2000);
        replayButton.size = CGSizeMake(replayButton.frame.size.width/s, replayButton.frame.size.height / s);
        replayButton.name = @"ReplayButton";
        replayButton.zPosition = 104;
        [self.spriteLayer addChild:replayButton];
        
        SKAction *replayButtonWait = [SKAction waitForDuration:2.0];
        SKAction *replayButtonMove = [SKAction moveTo:CGPointMake(0, 0) duration:1];
        SKAction *replayButtonBounce = [SKAction moveTo:CGPointMake(0, 20) duration:0.2];
        SKAction *replayButtonFall = [SKAction moveTo:CGPointMake(-self.frame.size.width/4, -self.frame.size.height/9) duration:0.2];
        SKAction *replayButtonSequence = [SKAction sequence:@[replayButtonWait,replayButtonMove,replayButtonBounce,replayButtonFall]];
        [replayButton runAction:replayButtonSequence];
    }
    
    RankLogic *upgradMXLLVL = [[RankLogic alloc]init];
    [upgradMXLLVL incrementMaxPlays];
    
    SKAction *group = [SKAction group:@[[SKAction rotateByAngle:M_PI * 2 duration:0.4],
                                        [SKAction scaleTo:0.0 duration:0.5]]];
    SKAction *sequence = [SKAction sequence:@[group,[SKAction removeFromParent]]];
    [lifeMachineLocks runAction:sequence];
    [lifeMachineUPGButton runAction:sequence];
    
    SKAction *seq = [SKAction sequence:@[[SKAction waitForDuration:1],[SKAction performSelector:@selector(lifeMachines) onTarget:self]]];
    [self runAction:seq];
    
}
-(void)help {
    
    [helpButton removeFromParent];
    canHelp = YES;
    helpActivated = YES;
    RankLogic *saveHelp = [[RankLogic alloc]init];
    [saveHelp saveHelpActivated];
    
}
-(void)increment300000 {
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    
    [amountLabel setPoints:amountLabel.amount + 300000];
    [kasbE setPoints:kasbE.amount + 300000];
    
    FactoryBucksLabel *increment300000 = [[FactoryBucksLabel alloc]init];
    [increment300000 incrementBy300000];
    
    Data *save = [[Data alloc]init];
    [save saveAmountFB];
    
}
-(void)increment150000 {
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    
    [amountLabel setPoints:amountLabel.amount + 150000];
    [kasbE setPoints:kasbE.amount + 150000];
    
    FactoryBucksLabel *increment150000 = [[FactoryBucksLabel alloc]init];
    [increment150000 incrementBy150000];
    
    Data *save = [[Data alloc]init];
    [save saveAmountFB];
    
}
-(void)increment75000 {
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    
    [amountLabel setPoints:amountLabel.amount + 75000];
    [kasbE setPoints:kasbE.amount + 75000];
    
    FactoryBucksLabel *increment75000 = [[FactoryBucksLabel alloc]init];
    [increment75000 incrementBy75000];
    
    Data *save = [[Data alloc]init];
    [save saveAmountFB];
    
}
-(void)increment45000 {
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    
    [amountLabel setPoints:amountLabel.amount + 45000];
    [kasbE setPoints:kasbE.amount + 45000];
    
    FactoryBucksLabel *increment45000 = [[FactoryBucksLabel alloc]init];
    [increment45000 incrementBy45000];
    
    Data *save = [[Data alloc]init];
    [save saveAmountFB];
    
}
-(void)increment30000 {
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    
    [amountLabel setPoints:amountLabel.amount + 30000];
    [kasbE setPoints:kasbE.amount + 30000];
    
    FactoryBucksLabel *increment30000 = [[FactoryBucksLabel alloc]init];
    [increment30000 incrementBy30000];
    
    Data *save = [[Data alloc]init];
    [save saveAmountFB];
    
}
-(void)increment9000 {
    
    FactoryBucksLabel *amountLabel = (FactoryBucksLabel *)[self childNodeWithName:@"amountLabel"];
    FactoryBucksLabel *kasbE = (FactoryBucksLabel *)[self childNodeWithName:@"kasbE"];
    
    [amountLabel setPoints:amountLabel.amount + 9000];
    [kasbE setPoints:kasbE.amount + 9000];
    
    FactoryBucksLabel *increment9000 = [[FactoryBucksLabel alloc]init];
    [increment9000 incrementBy9000];
    
    Data *save = [[Data alloc]init];
    [save saveAmountFB];
    
}
-(void)godModePack {
    
    ShopLogic *godPack = [[ShopLogic alloc]init];
    [godPack buyGodPack];
    
    PowerUpAmountsLabel *tpLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel"];
    PowerUpAmountsLabel *tpLabel2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel2"];
    
    [tpLabel setPoints:tpLabel.number + 3];
    [tpLabel2 setPoints:tpLabel2.number + 3];
    
    ShopLogic *saveTP = [[ShopLogic alloc]init];
    [saveTP loadTPInteger];
    
    PowerUpAmountsLabel *qpLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"qpLabel"];
    PowerUpAmountsLabel *qpLabel2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"qpLabel2"];
    
    [qpLabel setPoints:qpLabel.number + 7];
    [qpLabel2 setPoints:qpLabel2.number + 7];
    
    ShopLogic *saveQP = [[ShopLogic alloc]init];
    [saveQP loadQPInteger];
    
    PowerUpAmountsLabel *el2Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label"];
    PowerUpAmountsLabel *el2Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label2"];
    
    [el2Label setPoints:el2Label.number + 3];
    [el2Label2 setPoints:el2Label2.number + 3];
    
    ShopLogic *saveEL2 = [[ShopLogic alloc]init];
    [saveEL2 loadEL2Integer];
    
    PowerUpAmountsLabel *el3Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el3Label"];
    PowerUpAmountsLabel *el3Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el3Label2"];
    
    [el3Label setPoints:el3Label.number + 7];
    [el3Label2 setPoints:el3Label2.number + 7];
    
    ShopLogic *saveEL3 = [[ShopLogic alloc]init];
    [saveEL3 loadEL3Integer];
    
    PowerUpAmountsLabel *hg20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label"];
    PowerUpAmountsLabel *hg20Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label2"];
    
    [hg20Label setPoints:hg20Label.number + 3];
    [hg20Label2 setPoints:hg20Label2.number + 3];
    
    ShopLogic *saveHG20 = [[ShopLogic alloc]init];
    [saveHG20 loadHG20Integer];
    
    PowerUpAmountsLabel *hg30Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg30Label"];
    PowerUpAmountsLabel *hg30Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg30Label2"];
    
    [hg30Label setPoints:hg30Label.number + 7];
    [hg30Label2 setPoints:hg30Label2.number + 7];
    
    ShopLogic *saveHG30 = [[ShopLogic alloc]init];
    [saveHG30 loadHG30Integer];
    
    PowerUpAmountsLabel *hs20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label"];
    PowerUpAmountsLabel *hs20Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label2"];
    
    [hs20Label setPoints:hs20Label.number + 3];
    [hs20Label2 setPoints:hs20Label2.number + 3];
    
    ShopLogic *saveHS20 = [[ShopLogic alloc]init];
    [saveHS20 loadHS20Integer];
    
    PowerUpAmountsLabel *hs30Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs30Label"];
    PowerUpAmountsLabel *hs30Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs30Label2"];
    
    [hs30Label setPoints:hs30Label.number + 7];
    [hs30Label2 setPoints:hs30Label2.number + 7];
    
    ShopLogic *saveHS30 = [[ShopLogic alloc]init];
    [saveHS30 loadHS30Integer];
    
}
-(void)invinciblePack {
    
    ShopLogic *invinsiblePack = [[ShopLogic alloc]init];
    [invinsiblePack buyInvinsiblePack];
    
    PowerUpAmountsLabel *powerUpsLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"powerUpsLabel"];
    PowerUpAmountsLabel *powerUpsLabel2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"powerUpsLabel2"];
    
    [powerUpsLabel setPoints:powerUpsLabel.number + 3];
    [powerUpsLabel2 setPoints:powerUpsLabel2.number + 3];
    
    ShopLogic *saveDP = [[ShopLogic alloc]init];
    [saveDP loadDPInteger];
    
    PowerUpAmountsLabel *tpLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel"];
    PowerUpAmountsLabel *tpLabel2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel2"];
    
    [tpLabel setPoints:tpLabel.number + 7];
    [tpLabel2 setPoints:tpLabel2.number + 7];
    
    ShopLogic *saveTP = [[ShopLogic alloc]init];
    [saveTP loadTPInteger];
    
    PowerUpAmountsLabel *el1Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el1Label"];
    PowerUpAmountsLabel *el1Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el1Label2"];
    
    [el1Label setPoints:el1Label.number + 3];
    [el1Label2 setPoints:el1Label2.number + 3];
    
    ShopLogic *saveEL1 = [[ShopLogic alloc]init];
    [saveEL1 loadEL1Integer];
    
    PowerUpAmountsLabel *el2Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label"];
    PowerUpAmountsLabel *el2Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label2"];
    
    [el2Label setPoints:el2Label.number + 7];
    [el2Label2 setPoints:el2Label2.number + 7];
    
    PowerUpAmountsLabel *hg10Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg10Label"];
    PowerUpAmountsLabel *hg10Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg10Label2"];
    
    [hg10Label setPoints:hg10Label.number + 3];
    [hg10Label2 setPoints:hg10Label2.number + 3];
    
    ShopLogic *saveHG10 = [[ShopLogic alloc]init];
    [saveHG10 loadHG10Integer];
    
    PowerUpAmountsLabel *hg20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label"];
    PowerUpAmountsLabel *hg20Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label2"];
    
    [hg20Label setPoints:hg20Label.number + 7];
    [hg20Label2 setPoints:hg20Label2.number + 7];
    
    ShopLogic *saveHG20 = [[ShopLogic alloc]init];
    [saveHG20 loadHG20Integer];
    
    PowerUpAmountsLabel *hs10Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs10Label"];
    PowerUpAmountsLabel *hs10Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs10Label2"];
    
    [hs10Label setPoints:hs10Label.number + 3];
    [hs10Label2 setPoints:hs10Label2.number + 3];
    
    ShopLogic *saveHS10 = [[ShopLogic alloc]init];
    [saveHS10 loadHS10Integer];
    
    PowerUpAmountsLabel *hs20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label"];
    PowerUpAmountsLabel *hs20Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label2"];
    
    [hs20Label setPoints:hs20Label.number + 7];
    [hs20Label2 setPoints:hs20Label2.number + 7];
    
    ShopLogic *saveHS20 = [[ShopLogic alloc]init];
    [saveHS20 loadHS20Integer];
    
}
-(void)safePack {
    
    ShopLogic *SafePack = [[ShopLogic alloc]init];
    [SafePack buySafePack];
    
    PowerUpAmountsLabel *powerUpsLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"powerUpsLabel"];
    PowerUpAmountsLabel *powerUpsLabel2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"powerUpsLabel2"];
    
    [powerUpsLabel setPoints:powerUpsLabel.number + 7];
    [powerUpsLabel2 setPoints:powerUpsLabel2.number + 7];
    
    ShopLogic *saveDP = [[ShopLogic alloc]init];
    [saveDP loadDPInteger];
    
    PowerUpAmountsLabel *tpLabel = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel"];
    PowerUpAmountsLabel *tpLabel2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"tpLabel2"];
    
    [tpLabel setPoints:tpLabel.number + 3];
    [tpLabel2 setPoints:tpLabel2.number + 3];
    
    ShopLogic *saveTP = [[ShopLogic alloc]init];
    [saveTP loadTPInteger];
    
    PowerUpAmountsLabel *el1Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el1Label"];
    PowerUpAmountsLabel *el1Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el1Label2"];
    
    [el1Label setPoints:el1Label.number + 7];
    [el1Label2 setPoints:el1Label2.number + 7];
    
    ShopLogic *saveEL1 = [[ShopLogic alloc]init];
    [saveEL1 loadEL1Integer];
    
    PowerUpAmountsLabel *el2Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label"];
    PowerUpAmountsLabel *el2Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"el2Label2"];
    
    [el2Label setPoints:el2Label.number + 3];
    [el2Label2 setPoints:el2Label2.number + 3];
    
    PowerUpAmountsLabel *hg10Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg10Label"];
    PowerUpAmountsLabel *hg10Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg10Label2"];
    
    [hg10Label setPoints:hg10Label.number + 7];
    [hg10Label2 setPoints:hg10Label2.number + 7];
    
    ShopLogic *saveHG10 = [[ShopLogic alloc]init];
    [saveHG10 loadHG10Integer];
    
    PowerUpAmountsLabel *hg20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label"];
    PowerUpAmountsLabel *hg20Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hg20Label2"];
    
    [hg20Label setPoints:hg20Label.number + 3];
    [hg20Label2 setPoints:hg20Label2.number + 3];
    
    ShopLogic *saveHG20 = [[ShopLogic alloc]init];
    [saveHG20 loadHG20Integer];
    
    PowerUpAmountsLabel *hs10Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs10Label"];
    PowerUpAmountsLabel *hs10Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs10Label2"];
    
    [hs10Label setPoints:hs10Label.number + 7];
    [hs10Label2 setPoints:hs10Label2.number + 7];
    
    ShopLogic *saveHS10 = [[ShopLogic alloc]init];
    [saveHS10 loadHS10Integer];
    
    PowerUpAmountsLabel *hs20Label = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label"];
    PowerUpAmountsLabel *hs20Label2 = (PowerUpAmountsLabel *)[self childNodeWithName:@"hs20Label2"];
    
    [hs20Label setPoints:hs20Label.number + 3];
    [hs20Label2 setPoints:hs20Label2.number + 3];
    
    ShopLogic *saveHS20 = [[ShopLogic alloc]init];
    [saveHS20 loadHS20Integer];
    
}

#pragma mark - $$$ Transactions

- (void)buy9kClick{
    
    NSLog(@"User requests 9000 Factory Bucks");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        factoryBucks9kPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAdd9kProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments, enable in app purchases in settings");
        
    }
}
- (void)buy30kClick{
    NSLog(@"User requests 30000 Factory Bucks");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        factoryBucks30kPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAdd30kProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buy45kClick{
    NSLog(@"User requests 45000 Factory Bucks");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        factoryBucks45kPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAdd45kProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buy75kClick{
    NSLog(@"User requests 75000 Factory Bucks");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        factoryBucks75kPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAdd75kProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buy150kClick{
    NSLog(@"User requests 150000 Factory Bucks");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        factoryBucks150kPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAdd150kProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buy300kClick{
    NSLog(@"User requests 300000 Factory Bucks");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        factoryBucks300kPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAdd300kProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyClockRefillClick{
    NSLog(@"User requests 10 Lives");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        clockRefillPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddClockRefillProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyGodModePackClick{
    NSLog(@"User requests God Mode Pack");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        godModePackPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddGodModePackProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyHelpClick{
    NSLog(@"User requests Help");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        helpPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddHelpProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyInvincibleModeClick{
    NSLog(@"User requests Invincible Mode Pack");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        invincibleModePurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddInvinciblePackProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyRefillLivesClick{
    NSLog(@"User requests 10 Lives");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        refillLivesPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddRefillLivesProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyRetryFromLossClick{
    NSLog(@"User requests retry From Loss");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        retryFromLossPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddRetryFromLossProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyRetryPlus10Click{
    NSLog(@"User requests retry From Loss Plus 10 Lives");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        retryPlus10Purchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddRetryPlus10ProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyReviveClick{
    NSLog(@"User requests revive");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        revivePurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddReviveProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buySafePackClick{
    NSLog(@"User requests safe pack");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        safePackPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddSafePackProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)buyUpgradeLivesClick{
    NSLog(@"User requests 10 Lives");
    
    if([SKPaymentQueue canMakePayments]){
        NSLog(@"User can make payments");
        upgradeLivesPurchased = YES;
        SKProductsRequest *productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:[NSSet setWithObject:kAddUpgradeLivesProductIdentifier]];
        productsRequest.delegate = self;
        [productsRequest start];
        
    }
    else{
        NSLog(@"User cannot make payments");
        
    }
}
- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response
{
    SKProduct *validProduct = nil;
    NSUInteger count = [response.products count];
    if (count > 0){
        validProduct = [response.products objectAtIndex:0];
        NSLog(@"Products Available!");
        [self purchase:validProduct];
    }
    else if(!validProduct){
        NSLog(@"No products available");
        //this is called if your product id is not valid, this shouldn't be called unless that happens.
    }
}
- (void)purchase:(SKProduct *)product
{
    SKPayment *payment = [SKPayment paymentWithProduct:product];
    
    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];
    [[SKPaymentQueue defaultQueue] addPayment:payment];
}
- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions{
    for(SKPaymentTransaction *transaction in transactions){
        switch(transaction.transactionState){
            case SKPaymentTransactionStatePurchasing: NSLog(@"Transaction state -> Purchasing");
                //called when the user is in the process of purchasing, do not add any of your own code here.
                break;
            case SKPaymentTransactionStatePurchased:
                //this is called when the user has successfully purchased the package (Cha-Ching!)
                if (factoryBucks9kPurchased == YES) {
                    [self performSelector:@selector(increment9000) withObject:self afterDelay:0.5];
                    factoryBucks9kPurchased = NO;
                }
                if (factoryBucks30kPurchased == YES) {
                    [self performSelector:@selector(increment30000) withObject:self afterDelay:0.5];
                    factoryBucks30kPurchased = NO;
                }
                if (factoryBucks45kPurchased == YES) {
                    [self performSelector:@selector(increment45000) withObject:self afterDelay:0.5];
                    factoryBucks45kPurchased = NO;
                }
                if (factoryBucks75kPurchased == YES) {
                    [self performSelector:@selector(increment75000) withObject:self afterDelay:0.5];
                    factoryBucks75kPurchased = NO;
                }
                if (factoryBucks150kPurchased == YES) {
                    [self performSelector:@selector(increment150000) withObject:self afterDelay:0.5];
                    factoryBucks150kPurchased = NO;
                }
                if (factoryBucks300kPurchased == YES) {
                    [self performSelector:@selector(increment300000) withObject:self afterDelay:0.5];
                    factoryBucks300kPurchased = NO;
                }
                if (godModePackPurchased == YES) {
                    [self performSelector:@selector(godModePack) withObject:self afterDelay:0.5];
                    godModePackPurchased = NO;
                }
                if (invincibleModePurchased == YES) {
                    [self performSelector:@selector(invinciblePack) withObject:self afterDelay:0.5];
                    invincibleModePurchased = NO;
                }
                if (safePackPurchased == YES) {
                    [self performSelector:@selector(safePack) withObject:self afterDelay:0.5];
                    safePackPurchased = NO;
                }
                if (refillLivesPurchased == YES) {
                    [self performSelector:@selector(refillLives) withObject:self afterDelay:0.5];
                    refillLivesPurchased = NO;
                }
                if (retryPlus10Purchased == YES) {
                    
                    RankLogic *upgradMXLLVL = [[RankLogic alloc]init];
                    [upgradMXLLVL incrementMaxPlays];
                    
                    [self performSelector:@selector(resumeFromLoss) withObject:self afterDelay:0.5];
                    
                    retryPlus10Purchased = NO;
                }
                if (retryFromLossPurchased == YES) {
                    
                    RankLogic *decCGN = [[RankLogic alloc]init];
                    [decCGN decrement1];
                    
                    [self performSelector:@selector(resumeFromLoss) withObject:self afterDelay:0.5];
                    
                    retryFromLossPurchased = NO;
                }
                if (revivePurchased == YES) {
                    [self performSelector:@selector(revive) withObject:self afterDelay:0.5];
                    revivePurchased = NO;
                }
                if (helpPurchased == YES) {
                    [self performSelector:@selector(help) withObject:self afterDelay:0.5];
                    helpPurchased = NO;
                }
                if (upgradeLivesPurchased == YES) {
                    [self performSelector:@selector(upgradeLives) withObject:self afterDelay:0.5];
                    upgradeLivesPurchased = NO;
                }
                
                //you can add your code for what you want to happen when the user buys the purchase here, for this tutorial we use removing ads
                [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
                NSLog(@"Transaction state -> Purchased");
                break;
            case SKPaymentTransactionStateRestored:
                NSLog(@"Transaction state -> Restored");
                //add the same code as you did from SKPaymentTransactionStatePurchased here
                [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
                break;
            case SKPaymentTransactionStateFailed:
                //called when the transaction does not finish
                if(transaction.error.code == SKErrorPaymentCancelled){
                    NSLog(@"Transaction state -> Cancelled");
                    factoryBucks9kPurchased = NO;
                    factoryBucks30kPurchased = NO;
                    factoryBucks45kPurchased = NO;
                    factoryBucks75kPurchased = NO;
                    factoryBucks150kPurchased = NO;
                    factoryBucks300kPurchased = NO;
                    clockRefillPurchased = NO;
                    godModePackPurchased = NO;
                    helpPurchased = NO;
                    invincibleModePurchased = NO;
                    refillLivesPurchased = NO;
                    retryFromLossPurchased = NO;
                    retryPlus10Purchased = NO;
                    revivePurchased = NO;
                    safePackPurchased = NO;
                    upgradeLivesPurchased = NO;
                    NSLog(@"%@", transaction.error);
                    //the user cancelled the payment ;(
                }
                [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
            default:
                break;
        }
    }
}

#pragma mark - BossBattle

-(void)regyDamage{
    
    [healthBar removeFromParent];
    
    if (hp < [reggyHP count] - 1 & threeXDam == NO) {
        
        hp++;
        /*damageValueTexture = [HealthBarSprites textureNamed:@"1Damage"];
        damageValue = [SKSpriteNode spriteNodeWithTexture:damageValueTexture];
        damageValue.position = CGPointMake(0, 75);
        damageValue.size = CGSizeMake(damageValue.frame.size.width/2, damageValue.frame.size.height/2);
        damageValue.zPosition = 2;
        [self.spriteLayer addChild:damageValue];
        SKAction *plus1Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus1Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus1Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus1Group = [SKAction group:@[plus1Shrink, plus1Fade, plus1Move]];
        SKAction *plus1Remove = [SKAction removeFromParent];
        SKAction *plus1Sequence = [SKAction sequence:@[plus1Group, plus1Remove]];
        [damageValue runAction:plus1Sequence];*/
        
        
        [reggyBarCount removeFromParent];
        
        hpNum--;
        
        reggyBarCount = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
        reggyBarCount.position = CGPointMake(0, self.frame.size.height/2.6);
        reggyBarCount.name = @"reggyBarCount";
        reggyBarCount.colorBlendFactor = 1;
        reggyBarCount.fontColor = [UIColor whiteColor];
        reggyBarCount.zPosition = 1000;
        reggyBarCount.fontSize = 10;
        reggyBarCount.text = [NSString stringWithFormat:@"%@ %li %@",@"Battle 1    ",(long)hpNum, @"/ 400"];
        [self.spriteLayer addChild:reggyBarCount];
        
    }
    if (/*hp < [reggyHP count] - 1 & */threeXDam == YES) {
        
        hp += 3;
        
        /*damageValueTexture = [HealthBarSprites textureNamed:@"3Damage"];
        damageValue = [SKSpriteNode spriteNodeWithTexture:damageValueTexture];
        damageValue.position = CGPointZero;
        damageValue.size = CGSizeMake(damageValue.frame.size.width/2, damageValue.frame.size.height/2);
        damageValue.zPosition = 5;
        [self.spriteLayer addChild:damageValue];
        SKAction *plus1Shrink = [SKAction scaleTo:0.1 duration:1];
        SKAction *plus1Fade = [SKAction fadeAlphaTo:0.1 duration:1];
        SKAction *plus1Move = [SKAction moveTo:CGPointMake(20, 75) duration:1];
        SKAction *plus1Group = [SKAction group:@[plus1Shrink, plus1Fade, plus1Move]];
        SKAction *plus1Remove = [SKAction removeFromParent];
        SKAction *plus1Sequence = [SKAction sequence:@[plus1Group, plus1Remove]];
        [damageValue runAction:plus1Sequence];*/
        
        
        [reggyBarCount removeFromParent];
        
        hpNum -= 3;
        
        reggyBarCount = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
        reggyBarCount.position = CGPointMake(0, self.frame.size.height/2.6);
        reggyBarCount.name = @"reggyBarCount";
        reggyBarCount.colorBlendFactor = 1;
        reggyBarCount.fontColor = [UIColor whiteColor];
        reggyBarCount.zPosition = 1000;
        reggyBarCount.fontSize = 10;
        reggyBarCount.text = [NSString stringWithFormat:@"%@ %li %@",@"Battle 1    ",(long)hpNum, @"/ 400"];
        [self.spriteLayer addChild:reggyBarCount];
        
    }
    
    if (hp < 395 /*397*/) {
        NSString *currentelement = [reggyHP objectAtIndex:hp];
        healthBarTexture = [HealthBarSprites textureNamed:currentelement];
        healthBar = [SKSpriteNode spriteNodeWithTexture:healthBarTexture];
        healthBar.position = CGPointZero;
        healthBar.size = CGSizeMake(healthBar.frame.size.width/s, healthBar.frame.size.height/s);
        healthBar.zPosition = 998;
        [self.spriteLayer addChild:healthBar];
    }
    
    if (rankNumber == 27 & hpNum <= 300) {
        
        if (gold1001 == NO) {
        gold1001 = YES;
        FactoryBucksLabel *increment50000 = [[FactoryBucksLabel alloc]init];
        [increment50000 incrementBy50000];
        Data *saveFB = [[Data alloc]init];
        [saveFB saveAmountFB];
        }
        [self.reggyLayer removeFromParent];
        [self.reggyLayer removeAllChildren];
        [self.reggyLayer removeAllActions];
        [self removeActionForKey:@"shake1"];
        [self removeActionForKey:@"shake2"];
        
        ReggyBotTexture = [HealthBarSprites textureNamed:@"ReggyDefeat"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 3.2;
        [self.spriteLayer addChild:ReggyBot];
        
        
        NSUserDefaults *defaultsz = [NSUserDefaults standardUserDefaults];
        [defaultsz setBool:beatObj forKey:@"beatObj"];
        [defaultsz synchronize];
        
        RankLogic *save = [[RankLogic alloc]init];
        [save saveRankValues];
        
        [self continueBattle];
        endB = YES;
        
    }
    
    if (rankNumber == 28 & hpNum <= 200) {
        
        if (gold1002 == NO) {
        gold1002 = YES;
        FactoryBucksLabel *increment50000 = [[FactoryBucksLabel alloc]init];
        [increment50000 incrementBy50000];
        Data *saveFB = [[Data alloc]init];
        [saveFB saveAmountFB];
        }
        [self.reggyLayer removeFromParent];
        [self.reggyLayer removeAllChildren];
        [self.reggyLayer removeAllActions];
        [self removeActionForKey:@"shake1"];
        [self removeActionForKey:@"shake2"];
        
        ReggyBotTexture = [HealthBarSprites textureNamed:@"ReggyDefeat"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 3.2;
        [self.spriteLayer addChild:ReggyBot];
        
        
        NSUserDefaults *defaultsz = [NSUserDefaults standardUserDefaults];
        [defaultsz setBool:beatObj forKey:@"beatObj"];
        [defaultsz synchronize];
        
        RankLogic *save = [[RankLogic alloc]init];
        [save saveRankValues];
        
        [self continueBattle];
        endB = YES;
        
    }
    
    if (rankNumber == 29 & hpNum <= 0) {
        
        if (gold1003 == NO) {
        gold1003 = YES;
        FactoryBucksLabel *increment100000 = [[FactoryBucksLabel alloc]init];
        [increment100000 incrementBy100000];
        Data *saveFB = [[Data alloc]init];
        [saveFB saveAmountFB];
        }
        [healthBar removeFromParent];
        [self.reggyLayer removeFromParent];
        [self.reggyLayer removeAllChildren];
        [self.reggyLayer removeAllActions];
        [self removeActionForKey:@"shake1"];
        [self removeActionForKey:@"shake2"];
        
        
        NSUserDefaults *defaultsz = [NSUserDefaults standardUserDefaults];
        [defaultsz setBool:beatObj forKey:@"beatObj"];
        [defaultsz synchronize];
        
        RankLogic *save = [[RankLogic alloc]init];
        [save saveRankValues];
        
        [self spareMeAnim];
        
        endB = YES;
    }
    
} //--O O O O O O O O O O--//
-(void)humanDamage {
    
    [humanHealthBar removeFromParent];
    
    [lifeBarCount removeFromParent];
    
    humanHPNum--;
    
    lifeBarCount = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
    lifeBarCount.position = CGPointMake(-self.frame.size.width/3.55, -self.frame.size.height/2.82);
    lifeBarCount.name = @"lifeBarCount";
    lifeBarCount.colorBlendFactor = 1;
    lifeBarCount.fontColor = [UIColor whiteColor];
    lifeBarCount.zPosition = 1000;
    lifeBarCount.fontSize = 10;
    lifeBarCount.text = [NSString stringWithFormat:@" %li %@",(long)humanHPNum, @"/ 10"];
    [self.spriteLayer addChild:lifeBarCount];
    
    
    
    if (humanHP < [humanHPArray count]-1) {
        humanHP++;
    }
    
    if (humanHPNum == 0){
        
        [self.reggyLayer removeFromParent];
        [self.reggyLayer removeAllChildren];
        [self.reggyLayer removeAllActions];
        [self removeActionForKey:@"shake1"];
        [self removeActionForKey:@"shake2"];
        
        ReggyBotTexture = [ReggyBigMistake textureNamed:@"L1"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 3.2;
        [self.spriteLayer addChild:ReggyBot];
        
        reggyFaceTexture = [ReggyBigMistake textureNamed:@"M72"];
        reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
        reggyFace.position = CGPointZero;
        reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height/s);
        reggyFace.zPosition = 3.21;
        [self.spriteLayer addChild:reggyFace];
        
        [self retryBattle];
        endB = YES;
        canBlock = NO;
        
    }
    
    /*damageScreenTexture = [HealthBarSprites textureNamed:@"DamageScreen"];
    damageScreen = [SKSpriteNode spriteNodeWithTexture:damageScreenTexture];
    damageScreen.position = CGPointZero;
    damageScreen.size = CGSizeMake(damageScreen.frame.size.width/2, damageScreen.frame.size.height/2);
    damageScreen.zPosition = 1001;
    [self.spriteLayer addChild:damageScreen];
    [damageScreen runAction:[SKAction sequence:@[[SKAction waitForDuration:0.3],[SKAction removeFromParent]]]];*/
    
    NSString *currentelement = [humanHPArray objectAtIndex:humanHP];
    humanHealthBarTexture = [HealthBarSprites textureNamed:currentelement];
    humanHealthBar = [SKSpriteNode spriteNodeWithTexture:humanHealthBarTexture];
    humanHealthBar.position = CGPointZero;
    humanHealthBar.size = CGSizeMake(humanHealthBar.frame.size.width/s, humanHealthBar.frame.size.height/s);
    humanHealthBar.zPosition = 999;
    [self.spriteLayer addChild:humanHealthBar];
    
} //--O O O O O O O O O O--//
-(void)reggyEnergyDecrease {
    
    [self.spriteLayer runAction:[SKAction repeatAction:[SKAction sequence:@[[SKAction waitForDuration:(t / z)],[SKAction runBlock:^{
        
        if (z < [energy count] - 1) {
            
        [energyBar removeFromParent];
        NSString *currentelement = [energy objectAtIndex:ep++];
        energyBarTexture = [HealthBarSprites textureNamed:currentelement];
        energyBar = [SKSpriteNode spriteNodeWithTexture:energyBarTexture];
        energyBar.position = CGPointZero;
        energyBar.size = CGSizeMake(energyBar.frame.size.width/s, energyBar.frame.size.height/s);
        energyBar.zPosition = 998;
        [self.spriteLayer addChild:energyBar];
            
        } else if (z == [energy count]) {
            
            [energyBar removeFromParent];
            NSString *currentelement = [energy objectAtIndex:ep--];
            energyBarTexture = [HealthBarSprites textureNamed:currentelement];
            energyBar = [SKSpriteNode spriteNodeWithTexture:energyBarTexture];
            energyBar.position = CGPointZero;
            energyBar.size = CGSizeMake(energyBar.frame.size.width/s, energyBar.frame.size.height/s);
            energyBar.zPosition = 998;
            [self.spriteLayer addChild:energyBar];
            
        }
        
    }]]] count:z]];
    
    NSLog(@"Energy Count:" @"%i", z);
    
}
-(void)reggyBossBattleIntroOne {
    
    //[self reggyHealthBar];
    //[self showHumanHealthBar];
    
    self.reggyLayer = [SKNode node];
    self.reggyLayer.position = CGPointZero;
    
    [self.spriteLayer addChild:self.reggyLayer];
    
    ReggyBotTexture = [bossBattleIntro1 textureNamed:@"A1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
    ReggyBot.zPosition = 3.2;
    //ReggyBot.name = @"reggyBot";
    [self.reggyLayer addChild:ReggyBot];
    
    reggyFaceTexture = [bossBattleIntro1 textureNamed:@"B0015"];
    reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
    reggyFace.position = CGPointZero;
    reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height/s);
    reggyFace.zPosition = 3.21;
    [self.reggyLayer addChild:reggyFace];
    
    SKAction *imReggyTextureSeq1 = [SKAction animateWithTextures:A1_Anim_Start timePerFrame:0.083333333];
    SKAction *imReggyTextureSeq2 = [SKAction animateWithTextures:A2_Anim_Start timePerFrame:0.083333333];
    SKAction *imReggyTextureSeq3 = [SKAction animateWithTextures:A3_Anim_Start timePerFrame:0.083333333];
    SKAction *textureSequence = [SKAction sequence:@[[SKAction moveByX:0 y:-800 duration:0],[SKAction waitForDuration:0.91666663],[SKAction moveTo:CGPointZero duration:0.33333333],imReggyTextureSeq1,[SKAction repeatAction:imReggyTextureSeq2 count:2],imReggyTextureSeq3,[SKAction repeatActionForever:imReggyTextureSeq2]]];
    [ReggyBot runAction:textureSequence withKey:@"Fire"];
    
    SKAction *reggyMouthSeq = [SKAction animateWithTextures:B1_Anim_Start timePerFrame:0.083333333];
    SKAction *mouthSeq = [SKAction sequence:@[[SKAction moveByX:0 y:-800 duration:0],[SKAction waitForDuration:0.91666663],[SKAction moveTo:CGPointZero duration:0.33333333],[SKAction waitForDuration:0.75333334],reggyMouthSeq]];
    [reggyFace runAction:mouthSeq];
    
    SKAction *beginBattleAnim = [SKAction sequence:@[[SKAction waitForDuration:9.583333295],[SKAction runBlock:^{
        beginBattleTexture = [buttonSprites textureNamed:@"BeginBattle"];
        beginBattle = [SKSpriteNode spriteNodeWithTexture:beginBattleTexture];
        beginBattle.position = CGPointZero;
        beginBattle.size = CGSizeMake(beginBattle.frame.size.width/s, beginBattle.frame.size.height/s);
        beginBattle.zPosition = 100;
        beginBattle.name = @"Fight";
        [self.spriteLayer addChild:beginBattle];}]]];
    SKAction *hide = [SKAction fadeAlphaTo:0.0 duration:1];
    SKAction *show = [SKAction fadeAlphaTo:1.0 duration:1];
    SKAction *rep = [SKAction repeatActionForever:[SKAction sequence:@[hide,show]]];
    [beginBattle runAction:rep];
    [self runAction:beginBattleAnim];
    
    NSString *sound = [[NSBundle mainBundle]pathForResource:@"OverMyDeadBatteries1" ofType:@"wav"];
    deadBatteries = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
    deadBatteries.delegate = self;
    [deadBatteries play];
    
    
} //--O O O O O O O O O O--//
-(void)reggyBossBattleIntroTwo {
    
    //[self reggyHealthBar];
    //[self showHumanHealthBar];
    
    self.reggyLayer = [SKNode node];
    self.reggyLayer.position = CGPointZero;
    
    [self.spriteLayer addChild:self.reggyLayer];
    
    NSArray *jSprites = @[
                          @"J1",
                          @"J2",
                          @"J3",
                          @"J1",
                          @"J4",
                          @"J5"
                          ];
    
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
        jNum++;
        [ReggyBot removeFromParent];
        NSString *currentelement = [jSprites objectAtIndex:jNum];
        ReggyBotTexture = [ReggyMotherBoardSprites textureNamed:currentelement];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 3.2;
        [self.reggyLayer addChild:ReggyBot];
    }],[SKAction waitForDuration:0.58333333],[SKAction runBlock:^{
        jNum++;
        [ReggyBot removeFromParent];
        NSString *currentelement = [jSprites objectAtIndex:jNum];
        ReggyBotTexture = [ReggyMotherBoardSprites textureNamed:currentelement];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 3.2;
        [self.reggyLayer addChild:ReggyBot];
    }],[SKAction waitForDuration:1.16666667],[SKAction runBlock:^{
        jNum++;
        [ReggyBot removeFromParent];
        NSString *currentelement = [jSprites objectAtIndex:jNum];
        ReggyBotTexture = [ReggyMotherBoardSprites textureNamed:currentelement];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 3.2;
        [self.reggyLayer addChild:ReggyBot];
    }],[SKAction waitForDuration:0.83333333],[SKAction runBlock:^{
        jNum++;
        [ReggyBot removeFromParent];
        NSString *currentelement = [jSprites objectAtIndex:jNum];
        ReggyBotTexture = [ReggyMotherBoardSprites textureNamed:currentelement];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 3.2;
        [self.reggyLayer addChild:ReggyBot];
    }],[SKAction waitForDuration:1.83333333],[SKAction runBlock:^{
        jNum++;
        [ReggyBot removeFromParent];
        NSString *currentelement = [jSprites objectAtIndex:jNum];
        ReggyBotTexture = [ReggyMotherBoardSprites textureNamed:currentelement];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 3.2;
        [self.reggyLayer addChild:ReggyBot];
    }]]]];
    
    NSString *currentelement = [jSprites objectAtIndex:jNum];
    ReggyBotTexture = [ReggyMotherBoardSprites textureNamed:currentelement];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
    ReggyBot.zPosition = 3.2;
    //ReggyBot.name = @"reggyBot";
    [self.reggyLayer addChild:ReggyBot];
    
    reggyFaceTexture = [ReggyMotherBoardSprites textureNamed:@"K1"];
    reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
    reggyFace.position = CGPointZero;
    reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height/s);
    reggyFace.zPosition = 3.21;
    [self.reggyLayer addChild:reggyFace];
    
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
    
    //SKAction *imReggyTextureSeq = [SKAction animateWithTextures:J_Anim_Start timePerFrame:0.083333333];
    //[ReggyBot runAction:imReggyTextureSeq withKey:@"MotherBoard"];
    
    SKAction *reggyMouthSeq = [SKAction animateWithTextures:K_Anim_Start timePerFrame:0.083333333];
    [reggyFace runAction:reggyMouthSeq];
    
    SKAction *beginBattleAnim = [SKAction sequence:@[[SKAction waitForDuration:4.2],[SKAction runBlock:^{
        
        beginBattleTexture = [buttonSprites textureNamed:@"BeginBattle"];
        beginBattle = [SKSpriteNode spriteNodeWithTexture:beginBattleTexture];
        beginBattle.position = CGPointZero;
        beginBattle.size = CGSizeMake(beginBattle.frame.size.width/s, beginBattle.frame.size.height/s);
        beginBattle.zPosition = 100;
        beginBattle.name = @"Fight";
        [self.spriteLayer addChild:beginBattle];}]]];
        
    SKAction *hide = [SKAction fadeAlphaTo:0.0 duration:1];
    SKAction *show = [SKAction fadeAlphaTo:1.0 duration:1];
    SKAction *rep = [SKAction repeatActionForever:[SKAction sequence:@[hide,show]]];
    [beginBattle runAction:rep];
    [self runAction:beginBattleAnim];
    
    NSString *sound = [[NSBundle mainBundle]pathForResource:@"OnMyMotherBoard" ofType:@"wav"];
    deadBatteries = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
    deadBatteries.delegate = self;
    [deadBatteries play];
        
    }]]]];
    
} //--O O O O O O O O O O--//
-(void)reggyBossBattleIntroThree {
    
    //[self reggyHealthBar];
    //[self showHumanHealthBar];
    
    self.reggyLayer = [SKNode node];
    self.reggyLayer.position = CGPointZero;
    
    [self.spriteLayer addChild:self.reggyLayer];
    
    ReggyBotTexture = [ReggyBigMistake textureNamed:@"L1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
    ReggyBot.zPosition = 3.2;
    //ReggyBot.name = @"reggyBot";
    [self.reggyLayer addChild:ReggyBot];
    
    reggyFaceTexture = [ReggyBigMistake textureNamed:@"M1"];
    reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
    reggyFace.position = CGPointZero;
    reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height / s);
    reggyFace.zPosition = 3.21;
    [self.reggyLayer addChild:reggyFace];
    
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
        
        SKAction *imReggyTextureSeq = [SKAction animateWithTextures:L_Anim_Start timePerFrame:0.083333333];
        [ReggyBot runAction:imReggyTextureSeq withKey:@"Enough"];
        
        SKAction *reggyMouthSeq = [SKAction animateWithTextures:M_Anim_Start timePerFrame:0.083333333];
        [reggyFace runAction:reggyMouthSeq];
        
        SKAction *beginBattleAnim = [SKAction sequence:@[[SKAction waitForDuration:4.2],[SKAction runBlock:^{
            beginBattleTexture = [buttonSprites textureNamed:@"BeginBattle"];
            beginBattle = [SKSpriteNode spriteNodeWithTexture:beginBattleTexture];
            beginBattle.position = CGPointZero;
            beginBattle.size = CGSizeMake(beginBattle.frame.size.width/s, beginBattle.frame.size.height / s);
            beginBattle.zPosition = 100;
            beginBattle.name = @"Fight";
            [self.spriteLayer addChild:beginBattle];}]]];
        SKAction *hide = [SKAction fadeAlphaTo:0.0 duration:1];
        SKAction *show = [SKAction fadeAlphaTo:1.0 duration:1];
        SKAction *rep = [SKAction repeatActionForever:[SKAction sequence:@[hide,show]]];
        [beginBattle runAction:rep];
        [self runAction:beginBattleAnim];
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"ComeAtMeBro" ofType:@"wav"];
        deadBatteries = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        deadBatteries.delegate = self;
        [deadBatteries play];
    }]]]];
    
} //--O O O O O O O O O O--//
-(void)spareMeAnim {
    
    ReggyBotTexture = [ReggySpareMe textureNamed:@"N1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
    ReggyBot.zPosition = 3.2;
    //ReggyBot.name = @"reggyBot";
    [self.spriteLayer addChild:ReggyBot];
    
    reggyFaceTexture = [ReggySpareMe textureNamed:@"O1"];
    reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
    reggyFace.position = CGPointZero;
    reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height/s);
    reggyFace.zPosition = 3.21;
    [self.spriteLayer addChild:reggyFace];
    
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
    SKAction *imReggyTextureSeq = [SKAction animateWithTextures:N_Anim_Start timePerFrame:0.083333333];
    [ReggyBot runAction:imReggyTextureSeq withKey:@"SpareMe"];
    
    SKAction *reggyMouthSeq = [SKAction animateWithTextures:O_Anim_Start timePerFrame:0.083333333];
    [reggyFace runAction:reggyMouthSeq];
    
     // Give Spare or destroy button options here...
     
        spareButtonTexture = [buttonSprites textureNamed:@"spareButton"];
        spareButton = [SKSpriteNode spriteNodeWithTexture:spareButtonTexture];
        spareButton.position = CGPointMake(-self.frame.size.width/4, self.frame.size.height/7);
        spareButton.size = CGSizeMake(spareButton.frame.size.width/s, spareButton.frame.size.height/s);
        spareButton.zPosition = 10000;
        spareButton.name = @"SpareBot";
        [self.spriteLayer addChild:spareButton];
        
        destroyButtonTexture = [buttonSprites textureNamed:@"DestroyButton"];
        destroyButton = [SKSpriteNode spriteNodeWithTexture:destroyButtonTexture];
        destroyButton.position = CGPointMake(self.frame.size.width/4, self.frame.size.height/7);
        destroyButton.size = CGSizeMake(destroyButton.frame.size.width/s, destroyButton.frame.size.height/s);
        destroyButton.zPosition = 10000;
        destroyButton.name = @"DestroyBot";
        [self.spriteLayer addChild:destroyButton];
    
    NSString *sound = [[NSBundle mainBundle]pathForResource:@"SpareMe" ofType:@"wav"];
    deadBatteries = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
    deadBatteries.delegate = self;
    [deadBatteries play];
    }]]]];
    
}
-(void)weakHumans {
    
    [destroyButton removeFromParent];
    [spareButton removeFromParent];
    [ReggyBot removeFromParent];
    [reggyFace removeFromParent];
    [self.reggyLayer removeFromParent];
    [self.reggyLayer removeAllChildren];
    [self.reggyLayer removeAllActions];
    [self removeActionForKey:@"shake1"];
    [self removeActionForKey:@"shake2"];
    
    ReggyBotTexture = [ReggyWeakHumans textureNamed:@"P"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
    ReggyBot.zPosition = 3.2;
    //ReggyBot.name = @"reggyBot";
    [self.spriteLayer addChild:ReggyBot];
    
    reggyFaceTexture = [ReggyWeakHumans textureNamed:@"Q1"];
    reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
    reggyFace.position = CGPointZero;
    reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height/s);
    reggyFace.zPosition = 3.21;
    [self.spriteLayer addChild:reggyFace];
    
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
      
        SKAction *reggyMouthSeq = [SKAction animateWithTextures:Q_Anim_Start timePerFrame:0.083333333];
        [reggyFace runAction:reggyMouthSeq];
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"HumansAreWeak" ofType:@"wav"];
        deadBatteries = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        deadBatteries.delegate = self;
        [deadBatteries play];
    }]]]];
    
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:6],[SKAction runBlock:^{
        
        [pause removeFromParent];
        
        blackScreen = [SKSpriteNode spriteNodeWithColor:[UIColor blackColor] size:CGSizeMake(self.frame.size.width, self.frame.size.height)];
        blackScreen.zPosition = 9999900000;
        blackScreen.position = CGPointZero;
        blackScreen.name = @"creditScreen";
        [self.spriteLayer addChild:blackScreen];
        
        creditsTexture = [creditSprites textureNamed:@"Credits"];
        credits = [SKSpriteNode spriteNodeWithTexture:creditsTexture];
        credits.position = CGPointZero;
        credits.size = CGSizeMake(credits.frame.size.width/s, credits.frame.size.height/s);
        credits.zPosition = 9999900001;
        [self.spriteLayer addChild:credits];
        
        reggyCrownTexture = [creditSprites textureNamed:@"ReggyCrown0001"];
        reggyCrown = [SKSpriteNode spriteNodeWithTexture:reggyCrownTexture];
        reggyCrown.position = CGPointZero;
        reggyCrown.size = CGSizeMake(reggyCrown.frame.size.width/s, reggyCrown.frame.size.height/s);
        reggyCrown.zPosition = 9999900002;
        [self.spriteLayer addChild:reggyCrown];
        
        SKAction * alpha1 = [SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0],[SKAction fadeAlphaTo:1 duration:2]]];
        SKAction * alpha2 = [SKAction sequence:@[[SKAction fadeAlphaTo:1 duration:0],[SKAction fadeAlphaTo:0 duration:2]]];
        
        [blackScreen runAction:alpha1];
        [credits runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0],[SKAction waitForDuration:3],alpha1,[SKAction waitForDuration:3],alpha2]]];
        [reggyCrown runAction:[SKAction sequence:@[[SKAction group:@[[SKAction fadeAlphaTo:1 duration:0],[SKAction scaleTo:0.3 duration:0],[SKAction moveToY:self.frame.size.height / 2 + reggyCrown.frame.size.height duration:0]]],[SKAction waitForDuration:12],[SKAction group:@[[SKAction moveTo:CGPointZero duration:5],[SKAction fadeAlphaTo:1 duration:5],[SKAction scaleTo:1 duration:5]]],[SKAction repeatAction:[SKAction animateWithTextures:reggyCrown_Anim_Start timePerFrame:0.083333333] count:5]]] completion:^{
            [self performSelector:@selector(goToArcadeScreen) withObject:nil afterDelay:0.5];
        }];
        
    }]]]];
    
    
}
-(void)reggyDeath {
    
    [destroyButton removeFromParent];
    [spareButton removeFromParent];
    [ReggyBot removeFromParent];
    [reggyFace removeFromParent];
    [self.reggyLayer removeFromParent];
    [self.reggyLayer removeAllChildren];
    [self.reggyLayer removeAllActions];
    [self removeActionForKey:@"shake1"];
    [self removeActionForKey:@"shake2"];
    
    ReggyBotTexture = [ReggyReggyBoom textureNamed:@"R1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
    ReggyBot.zPosition = 3.2;
    //ReggyBot.name = @"reggyBot";
    [self.spriteLayer addChild:ReggyBot];
    
    reggyFaceTexture = [ReggyReggyBoom textureNamed:@"S1"];
    reggyFace = [SKSpriteNode spriteNodeWithTexture:reggyFaceTexture];
    reggyFace.position = CGPointZero;
    reggyFace.size = CGSizeMake(reggyFace.frame.size.width/s, reggyFace.frame.size.height/s);
    reggyFace.zPosition = 3.21;
    [self.spriteLayer addChild:reggyFace];
    
    explosionTexture = [ReggyReggyBoom textureNamed:@"Explosion1"];
    explosion = [SKSpriteNode spriteNodeWithTexture:explosionTexture];
    explosion.position = CGPointMake(1000, 1000);
    explosion.size = CGSizeMake(explosion.frame.size.width/s, explosion.frame.size.height/s);
    explosion.zPosition = 3.22;
    [self.spriteLayer addChild:explosion];
    
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
        
        SKAction *imReggyTextureSeq = [SKAction animateWithTextures:R_Anim_Start timePerFrame:0.083333333];
        [ReggyBot runAction:[SKAction sequence:@[imReggyTextureSeq,[SKAction removeFromParent]]]];
        
        SKAction *reggyMouthSeq = [SKAction animateWithTextures:S_Anim_Start timePerFrame:0.083333333];
        [reggyFace runAction:[SKAction sequence:@[reggyMouthSeq,[SKAction removeFromParent]]]];
        
        SKAction *explosionSeq = [SKAction animateWithTextures:Explosion_Anim_Start timePerFrame:0.083333333];
        [explosion runAction:[SKAction sequence:@[[SKAction waitForDuration:3.916666666666667],[SKAction moveTo:CGPointZero duration:0],explosionSeq,[SKAction removeFromParent]]]];
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"Noooooo" ofType:@"wav"];
        deadBatteries = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        deadBatteries.delegate = self;
        [deadBatteries play];
    }]]]];
    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:5],[SKAction runBlock:^{
        
        [pause removeFromParent];
        
        blackScreen = [SKSpriteNode spriteNodeWithColor:[UIColor blackColor] size:CGSizeMake(self.frame.size.width, self.frame.size.height)];
        blackScreen.zPosition = 9999900000;
        blackScreen.position = CGPointZero;
        blackScreen.name = @"creditScreen";
        [self.spriteLayer addChild:blackScreen];
        
        creditsTexture = [creditSprites textureNamed:@"Credits"];
        credits = [SKSpriteNode spriteNodeWithTexture:creditsTexture];
        credits.position = CGPointZero;
        credits.size = CGSizeMake(credits.frame.size.width/s, credits.frame.size.height/s);
        credits.zPosition = 9999900001;
        [self.spriteLayer addChild:credits];
        
        reggyCrownTexture = [creditSprites textureNamed:@"ReggyCrown0001"];
        reggyCrown = [SKSpriteNode spriteNodeWithTexture:reggyCrownTexture];
        reggyCrown.position = CGPointZero;
        reggyCrown.size = CGSizeMake(reggyCrown.frame.size.width/s, reggyCrown.frame.size.height/s);
        reggyCrown.zPosition = 9999900002;
        [self.spriteLayer addChild:reggyCrown];
        
        SKAction * alpha1 = [SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0],[SKAction fadeAlphaTo:1 duration:2]]];
        SKAction * alpha2 = [SKAction sequence:@[[SKAction fadeAlphaTo:1 duration:0],[SKAction fadeAlphaTo:0 duration:2]]];
        
        [blackScreen runAction:alpha1];
        [credits runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0],[SKAction waitForDuration:3],alpha1,[SKAction waitForDuration:3],alpha2]]];
        [reggyCrown runAction:[SKAction sequence:@[[SKAction group:@[[SKAction fadeAlphaTo:1 duration:0],[SKAction scaleTo:0.3 duration:0],[SKAction moveToY:self.frame.size.height / 2 + reggyCrown.frame.size.height duration:0]]],[SKAction waitForDuration:12],[SKAction group:@[[SKAction moveTo:CGPointZero duration:5],[SKAction fadeAlphaTo:1 duration:5],[SKAction scaleTo:1 duration:5]]],[SKAction repeatAction:[SKAction animateWithTextures:reggyCrown_Anim_Start timePerFrame:0.083333333] count:5]]] completion:^{
            [self performSelector:@selector(goToArcadeScreen) withObject:nil afterDelay:0.5];
        }];
        
    }]]]];
    
}
-(void)healthBars {
    
    RankLogic *healthBarSpriteData = [[RankLogic alloc]init];
    [healthBarSpriteData bossBattleArraySprites];
    
    humanHPNum = 10;
    
    healthBarIconTexture = [HealthBarSprites textureNamed:@"ReggyBarBoard"];
    healthBarIcon = [SKSpriteNode spriteNodeWithTexture:healthBarIconTexture];
    healthBarIcon.position = CGPointZero;
    healthBarIcon.size = CGSizeMake(healthBarIcon.frame.size.width/s, healthBarIcon.frame.size.height/s);
    healthBarIcon.zPosition = 999;
    [self.spriteLayer addChild:healthBarIcon];
    
    if (rankNumber == 27) {
        hpCap = 400;
        hp = 0;
        hpNum = hpCap;
    NSString *currentelement = [reggyHP objectAtIndex:hp];
    healthBarTexture = [HealthBarSprites textureNamed:currentelement];
    healthBar = [SKSpriteNode spriteNodeWithTexture:healthBarTexture];
    healthBar.position = CGPointZero;
    healthBar.size = CGSizeMake(healthBar.frame.size.width/s, healthBar.frame.size.height/s);
    healthBar.zPosition = 998;
    [self.spriteLayer addChild:healthBar];
    }
    
    if (rankNumber == 28) {
        hpCap = 300;
        hp = 101;
        hpNum = hpCap;
        NSString *currentelement = [reggyHP objectAtIndex:hp];
        healthBarTexture = [HealthBarSprites textureNamed:currentelement];
        healthBar = [SKSpriteNode spriteNodeWithTexture:healthBarTexture];
        healthBar.position = CGPointZero;
        healthBar.size = CGSizeMake(healthBar.frame.size.width/s, healthBar.frame.size.height/s);
        healthBar.zPosition = 998;
        [self.spriteLayer addChild:healthBar];
    }
    
    if (rankNumber == 29) {
        hpCap = 200;
        hp = 201;
        hpNum = hpCap;
        NSString *currentelement = [reggyHP objectAtIndex:hp];
        healthBarTexture = [HealthBarSprites textureNamed:currentelement];
        healthBar = [SKSpriteNode spriteNodeWithTexture:healthBarTexture];
        healthBar.position = CGPointZero;
        healthBar.size = CGSizeMake(healthBar.frame.size.width/s, healthBar.frame.size.height/s);
        healthBar.zPosition = 998;
        [self.spriteLayer addChild:healthBar];
    }
    
    lifeBarCount = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
    lifeBarCount.position = CGPointMake(-self.frame.size.width/3.55, -self.frame.size.height/2.82);
    lifeBarCount.name = @"lifeBarCount";
    lifeBarCount.colorBlendFactor = 1;
    lifeBarCount.fontColor = [UIColor whiteColor];
    lifeBarCount.zPosition = 1000;
    lifeBarCount.fontSize = 10;
    lifeBarCount.text = [NSString stringWithFormat:@" %li %@",(long)humanHPNum, @"/ 10"];
    [self.spriteLayer addChild:lifeBarCount];
    
    reggyBarCount = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
    reggyBarCount.position = CGPointMake(0, self.frame.size.height/2.6);
    reggyBarCount.name = @"reggyBarCount";
    reggyBarCount.colorBlendFactor = 1;
    reggyBarCount.fontColor = [UIColor whiteColor];
    reggyBarCount.zPosition = 1000;
    reggyBarCount.fontSize = 10;
    reggyBarCount.text = [NSString stringWithFormat:@"%@ %li %@",@"Battle 1    ",(long)hpNum, @"/ 400"];
    [self.spriteLayer addChild:reggyBarCount];
    
    energyBarTexture = [HealthBarSprites textureNamed:@"ReggyEnergyBar1"];
    energyBar = [SKSpriteNode spriteNodeWithTexture:energyBarTexture];
    energyBar.position = CGPointZero;
    energyBar.size = CGSizeMake(energyBar.frame.size.width/s, energyBar.frame.size.height/s);
    energyBar.zPosition = 998;
    [self.spriteLayer addChild:energyBar];
    
    humanHealthBarMachineTexture = [HealthBarSprites textureNamed:@"HumanHealthBoard"];
    humanHealthBarMachine = [SKSpriteNode spriteNodeWithTexture:humanHealthBarMachineTexture];
    humanHealthBarMachine.position = CGPointZero;
    humanHealthBarMachine.size = CGSizeMake(humanHealthBarMachine.frame.size.width/s, humanHealthBarMachine.frame.size.height/s);
    humanHealthBarMachine.zPosition = 998;
    [self.spriteLayer addChild:humanHealthBarMachine];
    
    humanHealthBarTexture = [HealthBarSprites textureNamed:@"HumanHealth1"];
    humanHealthBar = [SKSpriteNode spriteNodeWithTexture:humanHealthBarTexture];
    humanHealthBar.position = CGPointZero;
    humanHealthBar.size = CGSizeMake(humanHealthBar.frame.size.width/s, humanHealthBar.frame.size.height/s);
    humanHealthBar.zPosition = 999;
    [self.spriteLayer addChild:humanHealthBar];
    if (gold703 == YES) {
    threeXDamageTexture = [buttonSprites textureNamed:@"5XDamage"];
    threeXDamage = [SKSpriteNode spriteNodeWithTexture:threeXDamageTexture];
    threeXDamage.position = CGPointMake(-self.frame.size.width/3.05, -self.frame.size.height/2.4);
    threeXDamage.size = CGSizeMake(threeXDamage.frame.size.width/s, threeXDamage.frame.size.height/s);
    threeXDamage.zPosition = 999;
    threeXDam = YES;
    [self.spriteLayer addChild:threeXDamage];
    }
    if (gold503 == YES) {
    criticalHitTexture = [buttonSprites textureNamed:@"CriticalHit"];
    criticalHit = [SKSpriteNode spriteNodeWithTexture:criticalHitTexture];
    criticalHit.position = CGPointMake(CGRectGetMidX(self.frame), -self.frame.size.height/2.38);
    criticalHit.size = CGSizeMake(criticalHit.frame.size.width/s, criticalHit.frame.size.height/s);
    criticalHit.zPosition = 999;
    critHit = YES;
    [self.spriteLayer addChild:criticalHit];
    }
    if (gold303 == YES) {
    antiFreezeTexture = [buttonSprites textureNamed:@"AntiFreeze"];
    antiFreeze = [SKSpriteNode spriteNodeWithTexture:antiFreezeTexture];
    antiFreeze.position = CGPointMake(self.frame.size.width/2.95, -self.frame.size.height/2.4);
    antiFreeze.size = CGSizeMake(antiFreeze.frame.size.width/s, antiFreeze.frame.size.height/s);
    antiFreeze.zPosition = 999;
    [self.spriteLayer addChild:antiFreeze];
    noFreeze = YES;
    }
    
    RankLogic *blinkCheck = [[RankLogic alloc]init];
    [blinkCheck blinkData];
    
    if (gold703 == NO) {
    unlockableLock1Texture = [buttonSprites textureNamed:@"Unlockable Lock"];
    unlockableLock1 = [SKSpriteNode spriteNodeWithTexture:unlockableLock1Texture];
    unlockableLock1.position = CGPointMake(-self.frame.size.width/3.05, -self.frame.size.height/2.4);
    unlockableLock1.size = CGSizeMake(unlockableLock1.frame.size.width/s, unlockableLock1.frame.size.height/s);
    unlockableLock1.zPosition = 999;
    unlockableLock1.name = @"3xText";
    [self.spriteLayer addChild:unlockableLock1];
    }
    if (gold503 == NO) {
    unlockableLock2Texture = [buttonSprites textureNamed:@"Unlockable Lock"];
    unlockableLock2 = [SKSpriteNode spriteNodeWithTexture:unlockableLock2Texture];
    unlockableLock2.position = CGPointMake(CGRectGetMidX(self.frame), -self.frame.size.height/2.38);
    unlockableLock2.size = CGSizeMake(unlockableLock2.frame.size.width/s, unlockableLock2.frame.size.height/s);
    unlockableLock2.zPosition = 999;
    unlockableLock2.name = @"critText";
    [self.spriteLayer addChild:unlockableLock2];
    }
    if (gold303 == NO) {
    unlockableLock3Texture = [buttonSprites textureNamed:@"Unlockable Lock"];
    unlockableLock3 = [SKSpriteNode spriteNodeWithTexture:unlockableLock3Texture];
    unlockableLock3.position = CGPointMake(self.frame.size.width/2.95, -self.frame.size.height/2.4);
    unlockableLock3.size = CGSizeMake(unlockableLock3.frame.size.width/s, unlockableLock3.frame.size.height/s);
    unlockableLock3.zPosition = 999;
    unlockableLock3.name = @"antiText";
    [self.spriteLayer addChild:unlockableLock3];
    }
    
    if (cantLock1Blink == NO) {
        
        [unlockableLock1 runAction:[SKAction repeatActionForever:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0.5],[SKAction fadeAlphaTo:1 duration:0.5]]]]];
        
    }
    if (cantLock2Blink == NO) {
        
        [unlockableLock2 runAction:[SKAction repeatActionForever:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0.5],[SKAction fadeAlphaTo:1 duration:0.5]]]]];
        
    }
    if (cantLock3Blink == NO) {
        
        [unlockableLock3 runAction:[SKAction repeatActionForever:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0.5],[SKAction fadeAlphaTo:1 duration:0.5]]]]];
        
    }
    
    
}

-(void)battleSequence1 {
    
    cycle +=1;
    ep = 0;
    
    if (cycle > 2) {
        cycle = 1;
    }
    
    if (cycle == 1) {
        
        [self.reggyLayer removeAllChildren];
        [self.reggyLayer removeAllActions];
        z = 90;
        t = 4.08333333;
        [self reggyEnergyDecrease];
        
        //---------------------------------------------------ReggySmash Animation---------------------------------------------------\\
        
    ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointMake(0, self.frame.size.height/8);
    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
    ReggyBot.zPosition = 2.99;
    [self.reggyLayer addChild:ReggyBot];
    
    // Make A Rumble Matter for @2x~iphone
    
    rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
    rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
    rubble.position = CGPointMake(0, 1500);
    rubble.size = CGSizeMake(rubble.frame.size.width/s, rubble.frame.size.height/s);
    rubble.zPosition = 1000;
    [self.reggyLayer addChild:rubble];
    
    energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
    energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
    energyPull.position = CGPointZero;
    energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
    energyPull.zPosition = 2.9999;
    energyPull.alpha = 0;
    [self.reggyLayer addChild:energyPull];
        
    lightningSmashTexture = [ReggySmashSprites textureNamed:@"SmashLightning1"];
    lightningSmash = [SKSpriteNode spriteNodeWithTexture:lightningSmashTexture];
    lightningSmash.position = CGPointZero;
    lightningSmash.size = CGSizeMake(lightningSmash.frame.size.width/s, lightningSmash.frame.size.height/s);
    lightningSmash.zPosition = 5;
    lightningSmash.alpha = 0;
    [self.reggyLayer addChild:lightningSmash];
        
        [energyPull runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1.0 duration:0.5],[SKAction waitForDuration:0.5],[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
    
    SKAction *wait7 = [SKAction waitForDuration:0.5];
    SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
    SKAction *moveUp7 = [SKAction moveToY:1000 duration:0.333333332];
    SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
    SKAction *moveDown7 = [SKAction moveToY:self.frame.size.height/50 duration:0.249999999];
    SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
    SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,[SKAction group:@[reggySmashTextures,moveDown7]]]];
    [ReggyBot runAction:sequence8];
        
        [lightningSmash runAction:[SKAction sequence:@[[SKAction waitForDuration:4.958333326833333],[SKAction fadeAlphaTo:1.0 duration:0],[SKAction animateWithTextures:LightningSmash_Anim_Start timePerFrame:0.0833333333333],[SKAction removeFromParent]]]];
    
    SKAction *reggyBashSoundSeq = [SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
        reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        reggySmash.delegate = self;
        [reggySmash play];}]]];
    [self.reggyLayer runAction:reggyBashSoundSeq];
    
    SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:4.574999993],[SKAction runBlock:^{
        if (noFreeze == NO) {
        canSwipe = NO;
        frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
        frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
        frozenScreen.position = CGPointZero;
        frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
        frozenScreen.zPosition = 9000000;
        [self.reggyLayer addChild:frozenScreen];
        }
    }],[SKAction waitForDuration:1],[SKAction runBlock:^{
        canSwipe = YES;
        SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
        [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
    }]]];
    [self.reggyLayer runAction:frozenSeq];
    
    SKAction *wait9 = [SKAction waitForDuration:4.649999993];
    SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
    SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
    SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
    SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
        SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
        
        SKAction *wait10 = [SKAction waitForDuration:4.649999993];
        SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
        SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
        SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
        SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
        SKAction *sequenceR1 = [SKAction sequence:@[wait10,alpha1,repeatGroup10]];
        
        [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
        [background runAction:sequenceR withKey:@"shake1"];
    [self.gameLayer runAction:sequenceR withKey:@"shake2"];
    SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:5.1],[SKAction removeFromParent]]];
    [rubble runAction:rumbleSequence completion:^{
        
        //---------------------------------------------------ReggySheild Animation---------------------------------------------------\\
        
        [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
            
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 9;
            t= 12.85;
            [self reggyEnergyDecrease];
            [self.foodsLayer removeActionForKey:@"spriteFade"];
            [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
            
        ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 2.99;
        [self.reggyLayer addChild:ReggyBot];
        
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"SheildStartUp" ofType:@"wav"];
        reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        reggySmash.delegate = self;
        [reggySmash play];
        
        [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
            
        SKAction *canBlockSeq = [SKAction sequence:@[[SKAction waitForDuration:2.833333333322],[SKAction runBlock:^{
            canBlock = YES;
        }],[SKAction waitForDuration:10.1],[SKAction runBlock:^{
            canBlock = NO;
            sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
            sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
        }]]];
        [self.reggyLayer runAction:canBlockSeq completion:^{
            
            //---------------------------------------------------Eat Animation---------------------------------------------------\\
            
            [ReggyBot runAction:[SKAction group:@[[SKAction animateWithTextures:D3_Anim_Start timePerFrame:0.083333333333],[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1]]] completion:^ {
                
            canBat = NO;
            
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
            
            ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
            ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
            ReggyBot.zPosition = 2.99;
            [self.reggyLayer addChild:ReggyBot];
            
            [ReggyBot runAction:[SKAction repeatAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] count:4] completion:^{
                
                eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                eatRadius.alpha = 0.0;
                eatRadius.zPosition = 3.3;
                [self.reggyLayer addChild:eatRadius];
                eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                eatRadius.physicsBody.dynamic = NO;
                eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                
            }];
                
            }];
        }];
        
    }];
        
    }];
        
    }
    
    
    if (cycle == 2) {
        
        //---------------------------------------------------ReggySmash Animation---------------------------------------------------\\
        
        [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/8) duration:0.1] completion:^{
            
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 90;
            t = 4.08333333;
            [self reggyEnergyDecrease];
            
        ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointMake(0, self.frame.size.height/8);
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 2.99;
        [self.reggyLayer addChild:ReggyBot];
        
        // Make A Rumble Matter for @2x~iphone
        
        rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
        rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
        rubble.position = CGPointMake(0, 1500);
        rubble.size = CGSizeMake(rubble.frame.size.width/s, rubble.frame.size.height/s);
        rubble.zPosition = 1000;
        [self.reggyLayer addChild:rubble];
        
        energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
        energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
        energyPull.position = CGPointZero;
        energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
        energyPull.zPosition = 2.9999;
        energyPull.alpha = 0;
        [self.reggyLayer addChild:energyPull];
        
        lightningSmashTexture = [ReggySmashSprites textureNamed:@"SmashLightning1"];
        lightningSmash = [SKSpriteNode spriteNodeWithTexture:lightningSmashTexture];
        lightningSmash.position = CGPointZero;
        lightningSmash.size = CGSizeMake(lightningSmash.frame.size.width/s, lightningSmash.frame.size.height/s);
        lightningSmash.zPosition = 5;
        lightningSmash.alpha = 0;
        [self.reggyLayer addChild:lightningSmash];
        
        [energyPull runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1.0 duration:0.5],[SKAction waitForDuration:0.5],[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
        
        SKAction *wait7 = [SKAction waitForDuration:0.5];
        SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
        SKAction *moveUp7 = [SKAction moveToY:1000 duration:0.333333332];
        SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
        SKAction *moveDown7 = [SKAction moveToY:self.frame.size.height/50 duration:0.249999999];
        SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
        SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,[SKAction group:@[reggySmashTextures,moveDown7]]]];
        [ReggyBot runAction:sequence8];
        
        [lightningSmash runAction:[SKAction sequence:@[[SKAction waitForDuration:4.958333326833333],[SKAction fadeAlphaTo:1.0 duration:0],[SKAction animateWithTextures:LightningSmash_Anim_Start timePerFrame:0.0833333333333],[SKAction removeFromParent]]]];
        
        SKAction *reggyBashSoundSeq = [SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
            reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            reggySmash.delegate = self;
            [reggySmash play];}]]];
        [self.reggyLayer runAction:reggyBashSoundSeq];
        
        SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:4.574999993],[SKAction runBlock:^{
            if (noFreeze == NO) {
                canSwipe = NO;
                frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                frozenScreen.position = CGPointZero;
                frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                frozenScreen.zPosition = 9000000;
                [self.reggyLayer addChild:frozenScreen];
            }
        }],[SKAction waitForDuration:1],[SKAction runBlock:^{
            canSwipe = YES;
            SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
            [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
        }]]];
        [self.reggyLayer runAction:frozenSeq];
        
        SKAction *wait9 = [SKAction waitForDuration:4.649999993];
        SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
        SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
        SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
        SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
        SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
            
            SKAction *wait10 = [SKAction waitForDuration:4.649999993];
            SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
            SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
            SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
            SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
            SKAction *sequenceR1 = [SKAction sequence:@[wait10,alpha1,repeatGroup10]];
        [background runAction:sequenceR withKey:@"shake1"];
        [self.gameLayer runAction:sequenceR withKey:@"shake2"];
            [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
        SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:8.1],[SKAction removeFromParent]]];
        [rubble runAction:rumbleSequence completion:^{
        
                //---------------------------------------------------Bat Animation---------------------------------------------------\\
            
            [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                
            [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                z = 9;
                t = 12.20;
                [self reggyEnergyDecrease];
                [self.foodsLayer removeActionForKey:@"spriteFade"];
                [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
            
        ReggyBotTexture = [ReggyBatPull textureNamed:@"F5"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointMake(0, self.frame.size.height/45);
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 2.99;
        [self.reggyLayer addChild:ReggyBot];
            
            batRadiusTexture = [buttonSprites textureNamed:@"BatRadius"];
            batRadius = [SKSpriteNode spriteNodeWithTexture:batRadiusTexture];
            batRadius.position = CGPointMake(0, self.frame.size.height/12);
            batRadius.size = CGSizeMake(batRadius.frame.size.width/s, batRadius.frame.size.height/s);
            batRadius.zPosition = 120;
            [self.reggyLayer addChild:batRadius];
            
            [batRadius runAction:[SKAction repeatAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0.2],[SKAction fadeAlphaTo:1 duration:0.2]]] count:5]];
            
            [ReggyBot runAction:[SKAction waitForDuration:2.17] completion:^{
                
                batRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:batRadius.size];
                batRadius.physicsBody.dynamic = NO;
                batRadius.physicsBody.categoryBitMask = batCategory;
                canBat = YES;
                
                
            }];
                [self.reggyLayer runAction:[SKAction waitForDuration:12] completion:^{
                    
                //---------------------------------------------------Eat Animation---------------------------------------------------\\
                    
                    [ReggyBot runAction:[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1] completion:^{
                        
                canBat = NO;
                    
                    [self.reggyLayer removeAllChildren];
                    [self.reggyLayer removeAllActions];
                    
                ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                ReggyBot.zPosition = 2.99;
                [self.reggyLayer addChild:ReggyBot];
                 
                    [ReggyBot runAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] completion:^{
                        
                eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                eatRadius.alpha = 0.0;
                eatRadius.zPosition = 3.3;
                [self.reggyLayer addChild:eatRadius];
                eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                eatRadius.physicsBody.dynamic = NO;
                eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                        
                            }];
                        }];
                    }];
                }];
            }];
        }];
    }
    
}
-(void)battleSequence2 {
    
    cycle +=1;
    ep = 0;
    
    if (cycle > 3) {
        cycle = 1;
   }
    
    if (cycle == 1) {
        
                //---------------------------------------------------Lightning Attack Animation---------------------------------------------------\\
        
        [self.reggyLayer removeAllChildren];
        [self.reggyLayer removeAllActions];
        z = 60;
        t = 4.08333333;
        [self reggyEnergyDecrease];
        
        lightningShadeTexture = [lightningAttackSprites5 textureNamed:@"Shade1"];
        lightningShade = [SKSpriteNode spriteNodeWithTexture:lightningShadeTexture];
        lightningShade.size = CGSizeMake(lightningShade.frame.size.width/s, lightningShade.frame.size.height/s);
        //lightningShade.position = CGPointZero;
        //lightningShade.zPosition = 51;
        //[self.spriteLayer addChild:lightningShade];
        SKSpriteNode *mask = [SKSpriteNode spriteNodeWithColor:[SKColor blackColor] size: CGSizeMake(self.frame.size.width, self.frame.size.height)];
        SKCropNode *cropNode = [SKCropNode node];
        [cropNode addChild: mask];
        [cropNode setMaskNode: lightningShade];
        [self.reggyLayer addChild: cropNode];
        cropNode.alpha = 0.9;
        lightningShade.alpha = 0;
        mask.alpha = 0.9;
        cropNode.position = CGPointZero;
        cropNode.zPosition = 5;
        lightningShade.zPosition = 5;
        lightningShade.position = CGPointMake(-25, 4);
        lightningShade.xScale = 0.58823529;
        lightningShade.yScale = 0.58823529;
        mask.zPosition = 5;
        
        NSArray *shadeSpites = @[[lightningAttackSprites5 textureNamed:@"Shade2"],
                                 [lightningAttackSprites5 textureNamed:@"Shade3"],
                                 [lightningAttackSprites5 textureNamed:@"Shade4"]];
        
        [lightningShade runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74],[SKAction group:@[[SKAction fadeAlphaTo:0.9 duration:0.1],[SKAction scaleTo:1 duration:2.333333333324],[SKAction moveTo:CGPointMake(-38, -22) duration:2.333333333324]]]]] completion:^{
            [lightningShade removeFromParent];
            [mask removeFromParent];
            [cropNode removeFromParent];
            lightningShadeTexture = [lightningAttackSprites5 textureNamed:@"Shade2"];
            lightningShade = [SKSpriteNode spriteNodeWithTexture:lightningShadeTexture];
            lightningShade.position = CGPointZero;
            lightningShade.zPosition = 5;
            [self.reggyLayer addChild:lightningShade];
            lightningShade.xScale = 1;
            lightningShade.yScale = 1;
            lightningShade.alpha = 0.9;
            [lightningShade runAction:[SKAction sequence:@[[SKAction animateWithTextures:shadeSpites timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
            
        }];
        
        ReggyBotTexture = [lightningAttackSprites1 textureNamed:@"G1"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 2.99;
        [self runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74],[SKAction runBlock:^{ReggyBot.name = @"reggyBot";}]]]];
        
        [self.reggyLayer addChild:ReggyBot];
        
        punchInt = 10;
        
        punchText = [SKSpriteNode spriteNodeWithImageNamed:@"PunchText"];
        punchText.position = CGPointZero;
        punchText.size = CGSizeMake(punchText.frame.size.width/s, punchText.frame.size.height/s);
        punchText.zPosition = 120;
        [self.reggyLayer addChild:punchText];
        
        punchLabel = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
        punchLabel.name = @"punchLabel";
        punchLabel.position = CGPointMake(self.frame.size.width/7.7, self.frame.size.height/2.25);
        punchLabel.colorBlendFactor = 1;
        punchLabel.fontColor = [UIColor whiteColor];
        punchLabel.zPosition = 209;
        punchLabel.fontSize = 35;
        punchLabel.text = [NSString stringWithFormat:@"%li", (long)punchInt];
        [self.reggyLayer addChild:punchLabel];
        
        SKAction *playLightnigSoundSequence = [SKAction sequence:@[[SKAction waitForDuration:1.74999999993],[SKAction runBlock:^{
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"LightningAttack" ofType:@"wav"];
            reggyLightning = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            reggyLightning.delegate = self;
            [reggyLightning play];}]]];
        [self.reggyLayer runAction:playLightnigSoundSequence];
        
        SKAction *lightningSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_Start timePerFrame:0.08333333333]]];
        [ReggyBot runAction:lightningSeq completion:^{
            
            [punchLabel removeFromParent];
            [punchText removeFromParent];
            
            if (punchInt > 0) {
                
                SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_End timePerFrame:0.08333333333]]];
                [ReggyBot runAction:EndSeq];
                
                [punchText removeFromParent];
                
                SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                SKAction *sequenceR1 = [SKAction sequence:@[alpha1,repeatGroup10]];
                
                [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
                SKAction *frozenSeq = [SKAction sequence:@[[SKAction runBlock:^{
                    if (noFreeze == NO) {
                        canSwipe = NO;
                        frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                        frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                        frozenScreen.position = CGPointZero;
                        frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                        frozenScreen.zPosition = 9000000;
                        [self.reggyLayer addChild:frozenScreen];
                    }
                }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                    canSwipe = YES;
                    SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                    [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
                }]]];
                [self.reggyLayer runAction:frozenSeq];
                
            }
            if (punchInt <= 0) {
                
                SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:Gg_Anim_End timePerFrame:0.08333333333]]];
                [ReggyBot runAction:EndSeq];
                
                [punchText removeFromParent];
                
            }
            
        }];
        [self.reggyLayer runAction:[SKAction waitForDuration:10.2] completion:^{
            
            //---------------------------------------------------Bat Animation---------------------------------------------------\\
            
            [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^ {
                
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 20;
            t = 12.20;
            [self reggyEnergyDecrease];
            [self.foodsLayer removeActionForKey:@"spriteFade"];
            [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
            
            ReggyBotTexture = [ReggyBatPull textureNamed:@"F5"];
            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
            ReggyBot.position = CGPointMake(0, self.frame.size.height/45);
            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
            ReggyBot.zPosition = 2.99;
            [self.reggyLayer addChild:ReggyBot];
            
            batRadiusTexture = [buttonSprites textureNamed:@"BatRadius"];
            batRadius = [SKSpriteNode spriteNodeWithTexture:batRadiusTexture];
            batRadius.position = CGPointMake(0, self.frame.size.height/12);
            batRadius.size = CGSizeMake(batRadius.frame.size.width/s, batRadius.frame.size.height/s);
            batRadius.zPosition = 120;
            [self.reggyLayer addChild:batRadius];
            
            [batRadius runAction:[SKAction repeatAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0.2],[SKAction fadeAlphaTo:1 duration:0.2]]] count:5]];
            
            [ReggyBot runAction:[SKAction waitForDuration:2.17] completion:^{
                
                batRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:batRadius.size];
                batRadius.physicsBody.dynamic = NO;
                batRadius.physicsBody.categoryBitMask = batCategory;
                canBat = YES;
                
                
            }];
            [self.reggyLayer runAction:[SKAction waitForDuration:12] completion:^{
                
                //---------------------------------------------------ReggySheild Animation---------------------------------------------------\\
                
                [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
                    
                    [self.reggyLayer removeAllChildren];
                    [self.reggyLayer removeAllActions];
                    z = 19;
                    t = 12.85;
                    [self reggyEnergyDecrease];
                    
                    ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
                    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                    ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
                    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                    ReggyBot.zPosition = 2.99;
                    [self.reggyLayer addChild:ReggyBot];
                    
                    NSString *sound = [[NSBundle mainBundle]pathForResource:@"SheildStartUp" ofType:@"wav"];
                    reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                    reggySmash.delegate = self;
                    [reggySmash play];
                    
                    [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
                    
                SKAction *canBlockSeq = [SKAction sequence:@[[SKAction waitForDuration:2.833333333322],[SKAction runBlock:^{
                    canBlock = YES;
                }],[SKAction waitForDuration:10.1],[SKAction runBlock:^{
                    canBlock = NO;
                    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                }]]];
                [self.reggyLayer runAction:canBlockSeq completion:^{
                    
                    //---------------------------------------------------Eat Animation---------------------------------------------------\\
                    
                    canBat = NO;
                    
                    [ReggyBot runAction:[SKAction group:@[[SKAction animateWithTextures:D3_Anim_Start timePerFrame:0.083333333333],[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1]]] completion:^ {
                        
                        canBat = NO;
                        
                        [self.reggyLayer removeAllChildren];
                        [self.reggyLayer removeAllActions];
                        
                        ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
                        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                        ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
                        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                        ReggyBot.zPosition = 2.99;
                        [self.reggyLayer addChild:ReggyBot];
                        
                        [ReggyBot runAction:[SKAction repeatAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] count:4] completion:^{
                            
                            eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                            eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                            eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                            eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                            eatRadius.alpha = 0.0;
                            eatRadius.zPosition = 3.3;
                            [self.reggyLayer addChild:eatRadius];
                            eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                            eatRadius.physicsBody.dynamic = NO;
                            eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                            
                                }];
                        
                            }];
                        
                        }];
                        
                    }];
                }];
            }];
        }];
        
    }
    
    if (cycle == 2) {
        
        //---------------------------------------------------ReggySmash Animation---------------------------------------------------\\
        
        [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/8) duration:0.1] completion:^{
            
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 45;
            t = 4.08333333;
            [self reggyEnergyDecrease];
            
        ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.position = CGPointMake(0, self.frame.size.height/8);
        ReggyBot.zPosition = 2.99;
        [self.reggyLayer addChild:ReggyBot];
        
        rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
        rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
        rubble.position = CGPointMake(0, 1500);
        rubble.size = CGSizeMake(rubble.frame.size.width/s, rubble.frame.size.height/s);
        rubble.zPosition = 1000;
        [self.reggyLayer addChild:rubble];
        
        energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
        energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
        energyPull.position = CGPointZero;
        energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
        energyPull.zPosition = 2.9999;
        [self.reggyLayer addChild:energyPull];
        
        [energyPull runAction:[SKAction sequence:@[[SKAction waitForDuration:0.5],[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
        
        SKAction *wait7 = [SKAction waitForDuration:0.5];
        SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
        SKAction *moveUp7 = [SKAction moveByX:0 y:1000 duration:0.333333332];
        SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
        SKAction *moveDown7 = [SKAction moveByX:0 y:-1000 duration:0.249999999];
        SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
        SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,moveDown7,reggySmashTextures]];
        [ReggyBot runAction:sequence8];
        
        SKAction *reggyBashSoundSeq = [SKAction sequence:@[[SKAction waitForDuration:1.749999993],[SKAction runBlock:^{
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
            reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            reggySmash.delegate = self;
            [reggySmash play];}]]];
        [self.reggyLayer runAction:reggyBashSoundSeq];
        
        SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:4.574999993],[SKAction runBlock:^{
            if (noFreeze == NO) {
                canSwipe = NO;
                frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                frozenScreen.position = CGPointZero;
                frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                frozenScreen.zPosition = 9000000;
                [self.reggyLayer addChild:frozenScreen];
            }
        }],[SKAction waitForDuration:1],[SKAction runBlock:^{
            canSwipe = YES;
            SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
            [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
        }]]];
        [self.reggyLayer runAction:frozenSeq];
            
        SKAction *wait9 = [SKAction waitForDuration:4.649999993];
        SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
        SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
        SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
        SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
            SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
            
            SKAction *wait10 = [SKAction waitForDuration:4.649999993];
            SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
            SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
            SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
            SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
            SKAction *sequenceR1 = [SKAction sequence:@[wait10,alpha1,repeatGroup10]];
            
            [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
        [background runAction:sequenceR withKey:@"shake1"];
        [self.gameLayer runAction:sequenceR withKey:@"shake2"];
        SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:5.1],[SKAction removeFromParent]]];
        [rubble runAction:rumbleSequence completion:^{
            
                [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                    
                    //---------------------------------------------------Lightning Attack Animation---------------------------------------------------\\
                    
                    [self.reggyLayer removeAllChildren];
                    [self.reggyLayer removeAllActions];
                    z = 45;
                    t = 4.08333333;
                    [self reggyEnergyDecrease];
                    [self.foodsLayer removeActionForKey:@"spriteFade"];
                    [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
                    
                    lightningShadeTexture = [lightningAttackSprites5 textureNamed:@"Shade1"];
                    lightningShade = [SKSpriteNode spriteNodeWithTexture:lightningShadeTexture];
                    lightningShade.size = CGSizeMake(lightningShade.frame.size.width/s, lightningShade.frame.size.height/s);
                    //lightningShade.position = CGPointZero;
                    //lightningShade.zPosition = 51;
                    //[self.spriteLayer addChild:lightningShade];
                    SKSpriteNode *mask = [SKSpriteNode spriteNodeWithColor:[SKColor blackColor] size: CGSizeMake(self.frame.size.width, self.frame.size.height)];
                    SKCropNode *cropNode = [SKCropNode node];
                    [cropNode addChild: mask];
                    [cropNode setMaskNode: lightningShade];
                    [self.reggyLayer addChild: cropNode];
                    cropNode.alpha = 0.9;
                    lightningShade.alpha = 0;
                    mask.alpha = 0.9;
                    cropNode.position = CGPointZero;
                    cropNode.zPosition = 5;
                    lightningShade.zPosition = 5;
                    lightningShade.position = CGPointMake(-25, 4);
                    lightningShade.xScale = 0.58823529;
                    lightningShade.yScale = 0.58823529;
                    mask.zPosition = 5;
                    
                    NSArray *shadeSpites = @[[lightningAttackSprites5 textureNamed:@"Shade2"],
                                             [lightningAttackSprites5 textureNamed:@"Shade3"],
                                             [lightningAttackSprites5 textureNamed:@"Shade4"]];
                    
                    [lightningShade runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74],[SKAction group:@[[SKAction fadeAlphaTo:0.9 duration:0.1],[SKAction scaleTo:1 duration:2.333333333324],[SKAction moveTo:CGPointMake(-38, -22) duration:2.333333333324]]]]] completion:^{
                        [lightningShade removeFromParent];
                        [mask removeFromParent];
                        [cropNode removeFromParent];
                        lightningShadeTexture = [lightningAttackSprites5 textureNamed:@"Shade2"];
                        lightningShade = [SKSpriteNode spriteNodeWithTexture:lightningShadeTexture];
                        lightningShade.position = CGPointZero;
                        lightningShade.zPosition = 5;
                        [self.reggyLayer addChild:lightningShade];
                        lightningShade.xScale = 1;
                        lightningShade.yScale = 1;
                        lightningShade.alpha = 0.9;
                        [lightningShade runAction:[SKAction sequence:@[[SKAction animateWithTextures:shadeSpites timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                        
                    }];
                    
                    ReggyBotTexture = [lightningAttackSprites1 textureNamed:@"G1"];
                    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                    ReggyBot.position = CGPointZero;
                    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                    ReggyBot.zPosition = 2.99;
                    [self runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74],[SKAction runBlock:^{ReggyBot.name = @"reggyBot";}]]]];
                    
                    [self.reggyLayer addChild:ReggyBot];
                    
                    punchInt = 10;
                    
                    punchText = [SKSpriteNode spriteNodeWithImageNamed:@"PunchText"];
                    punchText.position = CGPointZero;
                    punchText.size = CGSizeMake(punchText.frame.size.width/s, punchText.frame.size.height/s);
                    punchText.zPosition = 120;
                    [self.reggyLayer addChild:punchText];
                    
                    punchLabel = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
                    punchLabel.name = @"punchLabel";
                    punchLabel.position = CGPointMake(self.frame.size.width/7.7, self.frame.size.height/2.25);
                    punchLabel.colorBlendFactor = 1;
                    punchLabel.fontColor = [UIColor whiteColor];
                    punchLabel.zPosition = 209;
                    punchLabel.fontSize = 35;
                    punchLabel.text = [NSString stringWithFormat:@"%li", (long)punchInt];
                    [self.reggyLayer addChild:punchLabel];
                    
                    SKAction *playLightnigSoundSequence = [SKAction sequence:@[[SKAction waitForDuration:1.74999999993],[SKAction runBlock:^{
                        NSString *sound = [[NSBundle mainBundle]pathForResource:@"LightningAttack" ofType:@"wav"];
                        reggyLightning = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                        reggyLightning.delegate = self;
                        [reggyLightning play];}]]];
                    [self.reggyLayer runAction:playLightnigSoundSequence];
                    
                    SKAction *lightningSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_Start timePerFrame:0.08333333333]]];
                    [ReggyBot runAction:lightningSeq completion:^{
                        
                        [punchLabel removeFromParent];
                        [punchText removeFromParent];
                        
                        if (punchInt > 0) {
                            
                            SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_End timePerFrame:0.08333333333]]];
                            [ReggyBot runAction:EndSeq];
                            
                            [punchText removeFromParent];
                            
                            SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                            SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                            SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                            SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                            SKAction *sequenceR1 = [SKAction sequence:@[alpha1,repeatGroup10]];
                            
                            [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
                            SKAction *frozenSeq = [SKAction sequence:@[[SKAction runBlock:^{
                                if (noFreeze == NO) {
                                    canSwipe = NO;
                                    frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                                    frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                                    frozenScreen.position = CGPointZero;
                                    frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                                    frozenScreen.zPosition = 9000000;
                                    [self.reggyLayer addChild:frozenScreen];
                                }
                            }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                                canSwipe = YES;
                                SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                                [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
                            }]]];
                            [self.reggyLayer runAction:frozenSeq];
                            
                        }
                        if (punchInt <= 0) {
                            
                            SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:Gg_Anim_End timePerFrame:0.08333333333]]];
                            [ReggyBot runAction:EndSeq];
                            
                            [punchText removeFromParent];
                            
                        }
                        
                    }];
            [self.reggyLayer runAction:[SKAction waitForDuration:10.2] completion:^{
                
                //---------------------------------------------------ReggySheild Animation---------------------------------------------------\\
                
                [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
                
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                z = 9;
                t = 12.85;
                [self reggyEnergyDecrease];
                [self.foodsLayer removeActionForKey:@"spriteFade"];
                [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
                    
                ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                ReggyBot.zPosition = 2.99;
                [self.reggyLayer addChild:ReggyBot];
                
                NSString *sound = [[NSBundle mainBundle]pathForResource:@"SheildStartUp" ofType:@"wav"];
                reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                reggySmash.delegate = self;
                [reggySmash play];
                
                [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
                
                SKAction *canBlockSeq = [SKAction sequence:@[[SKAction waitForDuration:2.833333333322],[SKAction runBlock:^{
                    canBlock = YES;
                }],[SKAction waitForDuration:10],[SKAction runBlock:^{
                    canBlock = NO;
                    sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                    sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                }]]];
                [self.reggyLayer runAction:canBlockSeq completion:^{
                    
                    //---------------------------------------------------Eat Animation---------------------------------------------------\\
                    
                    [ReggyBot runAction:[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1] completion:^{
                        
                        canBat = NO;
                        
                        [self.reggyLayer removeAllChildren];
                        [self.reggyLayer removeAllActions];
                        
                        ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
                        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                        ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
                        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                        ReggyBot.zPosition = 2.99;
                        [self.reggyLayer addChild:ReggyBot];
                        
                        [ReggyBot runAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] completion:^{
                            
                            eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                            eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                            eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                            eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                            eatRadius.alpha = 0.0;
                            eatRadius.zPosition = 3.3;
                            [self.reggyLayer addChild:eatRadius];
                            eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                            eatRadius.physicsBody.dynamic = NO;
                            eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                            
                        }];
                                }];
                            }];
                        }];
                    
                    }];
                }];
                
            }];
            
        }];
        
    }
    
    if (cycle == 3) {
        
        [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
            
            //---------------------------------------------------Lightning Attack Animation---------------------------------------------------\\
            
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 60;
            t = 4.08333333;
            [self reggyEnergyDecrease];
            
            lightningShadeTexture = [lightningAttackSprites5 textureNamed:@"Shade1"];
            lightningShade = [SKSpriteNode spriteNodeWithTexture:lightningShadeTexture];
            lightningShade.size = CGSizeMake(lightningShade.frame.size.width/s, lightningShade.frame.size.height/s);
            //lightningShade.position = CGPointZero;
            //lightningShade.zPosition = 51;
            //[self.spriteLayer addChild:lightningShade];
            SKSpriteNode *mask = [SKSpriteNode spriteNodeWithColor:[SKColor blackColor] size: CGSizeMake(self.frame.size.width, self.frame.size.height)];
            SKCropNode *cropNode = [SKCropNode node];
            [cropNode addChild: mask];
            [cropNode setMaskNode: lightningShade];
            [self.reggyLayer addChild: cropNode];
            cropNode.alpha = 0.9;
            lightningShade.alpha = 0;
            mask.alpha = 0.9;
            cropNode.position = CGPointZero;
            cropNode.zPosition = 5;
            lightningShade.zPosition = 5;
            lightningShade.position = CGPointMake(-25, 4);
            lightningShade.xScale = 0.58823529;
            lightningShade.yScale = 0.58823529;
            mask.zPosition = 5;
            
            NSArray *shadeSpites = @[[lightningAttackSprites5 textureNamed:@"Shade2"],
                                     [lightningAttackSprites5 textureNamed:@"Shade3"],
                                     [lightningAttackSprites5 textureNamed:@"Shade4"]];
            
            [lightningShade runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74],[SKAction group:@[[SKAction fadeAlphaTo:0.9 duration:0.1],[SKAction scaleTo:1 duration:2.333333333324],[SKAction moveTo:CGPointMake(-38, -22) duration:2.333333333324]]]]] completion:^{
                [lightningShade removeFromParent];
                [mask removeFromParent];
                [cropNode removeFromParent];
                lightningShadeTexture = [lightningAttackSprites5 textureNamed:@"Shade2"];
                lightningShade = [SKSpriteNode spriteNodeWithTexture:lightningShadeTexture];
                lightningShade.position = CGPointZero;
                lightningShade.zPosition = 5;
                [self.reggyLayer addChild:lightningShade];
                lightningShade.xScale = 1;
                lightningShade.yScale = 1;
                lightningShade.alpha = 0.9;
                [lightningShade runAction:[SKAction sequence:@[[SKAction animateWithTextures:shadeSpites timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                
            }];
            
            ReggyBotTexture = [lightningAttackSprites1 textureNamed:@"G1"];
            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
            ReggyBot.position = CGPointZero;
            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
            ReggyBot.zPosition = 2.99;
            [self runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74],[SKAction runBlock:^{ReggyBot.name = @"reggyBot";}]]]];
            
            [self.reggyLayer addChild:ReggyBot];
            
            punchInt = 10;
            
            punchText = [SKSpriteNode spriteNodeWithImageNamed:@"PunchText"];
            punchText.position = CGPointZero;
            punchText.size = CGSizeMake(punchText.frame.size.width/s, punchText.frame.size.height/s);
            punchText.zPosition = 120;
            [self.reggyLayer addChild:punchText];
            
            punchLabel = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
            punchLabel.name = @"punchLabel";
            punchLabel.position = CGPointMake(self.frame.size.width/7.7, self.frame.size.height/2.25);
            punchLabel.colorBlendFactor = 1;
            punchLabel.fontColor = [UIColor whiteColor];
            punchLabel.zPosition = 209;
            punchLabel.fontSize = 35;
            punchLabel.text = [NSString stringWithFormat:@"%li", (long)punchInt];
            [self.reggyLayer addChild:punchLabel];
            
            SKAction *playLightnigSoundSequence = [SKAction sequence:@[[SKAction waitForDuration:1.74999999993],[SKAction runBlock:^{
                NSString *sound = [[NSBundle mainBundle]pathForResource:@"LightningAttack" ofType:@"wav"];
                reggyLightning = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                reggyLightning.delegate = self;
                [reggyLightning play];}]]];
            [self.reggyLayer runAction:playLightnigSoundSequence];
            
            SKAction *lightningSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_Start timePerFrame:0.08333333333]]];
            [ReggyBot runAction:lightningSeq completion:^{
                
                [punchLabel removeFromParent];
                [punchText removeFromParent];
                
                if (punchInt > 0) {
                    
                    SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_End timePerFrame:0.08333333333]]];
                    [ReggyBot runAction:EndSeq];
                    
                    [punchText removeFromParent];
                    
                    SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                    SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                    SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                    SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                    SKAction *sequenceR1 = [SKAction sequence:@[alpha1,repeatGroup10]];
                    
                    [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
                    SKAction *frozenSeq = [SKAction sequence:@[[SKAction runBlock:^{
                        if (noFreeze == NO) {
                            canSwipe = NO;
                            frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                            frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                            frozenScreen.position = CGPointZero;
                            frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                            frozenScreen.zPosition = 9000000;
                            [self.reggyLayer addChild:frozenScreen];
                        }
                    }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                        canSwipe = YES;
                        SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                        [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
                    }]]];
                    [self.reggyLayer runAction:frozenSeq];
                    
                }
                if (punchInt <= 0) {
                    
                    SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:Gg_Anim_End timePerFrame:0.08333333333]]];
                    [ReggyBot runAction:EndSeq];
                    
                    [punchText removeFromParent];
                    
                }
                
            }];
        [self.reggyLayer runAction:[SKAction waitForDuration:10.2] completion:^{
            
            //---------------------------------------------------ReggySheild Animation---------------------------------------------------\\
            
            [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
                
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 9;
            t = 12.85;
            [self reggyEnergyDecrease];
            [self.foodsLayer removeActionForKey:@"spriteFade"];
            [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];

            
            ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
            ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
            ReggyBot.zPosition = 2.99;
            [self.reggyLayer addChild:ReggyBot];
            
            NSString *sound = [[NSBundle mainBundle]pathForResource:@"SheildStartUp" ofType:@"wav"];
            reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
            reggySmash.delegate = self;
            [reggySmash play];
            
            [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
            
            SKAction *canBlockSeq = [SKAction sequence:@[[SKAction waitForDuration:2.833333333322],[SKAction runBlock:^{
                canBlock = YES;
            }],[SKAction waitForDuration:10],[SKAction runBlock:^{
                canBlock = NO;
                sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
            }]]];
            [self.reggyLayer runAction:canBlockSeq completion:^{
                
                //---------------------------------------------------Wall Animation---------------------------------------------------\\
                
                [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
                
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                z = 30;
                    t = 4.08333333;
                    [self reggyEnergyDecrease];
                
                energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
                energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
                energyPull.position = CGPointZero;
                energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
                energyPull.zPosition = 2.9999;
                [self.reggyLayer addChild:energyPull];
                
                [energyPull runAction:[SKAction sequence:@[[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                
                wall1Texture = [buttonSprites textureNamed:@"Wall"];
                wall1 = [SKSpriteNode spriteNodeWithTexture:wall1Texture];
                wall1.position = CGPointMake(self.frame.size.width * 2, -self.frame.size.width/2.3);
                wall1.size = CGSizeMake(wall1.frame.size.width/s, wall1.frame.size.height/s);
                wall1.zPosition = 120;
                wall1.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall1.size];
                wall1.physicsBody.dynamic = NO;
                [self.reggyLayer addChild:wall1];
                wall1.physicsBody.contactTestBitMask = wallCategory;
                wall1.physicsBody.categoryBitMask = wallCategory;
                
                wall2Texture = [buttonSprites textureNamed:@"Wall"];
                wall2 = [SKSpriteNode spriteNodeWithTexture:wall2Texture];
                wall2.position = CGPointMake(-self.frame.size.width * 2, -self.frame.size.width/2.3);
                wall2.size = CGSizeMake(wall2.frame.size.width/s, wall2.frame.size.height/s);
                wall2.zPosition = 120;
                wall2.xScale = -1;
                wall2.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall2.size];
                wall2.physicsBody.dynamic = NO;
                [self.reggyLayer addChild:wall2];
                wall2.physicsBody.contactTestBitMask = wallCategory;
                wall2.physicsBody.categoryBitMask = wallCategory;
                
                wall3Texture = [buttonSprites textureNamed:@"Wall"];
                wall3 = [SKSpriteNode spriteNodeWithTexture:wall3Texture];
                wall3.position = CGPointMake(-self.frame.size.width * 2, self.frame.size.width/2.3);
                wall3.size = CGSizeMake(wall3.frame.size.width/s, wall3.frame.size.height/s);
                wall3.zPosition = 120;
                wall3.xScale = -1;
                wall3.yScale = -1;
                wall3.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall3.size];
                wall3.physicsBody.dynamic = NO;
                [self.reggyLayer addChild:wall3];
                wall3.physicsBody.contactTestBitMask = wallCategory;
                wall3.physicsBody.categoryBitMask = wallCategory;
                
                wall4Texture = [buttonSprites textureNamed:@"Wall"];
                wall4 = [SKSpriteNode spriteNodeWithTexture:wall4Texture];
                wall4.position = CGPointMake(self.frame.size.width * 2, self.frame.size.width/2.3);
                wall4.zPosition = 120;
                wall4.size = CGSizeMake(wall4.frame.size.width/s, wall4.frame.size.height/s);
                wall4.yScale = -1;
                wall4.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall4.size];
                wall4.physicsBody.dynamic = NO;
                [self.reggyLayer addChild:wall4];
                wall4.physicsBody.contactTestBitMask = wallCategory;
                wall4.physicsBody.categoryBitMask = wallCategory;
                
                ReggyBotTexture = [ReggyWave textureNamed:@"H1"];
                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                ReggyBot.position = CGPointZero;
                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                ReggyBot.zPosition = 2.99;
                [self.reggyLayer addChild:ReggyBot];
                
                SKAction *WaveAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:H1_Anim_Start timePerFrame:0.08333333333],[SKAction animateWithTextures:H2_Anim_Start timePerFrame:0.08333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:H3_Anim_Start timePerFrame:0.08333333333]]]];
                [ReggyBot runAction:WaveAnimSeq];
                
                [self.reggyLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74999999993],[SKAction runBlock:^{
                    [wall1 runAction:[SKAction moveToX:self.frame.size.width/2.5 duration:0.74999999997]];
                    [wall2 runAction:[SKAction moveToX:-self.frame.size.width/2.5 duration:0.74999999997]];
                    [wall3 runAction:[SKAction moveToX:-self.frame.size.width/2.5 duration:0.74999999997]];
                    [wall4 runAction:[SKAction moveToX:self.frame.size.width/2.5 duration:0.74999999997]];
                }]]]];
                
                [self runAction:[SKAction waitForDuration:2.5] completion:^{
                
                SKAction *moveWall1By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]] count:12];
                SKAction *moveWall2By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]] count:12];
                SKAction *moveWall3By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]] count:12];
                SKAction *moveWall4By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]] count:12];
                [wall1 runAction:moveWall1By];
                [wall2 runAction:moveWall2By];
                [wall3 runAction:moveWall3By];
                [wall4 runAction:moveWall4By];
                    
                }];
                [self.reggyLayer runAction:[SKAction waitForDuration:17] completion:^{
                    
                    //---------------------------------------------------ReggySmash Animation---------------------------------------------------\\
                    
                    [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/8) duration:0.1] completion:^{
                        
                        [self.reggyLayer removeAllChildren];
                        [self.reggyLayer removeAllActions];
                        z = 30;
                        t = 4.08333333;
                        [self reggyEnergyDecrease];
                        
                        ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
                        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                        ReggyBot.position = CGPointMake(0, self.frame.size.height/8);
                        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                        ReggyBot.zPosition = 2.99;
                        [self.reggyLayer addChild:ReggyBot];
                        
                        rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
                        rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
                        rubble.position = CGPointMake(0, 1500);
                        rubble.size = CGSizeMake(rubble.frame.size.width/s, rubble.frame.size.height/s);
                        rubble.zPosition = 1000;
                        [self.reggyLayer addChild:rubble];
                        
                        energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
                        energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
                        energyPull.position = CGPointZero;
                        energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
                        energyPull.zPosition = 2.9999;
                        [self.reggyLayer addChild:energyPull];
                        
                        [energyPull runAction:[SKAction sequence:@[[SKAction waitForDuration:0.5],[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                        
                        SKAction *wait7 = [SKAction waitForDuration:0.5];
                        SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
                        SKAction *moveUp7 = [SKAction moveByX:0 y:1000 duration:0.333333332];
                        SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
                        SKAction *moveDown7 = [SKAction moveByX:0 y:-1000 duration:0.249999999];
                        SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
                        SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,moveDown7,reggySmashTextures]];
                        [ReggyBot runAction:sequence8];
                        
                        SKAction *reggyBashSoundSeq = [SKAction sequence:@[[SKAction waitForDuration:1.749999993],[SKAction runBlock:^{
                            NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
                            reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                            reggySmash.delegate = self;
                            [reggySmash play];}]]];
                        [self.reggyLayer runAction:reggyBashSoundSeq];
                        
                        SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:4.574999993],[SKAction runBlock:^{
                            if (noFreeze == NO) {
                                canSwipe = NO;
                                frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                                frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                                frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                                frozenScreen.position = CGPointZero;
                                frozenScreen.zPosition = 9000000;
                                [self.reggyLayer addChild:frozenScreen];
                            }
                        }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                            canSwipe = YES;
                            SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                            [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
                        }]]];
                        [self.reggyLayer runAction:frozenSeq];
                        
                        SKAction *wait9 = [SKAction waitForDuration:4.649999993];
                        SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
                        SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
                        SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
                        SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
                        SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
                        
                        SKAction *wait10 = [SKAction waitForDuration:4.649999993];
                        SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                        SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                        SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                        SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                        SKAction *sequenceR1 = [SKAction sequence:@[wait10,alpha1,repeatGroup10]];
                        
                        [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
                        [background runAction:sequenceR withKey:@"shake1"];
                        [self.gameLayer runAction:sequenceR withKey:@"shake2"];
                        SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:5.1],[SKAction removeFromParent]]];
                    [rubble runAction:rumbleSequence completion:^{
                        
                        //---------------------------------------------------Eat Animation---------------------------------------------------\\
                        
                        [ReggyBot runAction:[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1] completion:^{
                            
                            canBat = NO;
                            
                            [self.reggyLayer removeAllChildren];
                            [self.reggyLayer removeAllActions];
                            [self.foodsLayer removeActionForKey:@"spriteFade"];
                            [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
                            
                            ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
                            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                            ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
                            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                            ReggyBot.zPosition = 2.99;
                            [self.reggyLayer addChild:ReggyBot];
                            
                            [ReggyBot runAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] completion:^{
                                
                                eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                                eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                                eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                                eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                                eatRadius.alpha = 0.0;
                                eatRadius.zPosition = 3.3;
                                [self.reggyLayer addChild:eatRadius];
                                eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                                eatRadius.physicsBody.dynamic = NO;
                                eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                                
                            }];
                                        }];
                                    }];
                                }];
                            }];
                        }];
                    }];
                }];
            }];
        }];
        
    }
    
}
-(void)battleSequence3 {
    
    cycle +=1;
    ep = 0;
    
    if (cycle > 4) {
        cycle = 1;
    }
    
    if (cycle == 1) {
        
        //---------------------------------------------------FoodFall Attack Animation---------------------------------------------------\\
        
        [self.reggyLayer removeAllChildren];
        [self.reggyLayer removeAllActions];
        z = 35;
        t = 4.08333333;
        [self reggyEnergyDecrease];
        
        ReggyBotTexture = [ReggyFoodFallSprites textureNamed:@"I1"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.position = CGPointZero;
        ReggyBot.zPosition = 2.99;
        [self.reggyLayer addChild:ReggyBot];
        
        foodWaterfallTexture = [ReggyFoodFallSprites textureNamed:@"FoodWaterfall"];
        foodWaterfall = [SKSpriteNode spriteNodeWithTexture:foodWaterfallTexture];
        foodWaterfall.size = CGSizeMake(foodWaterfall.frame.size.width/s, foodWaterfall.frame.size.height/s);
        foodWaterfall.position = CGPointMake(0, 1500);
        foodWaterfall.zPosition = 100;
        [self.reggyLayer addChild:foodWaterfall];
        
        energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
        energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
        energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
        energyPull.position = CGPointZero;
        energyPull.zPosition = 2.9999;
        [self.reggyLayer addChild:energyPull];
        
        [energyPull runAction:[SKAction sequence:@[[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
        
        SKAction *foodFallAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:I_Anim_Start timePerFrame:0.08333333333]]];
        [ReggyBot runAction:foodFallAnimSeq];
        [foodWaterfall runAction:[SKAction sequence:@[[SKAction waitForDuration:3.83333333318],[SKAction moveByX:0 y:-2800 duration:8.5],[SKAction removeFromParent]]] completion:^{
            
            //---------------------------------------------------ReggySmash Animation---------------------------------------------------\\
            
            [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
            
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 35;
                t = 4.08333333;
                [self reggyEnergyDecrease];
                
            ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
            ReggyBot.position = CGPointMake(0, self.frame.size.height/8);
            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
            ReggyBot.zPosition = 2.99;
            [self.reggyLayer addChild:ReggyBot];
            
            // Make A Rumble Matter for @2x~iphone
            
            rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
            rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
            rubble.position = CGPointMake(0, 1500);
            rubble.size = CGSizeMake(rubble.frame.size.width/s, rubble.frame.size.height/s);
            rubble.zPosition = 1000;
            [self.reggyLayer addChild:rubble];
            
            energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
            energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
            energyPull.position = CGPointZero;
            energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
            energyPull.zPosition = 2.9999;
            energyPull.alpha = 0;
            [self.reggyLayer addChild:energyPull];
            
            lightningSmashTexture = [ReggySmashSprites textureNamed:@"SmashLightning1"];
            lightningSmash = [SKSpriteNode spriteNodeWithTexture:lightningSmashTexture];
            lightningSmash.position = CGPointZero;
            lightningSmash.size = CGSizeMake(lightningSmash.frame.size.width/s, lightningSmash.frame.size.height/s);
            lightningSmash.zPosition = 5;
            lightningSmash.alpha = 0;
            [self.reggyLayer addChild:lightningSmash];
            
            [energyPull runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1.0 duration:0.5],[SKAction waitForDuration:0.5],[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
            
            SKAction *wait7 = [SKAction waitForDuration:0.5];
            SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
            SKAction *moveUp7 = [SKAction moveToY:1000 duration:0.333333332];
            SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
            SKAction *moveDown7 = [SKAction moveToY:self.frame.size.height/50 duration:0.249999999];
            SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
            SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,[SKAction group:@[reggySmashTextures,moveDown7]]]];
            [ReggyBot runAction:sequence8];
            
            [lightningSmash runAction:[SKAction sequence:@[[SKAction waitForDuration:4.958333326833333],[SKAction fadeAlphaTo:1.0 duration:0],[SKAction animateWithTextures:LightningSmash_Anim_Start timePerFrame:0.0833333333333],[SKAction removeFromParent]]]];
            
            SKAction *reggyBashSoundSeq = [SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
                NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
                reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                reggySmash.delegate = self;
                [reggySmash play];}]]];
            [self.reggyLayer runAction:reggyBashSoundSeq];
            
            SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:4.574999993],[SKAction runBlock:^{
                if (noFreeze == NO) {
                    canSwipe = NO;
                    frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                    frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                    frozenScreen.position = CGPointZero;
                    frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                    frozenScreen.zPosition = 9000000;
                    [self.reggyLayer addChild:frozenScreen];
                }
            }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                canSwipe = YES;
                SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
            }]]];
            [self.reggyLayer runAction:frozenSeq];
            
            SKAction *wait9 = [SKAction waitForDuration:4.649999993];
            SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
            SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
            SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
            SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
                SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
                
                SKAction *wait10 = [SKAction waitForDuration:4.649999993];
                SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                SKAction *sequenceR1 = [SKAction sequence:@[wait10,alpha1,repeatGroup10]];
                
                [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
            [background runAction:sequenceR withKey:@"shake1"];
            [self.gameLayer runAction:sequenceR withKey:@"shake2"];
            SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:5.1],[SKAction removeFromParent]]];
            [rubble runAction:rumbleSequence completion:^{
                
                //---------------------------------------------------ReggySheild Animation---------------------------------------------------\\
                
                [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
                    
                    [self.reggyLayer removeAllChildren];
                    [self.reggyLayer removeAllActions];
                    z = 15;
                    t = 12.85;
                    [self reggyEnergyDecrease];
                    [self.foodsLayer removeActionForKey:@"spriteFade"];
                    [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
                    
                    ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
                    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                    ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
                    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                    ReggyBot.zPosition = 2.99;
                    [self.reggyLayer addChild:ReggyBot];
                    
                    NSString *sound = [[NSBundle mainBundle]pathForResource:@"SheildStartUp" ofType:@"wav"];
                    reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                    reggySmash.delegate = self;
                    [reggySmash play];
                    
                    [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
                    
                    SKAction *canBlockSeq = [SKAction sequence:@[[SKAction waitForDuration:2.833333333322],[SKAction runBlock:^{
                        canBlock = YES;
                    }],[SKAction waitForDuration:10.1],[SKAction runBlock:^{
                        canBlock = NO;
                        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                    }]]];
                [self.reggyLayer runAction:canBlockSeq completion:^{
                    
                    //---------------------------------------------------Bat Animation---------------------------------------------------\\
                    
                    [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                        
                        [self.reggyLayer removeAllChildren];
                        [self.reggyLayer removeAllActions];
                        z = 14;
                        t = 12.20;
                        [self reggyEnergyDecrease];
                        
                        ReggyBotTexture = [ReggyBatPull textureNamed:@"F5"];
                        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                        ReggyBot.position = CGPointMake(0, self.frame.size.height/45);
                        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                        ReggyBot.zPosition = 2.99;
                        [self.reggyLayer addChild:ReggyBot];
                        
                        batRadiusTexture = [buttonSprites textureNamed:@"BatRadius"];
                        batRadius = [SKSpriteNode spriteNodeWithTexture:batRadiusTexture];
                        batRadius.position = CGPointMake(0, self.frame.size.height/12);
                        batRadius.zPosition = 120;
                        batRadius.size = CGSizeMake(batRadius.frame.size.width/s, batRadius.frame.size.height/s);
                        [self.reggyLayer addChild:batRadius];
                        
                        [batRadius runAction:[SKAction repeatAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0.2],[SKAction fadeAlphaTo:1 duration:0.2]]] count:5]];
                        
                        [ReggyBot runAction:[SKAction waitForDuration:2.17] completion:^{
                            
                            batRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:batRadius.size];
                            batRadius.physicsBody.dynamic = NO;
                            batRadius.physicsBody.categoryBitMask = batCategory;
                            canBat = YES;
                            
                            
                        }];
                        [self.reggyLayer runAction:[SKAction waitForDuration:12] completion:^{
                            
                            //---------------------------------------------------Eat Animation---------------------------------------------------\\
                            
                            [ReggyBot runAction:[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1] completion:^{
                                
                                canBat = NO;
                                
                                [self.reggyLayer removeAllChildren];
                                [self.reggyLayer removeAllActions];
                                
                                ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
                                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                                ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
                                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                                ReggyBot.zPosition = 2.99;
                                [self.reggyLayer addChild:ReggyBot];
                                
                                [ReggyBot runAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] completion:^{
                                    
                                    eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                                    eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                                    eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                                    eatRadius.alpha = 0.0;
                                    eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                                    eatRadius.zPosition = 3.3;
                                    [self.reggyLayer addChild:eatRadius];
                                    eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                                    eatRadius.physicsBody.dynamic = NO;
                                    eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                                    
                                        }];
                                    }];
                                }];
                            }];
                        }];
                    }];
                }];
            }];
        }];
        
    }
    
    if (cycle == 2) {
        
        //---------------------------------------------------Wall Animation---------------------------------------------------\\
        
        [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/8) duration:0.1] completion:^{
            
        [self.reggyLayer removeAllChildren];
        [self.reggyLayer removeAllActions];
        z = 35;
            t = 4.08333333;
            [self reggyEnergyDecrease];
        
        energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
        energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
        energyPull.position = CGPointZero;
        energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
        energyPull.zPosition = 2.9999;
        [self.reggyLayer addChild:energyPull];
        
        [energyPull runAction:[SKAction sequence:@[[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
        
        wall1Texture = [buttonSprites textureNamed:@"Wall"];
        wall1 = [SKSpriteNode spriteNodeWithTexture:wall1Texture];
        wall1.position = CGPointMake(self.frame.size.width * 2, -self.frame.size.width/2.3);
        wall1.zPosition = 120;
        wall1.size = CGSizeMake(wall1.frame.size.width/s, wall1.frame.size.height/s);
        wall1.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall1.size];
        wall1.physicsBody.dynamic = NO;
        [self.reggyLayer addChild:wall1];
        wall1.physicsBody.contactTestBitMask = wallCategory;
        wall1.physicsBody.categoryBitMask = wallCategory;
        
        wall2Texture = [buttonSprites textureNamed:@"Wall"];
        wall2 = [SKSpriteNode spriteNodeWithTexture:wall2Texture];
        wall2.position = CGPointMake(-self.frame.size.width * 2, -self.frame.size.width/2.3);
        wall2.zPosition = 120;
        wall2.size = CGSizeMake(wall2.frame.size.width/s, wall2.frame.size.height/s);
        wall2.xScale = -1;
        wall2.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall2.size];
        wall2.physicsBody.dynamic = NO;
        [self.reggyLayer addChild:wall2];
        wall2.physicsBody.contactTestBitMask = wallCategory;
        wall2.physicsBody.categoryBitMask = wallCategory;
        
        wall3Texture = [buttonSprites textureNamed:@"Wall"];
        wall3 = [SKSpriteNode spriteNodeWithTexture:wall3Texture];
        wall3.position = CGPointMake(-self.frame.size.width * 2, self.frame.size.width/2.3);
        wall3.zPosition = 120;
        wall3.size = CGSizeMake(wall3.frame.size.width/s, wall3.frame.size.height/s);
        wall3.xScale = -1;
        wall3.yScale = -1;
        wall3.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall3.size];
        wall3.physicsBody.dynamic = NO;
        [self.reggyLayer addChild:wall3];
        wall3.physicsBody.contactTestBitMask = wallCategory;
        wall3.physicsBody.categoryBitMask = wallCategory;
        
        wall4Texture = [buttonSprites textureNamed:@"Wall"];
        wall4 = [SKSpriteNode spriteNodeWithTexture:wall4Texture];
        wall4.position = CGPointMake(self.frame.size.width * 2, self.frame.size.width/2.3);
        wall4.zPosition = 120;
        wall4.yScale = -1;
        wall4.size = CGSizeMake(wall4.frame.size.width/s, wall4.frame.size.height/s);
        wall4.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall4.size];
        wall4.physicsBody.dynamic = NO;
        [self.reggyLayer addChild:wall4];
        wall4.physicsBody.contactTestBitMask = wallCategory;
        wall4.physicsBody.categoryBitMask = wallCategory;
        
        ReggyBotTexture = [ReggyWave textureNamed:@"H1"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.zPosition = 2.99;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        [self.reggyLayer addChild:ReggyBot];
        
        SKAction *WaveAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:H1_Anim_Start timePerFrame:0.08333333333],[SKAction animateWithTextures:H2_Anim_Start timePerFrame:0.08333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:H3_Anim_Start timePerFrame:0.08333333333]]]];
        [ReggyBot runAction:WaveAnimSeq];
        
        [self.reggyLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74999999993],[SKAction runBlock:^{
            [wall1 runAction:[SKAction moveToX:self.frame.size.width/2.5 duration:0.74999999997]];
            [wall2 runAction:[SKAction moveToX:-self.frame.size.width/2.5 duration:0.74999999997]];
            [wall3 runAction:[SKAction moveToX:-self.frame.size.width/2.5 duration:0.74999999997]];
            [wall4 runAction:[SKAction moveToX:self.frame.size.width/2.5 duration:0.74999999997]];
        }]]]];
        
        [self.reggyLayer runAction:[SKAction waitForDuration:2.5] completion:^{
            
            SKAction *moveWall1By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]] count:12];
            SKAction *moveWall2By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]] count:12];
            SKAction *moveWall3By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]] count:12];
            SKAction *moveWall4By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]] count:12];
            [wall1 runAction:moveWall1By];
            [wall2 runAction:moveWall2By];
            [wall3 runAction:moveWall3By];
            [wall4 runAction:moveWall4By];
            
        }];
        [self.reggyLayer runAction:[SKAction waitForDuration:17] completion:^{
            
            //---------------------------------------------------ReggySmash Animation---------------------------------------------------\\
            
            [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                z = 35;
                t = 4.08333333;
                [self reggyEnergyDecrease];
                
                ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                ReggyBot.position = CGPointMake(0, self.frame.size.height/8);
                ReggyBot.zPosition = 2.99;
                [self.reggyLayer addChild:ReggyBot];
                
                // Make A Rumble Matter for @2x~iphone
                
                rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
                rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
                rubble.position = CGPointMake(0, 1500);
                rubble.zPosition = 1000;
                rubble.size = CGSizeMake(rubble.frame.size.width/s, rubble.frame.size.height/s);
                [self.reggyLayer addChild:rubble];
                
                energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
                energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
                energyPull.position = CGPointZero;
                energyPull.zPosition = 2.9999;
                energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
                energyPull.alpha = 0;
                [self.reggyLayer addChild:energyPull];
                
                lightningSmashTexture = [ReggySmashSprites textureNamed:@"SmashLightning1"];
                lightningSmash = [SKSpriteNode spriteNodeWithTexture:lightningSmashTexture];
                lightningSmash.position = CGPointZero;
                lightningSmash.zPosition = 5;
                lightningSmash.size = CGSizeMake(lightningSmash.frame.size.width/s, lightningSmash.frame.size.height/s);
                lightningSmash.alpha = 0;
                [self.reggyLayer addChild:lightningSmash];
                
                [energyPull runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1.0 duration:0.5],[SKAction waitForDuration:0.5],[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                
                SKAction *wait7 = [SKAction waitForDuration:0.5];
                SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
                SKAction *moveUp7 = [SKAction moveToY:1000 duration:0.333333332];
                SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
                SKAction *moveDown7 = [SKAction moveToY:self.frame.size.height/50 duration:0.249999999];
                SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
                SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,[SKAction group:@[reggySmashTextures,moveDown7]]]];
                [ReggyBot runAction:sequence8];
                
                [lightningSmash runAction:[SKAction sequence:@[[SKAction waitForDuration:4.958333326833333],[SKAction fadeAlphaTo:1.0 duration:0],[SKAction animateWithTextures:LightningSmash_Anim_Start timePerFrame:0.0833333333333],[SKAction removeFromParent]]]];
                
                SKAction *reggyBashSoundSeq = [SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
                    NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
                    reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                    reggySmash.delegate = self;
                    [reggySmash play];}]]];
                [self.reggyLayer runAction:reggyBashSoundSeq];
                
                SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:4.574999993],[SKAction runBlock:^{
                    if (noFreeze == NO) {
                        canSwipe = NO;
                        frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                        frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                        frozenScreen.position = CGPointZero;
                        frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                        frozenScreen.zPosition = 9000000;
                        [self.reggyLayer addChild:frozenScreen];
                    }
                }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                    canSwipe = YES;
                    SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                    [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
                }]]];
                [self.reggyLayer runAction:frozenSeq];
                
                SKAction *wait9 = [SKAction waitForDuration:4.649999993];
                SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
                SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
                SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
                SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
                SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
                
                SKAction *wait10 = [SKAction waitForDuration:4.649999993];
                SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                SKAction *sequenceR1 = [SKAction sequence:@[wait10,alpha1,repeatGroup10]];
                
                [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
                [background runAction:sequenceR withKey:@"shake1"];
                [self.gameLayer runAction:sequenceR withKey:@"shake2"];
                SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:5.1],[SKAction removeFromParent]]];
            [rubble runAction:rumbleSequence completion:^{
                
                //---------------------------------------------------Bat Animation---------------------------------------------------\\
                
                [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                    
                    [self.reggyLayer removeAllChildren];
                    [self.reggyLayer removeAllActions];
                    z = 15;
                    t = 4.08333333;
                    [self reggyEnergyDecrease];
                    [self.foodsLayer removeActionForKey:@"spriteFade"];
                    [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
                    
                    ReggyBotTexture = [ReggyBatPull textureNamed:@"F5"];
                    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                    ReggyBot.position = CGPointMake(0, self.frame.size.height/45);
                    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                    ReggyBot.zPosition = 2.99;
                    [self.reggyLayer addChild:ReggyBot];
                    
                    batRadiusTexture = [buttonSprites textureNamed:@"BatRadius"];
                    batRadius = [SKSpriteNode spriteNodeWithTexture:batRadiusTexture];
                    batRadius.position = CGPointMake(0, self.frame.size.height/12);
                    batRadius.size = CGSizeMake(batRadius.frame.size.width/s, batRadius.frame.size.height/s);
                    batRadius.zPosition = 120;
                    [self.reggyLayer addChild:batRadius];
                    
                    [batRadius runAction:[SKAction repeatAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0.2],[SKAction fadeAlphaTo:1 duration:0.2]]] count:5]];
                    
                    [ReggyBot runAction:[SKAction waitForDuration:2.17] completion:^{
                        
                        batRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:batRadius.size];
                        batRadius.physicsBody.dynamic = NO;
                        batRadius.physicsBody.categoryBitMask = batCategory;
                        canBat = YES;
                        
                        
                    }];
                [self.reggyLayer runAction:[SKAction waitForDuration:12] completion:^{
                    
                    //---------------------------------------------------ReggySheild Animation---------------------------------------------------\\
                    
                    [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
                        
                        [self.reggyLayer removeAllChildren];
                        [self.reggyLayer removeAllActions];
                        z = 14;
                        t = 4.08333333;
                        [self reggyEnergyDecrease];
                        
                        ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
                        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                        ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
                        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                        ReggyBot.zPosition = 2.99;
                        [self.reggyLayer addChild:ReggyBot];
                        
                        NSString *sound = [[NSBundle mainBundle]pathForResource:@"SheildStartUp" ofType:@"wav"];
                        reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                        reggySmash.delegate = self;
                        [reggySmash play];
                        
                        [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
                        
                        SKAction *canBlockSeq = [SKAction sequence:@[[SKAction waitForDuration:2.833333333322],[SKAction runBlock:^{
                            canBlock = YES;
                        }],[SKAction waitForDuration:10.1],[SKAction runBlock:^{
                            canBlock = NO;
                            sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                            sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                        }]]];
                    [self.reggyLayer runAction:canBlockSeq completion:^{
                        
                        //---------------------------------------------------Eat Animation---------------------------------------------------\\
                        
                        [ReggyBot runAction:[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1] completion:^{
                            
                            canBat = NO;
                            
                            [self.reggyLayer removeAllChildren];
                            [self.reggyLayer removeAllActions];
                            
                            ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
                            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                            ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
                            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                            ReggyBot.zPosition = 2.99;
                            [self.reggyLayer addChild:ReggyBot];
                            
                            [ReggyBot runAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] completion:^{
                                
                                eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                                eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                                eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                                eatRadius.alpha = 0.0;
                                eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                                eatRadius.zPosition = 3.3;
                                [self.reggyLayer addChild:eatRadius];
                                eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                                eatRadius.physicsBody.dynamic = NO;
                                eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                                
                                            }];
                            
                                        }];
                            
                                    }];
                        
                                }];
                        
                            }];
                         
                        }];
                        
                    }];
                    
                }];
                
            }];
            
        }];
        
    }
    
    if (cycle == 3) {
        
        //---------------------------------------------------FoodFall Attack Animation---------------------------------------------------\\
        
        [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/8) duration:0.1] completion:^{
            
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 30;
            t = 4.08333333;
            [self reggyEnergyDecrease];
            
        ReggyBotTexture = [ReggyFoodFallSprites textureNamed:@"I1"];
        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
        ReggyBot.position = CGPointZero;
        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
        ReggyBot.zPosition = 2.99;
        [self.reggyLayer addChild:ReggyBot];
        
        foodWaterfallTexture = [ReggyFoodFallSprites textureNamed:@"FoodWaterfall"];
        foodWaterfall = [SKSpriteNode spriteNodeWithTexture:foodWaterfallTexture];
        foodWaterfall.size = CGSizeMake(foodWaterfall.frame.size.width/s, foodWaterfall.frame.size.height/s);
        foodWaterfall.position = CGPointMake(0, 1500);
        foodWaterfall.zPosition = 100;
        [self.reggyLayer addChild:foodWaterfall];
        
        energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
        energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
        energyPull.position = CGPointZero;
        energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
        energyPull.zPosition = 2.9999;
        [self.reggyLayer addChild:energyPull];
        
        [energyPull runAction:[SKAction sequence:@[[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
        
        SKAction *foodFallAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:I_Anim_Start timePerFrame:0.08333333333]]];
        [ReggyBot runAction:foodFallAnimSeq];
        [foodWaterfall runAction:[SKAction sequence:@[[SKAction waitForDuration:3.83333333318],[SKAction moveByX:0 y:-2800 duration:8.5],[SKAction removeFromParent]]] completion:^{
            
            //---------------------------------------------------ReggySmash Animation---------------------------------------------------\\
            
            [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                z = 30;
                t = 4.08333333;
                [self reggyEnergyDecrease];
                
                ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                ReggyBot.position = CGPointMake(0, self.frame.size.height/8);
                ReggyBot.zPosition = 2.99;
                [self.reggyLayer addChild:ReggyBot];
                
                // Make A Rumble Matter for @2x~iphone
                
                rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
                rubble.size = CGSizeMake(rubble.frame.size.width/s, rubble.frame.size.height/s);
                rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
                rubble.position = CGPointMake(0, 1500);
                rubble.zPosition = 1000;
                [self.reggyLayer addChild:rubble];
                
                energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
                energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
                energyPull.position = CGPointZero;
                energyPull.zPosition = 2.9999;
                energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
                energyPull.alpha = 0;
                [self.reggyLayer addChild:energyPull];
                
                lightningSmashTexture = [ReggySmashSprites textureNamed:@"SmashLightning1"];
                lightningSmash = [SKSpriteNode spriteNodeWithTexture:lightningSmashTexture];
                lightningSmash.position = CGPointZero;
                lightningSmash.size = CGSizeMake(lightningSmash.frame.size.width/s, lightningSmash.frame.size.height/s);
                lightningSmash.zPosition = 5;
                lightningSmash.alpha = 0;
                [self.reggyLayer addChild:lightningSmash];
                
                [energyPull runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1.0 duration:0.5],[SKAction waitForDuration:0.5],[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                
                SKAction *wait7 = [SKAction waitForDuration:0.5];
                SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
                SKAction *moveUp7 = [SKAction moveToY:1000 duration:0.333333332];
                SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
                SKAction *moveDown7 = [SKAction moveToY:self.frame.size.height/50 duration:0.249999999];
                SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
                SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,[SKAction group:@[reggySmashTextures,moveDown7]]]];
                [ReggyBot runAction:sequence8];
                
                [lightningSmash runAction:[SKAction sequence:@[[SKAction waitForDuration:4.958333326833333],[SKAction fadeAlphaTo:1.0 duration:0],[SKAction animateWithTextures:LightningSmash_Anim_Start timePerFrame:0.0833333333333],[SKAction removeFromParent]]]];
                
                SKAction *reggyBashSoundSeq = [SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
                    NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
                    reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                    reggySmash.delegate = self;
                    [reggySmash play];}]]];
                [self.reggyLayer runAction:reggyBashSoundSeq];
                
                SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:4.574999993],[SKAction runBlock:^{
                    if (noFreeze == NO) {
                        canSwipe = NO;
                        frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                        frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                        frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                        frozenScreen.position = CGPointZero;
                        frozenScreen.zPosition = 9000000;
                        [self.reggyLayer addChild:frozenScreen];
                    }
                }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                    canSwipe = YES;
                    SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                    [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
                }]]];
                [self.reggyLayer runAction:frozenSeq];
                
                SKAction *wait9 = [SKAction waitForDuration:4.649999993];
                SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
                SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
                SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
                SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
                SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
                
                SKAction *wait10 = [SKAction waitForDuration:4.649999993];
                SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                SKAction *sequenceR1 = [SKAction sequence:@[wait10,alpha1,repeatGroup10]];
                
                [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
                [background runAction:sequenceR withKey:@"shake1"];
                [self.gameLayer runAction:sequenceR withKey:@"shake2"];
                SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:5.1],[SKAction removeFromParent]]];
            [rubble runAction:rumbleSequence completion:^{
                
                //---------------------------------------------------ReggySheild Animation---------------------------------------------------\\
                
                [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
                    
                    [self.reggyLayer removeAllChildren];
                    [self.reggyLayer removeAllActions];
                    z = 9;
                    t = 12.85;
                    [self reggyEnergyDecrease];
                    [self.foodsLayer removeActionForKey:@"spriteFade"];
                    [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
                    
                    ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
                    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                    ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
                    ReggyBot.zPosition = 2.99;
                    [self.reggyLayer addChild:ReggyBot];
                    
                    NSString *sound = [[NSBundle mainBundle]pathForResource:@"SheildStartUp" ofType:@"wav"];
                    reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                    reggySmash.delegate = self;
                    [reggySmash play];
                    
                    [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
                    
                    SKAction *canBlockSeq = [SKAction sequence:@[[SKAction waitForDuration:2.833333333322],[SKAction runBlock:^{
                        canBlock = YES;
                    }],[SKAction waitForDuration:10.1],[SKAction runBlock:^{
                        canBlock = NO;
                        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                    }]]];
                [self.reggyLayer runAction:canBlockSeq completion:^{
                    
                    //---------------------------------------------------Wall Animation---------------------------------------------------\\
                    
                    [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/8) duration:0.1] completion:^{
                        
                        [self.reggyLayer removeAllChildren];
                        [self.reggyLayer removeAllActions];
                        z = 30;
                        t = 4.08333333;
                        [self reggyEnergyDecrease];
                        
                        energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
                        energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
                        energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
                        energyPull.position = CGPointZero;
                        energyPull.zPosition = 2.9999;
                        [self.reggyLayer addChild:energyPull];
                        
                        [energyPull runAction:[SKAction sequence:@[[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                        
                        wall1Texture = [buttonSprites textureNamed:@"Wall"];
                        wall1 = [SKSpriteNode spriteNodeWithTexture:wall1Texture];
                        wall1.position = CGPointMake(self.frame.size.width * 2, -self.frame.size.width/2.3);
                        wall1.size = CGSizeMake(wall1.frame.size.width/s, wall1.frame.size.height/s);
                        wall1.zPosition = 120;
                        wall1.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall1.size];
                        wall1.physicsBody.dynamic = NO;
                        [self.reggyLayer addChild:wall1];
                        wall1.physicsBody.contactTestBitMask = wallCategory;
                        wall1.physicsBody.categoryBitMask = wallCategory;
                        
                        wall2Texture = [buttonSprites textureNamed:@"Wall"];
                        wall2 = [SKSpriteNode spriteNodeWithTexture:wall2Texture];
                        wall2.position = CGPointMake(-self.frame.size.width * 2, -self.frame.size.width/2.3);
                        wall2.size = CGSizeMake(wall2.frame.size.width/s, wall2.frame.size.height/s);
                        wall2.zPosition = 120;
                        wall2.xScale = -1;
                        wall2.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall2.size];
                        wall2.physicsBody.dynamic = NO;
                        [self.reggyLayer addChild:wall2];
                        wall2.physicsBody.contactTestBitMask = wallCategory;
                        wall2.physicsBody.categoryBitMask = wallCategory;
                        
                        wall3Texture = [buttonSprites textureNamed:@"Wall"];
                        wall3 = [SKSpriteNode spriteNodeWithTexture:wall3Texture];
                        wall3.size = CGSizeMake(wall3.frame.size.width/s, wall3.frame.size.height/s);
                        wall3.position = CGPointMake(-self.frame.size.width * 2, self.frame.size.width/2.3);
                        wall3.zPosition = 120;
                        wall3.xScale = -1;
                        wall3.yScale = -1;
                        wall3.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall3.size];
                        wall3.physicsBody.dynamic = NO;
                        [self.reggyLayer addChild:wall3];
                        wall3.physicsBody.contactTestBitMask = wallCategory;
                        wall3.physicsBody.categoryBitMask = wallCategory;
                        
                        wall4Texture = [buttonSprites textureNamed:@"Wall"];
                        wall4 = [SKSpriteNode spriteNodeWithTexture:wall4Texture];
                        wall4.position = CGPointMake(self.frame.size.width * 2, self.frame.size.width/2.3);
                        wall4.size = CGSizeMake(wall4.frame.size.width/s, wall4.frame.size.height/s);
                        wall4.zPosition = 120;
                        wall4.yScale = -1;
                        wall4.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall4.size];
                        wall4.physicsBody.dynamic = NO;
                        [self.reggyLayer addChild:wall4];
                        wall4.physicsBody.contactTestBitMask = wallCategory;
                        wall4.physicsBody.categoryBitMask = wallCategory;
                        
                        ReggyBotTexture = [ReggyWave textureNamed:@"H1"];
                        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                        ReggyBot.position = CGPointZero;
                        ReggyBot.zPosition = 2.99;
                        [self.reggyLayer addChild:ReggyBot];
                        
                        SKAction *WaveAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:H1_Anim_Start timePerFrame:0.08333333333],[SKAction animateWithTextures:H2_Anim_Start timePerFrame:0.08333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:H3_Anim_Start timePerFrame:0.08333333333]]]];
                        [ReggyBot runAction:WaveAnimSeq];
                        
                        [self.reggyLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74999999993],[SKAction runBlock:^{
                            [wall1 runAction:[SKAction moveToX:self.frame.size.width/2.5 duration:0.74999999997]];
                            [wall2 runAction:[SKAction moveToX:-self.frame.size.width/2.5 duration:0.74999999997]];
                            [wall3 runAction:[SKAction moveToX:-self.frame.size.width/2.5 duration:0.74999999997]];
                            [wall4 runAction:[SKAction moveToX:self.frame.size.width/2.5 duration:0.74999999997]];
                        }]]]];
                        
                        [self.reggyLayer runAction:[SKAction waitForDuration:2.5] completion:^{
                            
                            SKAction *moveWall1By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]] count:12];
                            SKAction *moveWall2By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]] count:12];
                            SKAction *moveWall3By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]] count:12];
                            SKAction *moveWall4By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]] count:12];
                            [wall1 runAction:moveWall1By];
                            [wall2 runAction:moveWall2By];
                            [wall3 runAction:moveWall3By];
                            [wall4 runAction:moveWall4By];
                            
                        }];
                    [self.reggyLayer runAction:[SKAction waitForDuration:17] completion:^{
                        
                        //---------------------------------------------------Eat Animation---------------------------------------------------\\
                        
                        [ReggyBot runAction:[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1] completion:^{
                            
                            canBat = NO;
                            
                            [self.reggyLayer removeAllChildren];
                            [self.reggyLayer removeAllActions];
                            
                            ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
                            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                            ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
                            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                            ReggyBot.zPosition = 2.99;
                            [self.reggyLayer addChild:ReggyBot];
                            
                            [ReggyBot runAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] completion:^{
                                
                                eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                                eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                                eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                                eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                                eatRadius.alpha = 0.0;
                                eatRadius.zPosition = 3.3;
                                [self.reggyLayer addChild:eatRadius];
                                eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                                eatRadius.physicsBody.dynamic = NO;
                                eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                                
                                            }];
                            
                                        }];
                        
                                    }];
                        
                                }];
                        
                            }];
                        
                        }];
                    
                    }];
                    
                }];
                
            }];
            
        }];
        
    }
    
    if (cycle == 4) {
        
        //---------------------------------------------------FoodFall Attack Animation---------------------------------------------------\\
        
        [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/8) duration:0.1] completion:^{
            
            [self.reggyLayer removeAllChildren];
            [self.reggyLayer removeAllActions];
            z = 20;
            t = 4.08333333;
            [self reggyEnergyDecrease];
            
            ReggyBotTexture = [ReggyFoodFallSprites textureNamed:@"I1"];
            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
            ReggyBot.position = CGPointZero;
            ReggyBot.zPosition = 2.99;
            [self.reggyLayer addChild:ReggyBot];
            
            foodWaterfallTexture = [ReggyFoodFallSprites textureNamed:@"FoodWaterfall"];
            foodWaterfall.size = CGSizeMake(foodWaterfall.frame.size.width/s, foodWaterfall.frame.size.height/s);
            foodWaterfall = [SKSpriteNode spriteNodeWithTexture:foodWaterfallTexture];
            foodWaterfall.position = CGPointMake(0, 1500);
            foodWaterfall.zPosition = 100;
            [self.reggyLayer addChild:foodWaterfall];
            
            energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
            energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
            energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
            energyPull.position = CGPointZero;
            energyPull.zPosition = 2.9999;
            [self.reggyLayer addChild:energyPull];
            
            [energyPull runAction:[SKAction sequence:@[[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
            
            SKAction *foodFallAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:I_Anim_Start timePerFrame:0.08333333333]]];
            [ReggyBot runAction:foodFallAnimSeq];
            
        [foodWaterfall runAction:[SKAction sequence:@[[SKAction waitForDuration:3.83333333318],[SKAction moveByX:0 y:-2800 duration:8.5],[SKAction removeFromParent]]] completion:^{
            
            //---------------------------------------------------ReggySmash Animation---------------------------------------------------\\
            
            [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                
                [self.reggyLayer removeAllChildren];
                [self.reggyLayer removeAllActions];
                z = 20;
                t = 4.08333333;
                [self reggyEnergyDecrease];
                
                ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                ReggyBot.position = CGPointMake(0, self.frame.size.height/8);
                ReggyBot.zPosition = 2.99;
                [self.reggyLayer addChild:ReggyBot];
                
                // Make A Rumble Matter for @2x~iphone
                
                rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
                rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
                rubble.size = CGSizeMake(rubble.frame.size.width/s, rubble.frame.size.height/s);
                rubble.position = CGPointMake(0, 1500);
                rubble.zPosition = 1000;
                [self.reggyLayer addChild:rubble];
                
                energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
                energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
                energyPull.position = CGPointZero;
                energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
                energyPull.zPosition = 2.9999;
                energyPull.alpha = 0;
                [self.reggyLayer addChild:energyPull];
                
                lightningSmashTexture = [ReggySmashSprites textureNamed:@"SmashLightning1"];
                lightningSmash = [SKSpriteNode spriteNodeWithTexture:lightningSmashTexture];
                lightningSmash.size = CGSizeMake(lightningSmash.frame.size.width/s, lightningSmash.frame.size.height/s);
                lightningSmash.position = CGPointZero;
                lightningSmash.zPosition = 5;
                lightningSmash.alpha = 0;
                [self.reggyLayer addChild:lightningSmash];
                
                [energyPull runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1.0 duration:0.5],[SKAction waitForDuration:0.5],[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                
                SKAction *wait7 = [SKAction waitForDuration:0.5];
                SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
                SKAction *moveUp7 = [SKAction moveToY:1000 duration:0.333333332];
                SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
                SKAction *moveDown7 = [SKAction moveToY:self.frame.size.height/50 duration:0.249999999];
                SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
                SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,[SKAction group:@[reggySmashTextures,moveDown7]]]];
                [ReggyBot runAction:sequence8];
                
                [lightningSmash runAction:[SKAction sequence:@[[SKAction waitForDuration:4.958333326833333],[SKAction fadeAlphaTo:1.0 duration:0],[SKAction animateWithTextures:LightningSmash_Anim_Start timePerFrame:0.0833333333333],[SKAction removeFromParent]]]];
                
                SKAction *reggyBashSoundSeq = [SKAction sequence:@[[SKAction waitForDuration:2],[SKAction runBlock:^{
                    NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
                    reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                    reggySmash.delegate = self;
                    [reggySmash play];}]]];
                [self.reggyLayer runAction:reggyBashSoundSeq];
                
                SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:4.574999993],[SKAction runBlock:^{
                    if (noFreeze == NO) {
                        canSwipe = NO;
                        frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                        frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                        frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                        frozenScreen.position = CGPointZero;
                        frozenScreen.zPosition = 9000000;
                        [self.reggyLayer addChild:frozenScreen];
                    }
                }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                    canSwipe = YES;
                    SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                    [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
                }]]];
                [self.reggyLayer runAction:frozenSeq];
                
                SKAction *wait9 = [SKAction waitForDuration:4.649999993];
                SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
                SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
                SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
                SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
                SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
                
                SKAction *wait10 = [SKAction waitForDuration:4.649999993];
                SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                SKAction *sequenceR1 = [SKAction sequence:@[wait10,alpha1,repeatGroup10]];
                
                [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
                [background runAction:sequenceR withKey:@"shake1"];
                [self.gameLayer runAction:sequenceR withKey:@"shake2"];
                SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:5.1],[SKAction removeFromParent]]];
                
            [rubble runAction:rumbleSequence completion:^{
                
                //---------------------------------------------------ReggySheild Animation---------------------------------------------------\\
                
                [ReggyBot runAction:[SKAction moveTo:CGPointMake(-self.frame.size.width/3, 0) duration:0.1] completion:^{
                    
                    [self.reggyLayer removeAllChildren];
                    [self.reggyLayer removeAllActions];
                    z = 10;
                    t = 12.85;
                    [self reggyEnergyDecrease];
                    [self.foodsLayer removeActionForKey:@"spriteFade"];
                    [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];
                    
                    ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
                    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                    ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
                    ReggyBot.zPosition = 2.99;
                    [self.reggyLayer addChild:ReggyBot];
                    
                    NSString *sound = [[NSBundle mainBundle]pathForResource:@"SheildStartUp" ofType:@"wav"];
                    reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                    reggySmash.delegate = self;
                    [reggySmash play];
                    
                    [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
                    
                    SKAction *canBlockSeq = [SKAction sequence:@[[SKAction waitForDuration:2.833333333322],[SKAction runBlock:^{
                        canBlock = YES;
                    }],[SKAction waitForDuration:10.1],[SKAction runBlock:^{
                        canBlock = NO;
                        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
                    }]]];
                    
                [self.reggyLayer runAction:canBlockSeq completion:^{
                    
                    //---------------------------------------------------Bat Animation---------------------------------------------------\\
                    
                    [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                        
                        [self.reggyLayer removeAllChildren];
                        [self.reggyLayer removeAllActions];
                        z = 9;
                        t = 12.20;
                        [self reggyEnergyDecrease];
                        
                        ReggyBotTexture = [ReggyBatPull textureNamed:@"F5"];
                        ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                        ReggyBot.position = CGPointMake(0, self.frame.size.height/45);
                        ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                        ReggyBot.zPosition = 2.99;
                        [self.reggyLayer addChild:ReggyBot];
                        
                        batRadiusTexture = [buttonSprites textureNamed:@"BatRadius"];
                        batRadius = [SKSpriteNode spriteNodeWithTexture:batRadiusTexture];
                        batRadius.size = CGSizeMake(batRadius.frame.size.width/s, batRadius.frame.size.height/s);
                        batRadius.position = CGPointMake(0, self.frame.size.height/12);
                        batRadius.zPosition = 120;
                        [self.reggyLayer addChild:batRadius];
                        
                        [batRadius runAction:[SKAction repeatAction:[SKAction sequence:@[[SKAction fadeAlphaTo:0 duration:0.2],[SKAction fadeAlphaTo:1 duration:0.2]]] count:5]];
                        
                        [ReggyBot runAction:[SKAction waitForDuration:2.17] completion:^{
                            
                            batRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:batRadius.size];
                            batRadius.physicsBody.dynamic = NO;
                            batRadius.physicsBody.categoryBitMask = batCategory;
                            canBat = YES;
                            
                            
                        }];
                    [self.reggyLayer runAction:[SKAction waitForDuration:12] completion:^{
                        
                        //---------------------------------------------------Wall Animation---------------------------------------------------\\
                        
                        [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/8) duration:0.1] completion:^{
                            
                            [self.reggyLayer removeAllChildren];
                            [self.reggyLayer removeAllActions];
                            z = 20;
                            t = 4.08333333;
                            [self reggyEnergyDecrease];
                            
                            energyPullTexture = [EnergyPullSprites textureNamed:@"Energy1"];
                            energyPull = [SKSpriteNode spriteNodeWithTexture:energyPullTexture];
                            energyPull.size = CGSizeMake(energyPull.frame.size.width/s, energyPull.frame.size.height/s);
                            energyPull.position = CGPointZero;
                            energyPull.zPosition = 2.9999;
                            [self.reggyLayer addChild:energyPull];
                            
                            [energyPull runAction:[SKAction sequence:@[[SKAction animateWithTextures:EnergyPull_Anim_Start timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                            
                            wall1Texture = [buttonSprites textureNamed:@"Wall"];
                            wall1 = [SKSpriteNode spriteNodeWithTexture:wall1Texture];
                            wall1.position = CGPointMake(self.frame.size.width * 2, -self.frame.size.width/2.3);
                            wall1.size = CGSizeMake(wall1.frame.size.width/s, wall1.frame.size.height/s);
                            wall1.zPosition = 120;
                            wall1.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall1.size];
                            wall1.physicsBody.dynamic = NO;
                            [self.reggyLayer addChild:wall1];
                            wall1.physicsBody.contactTestBitMask = wallCategory;
                            wall1.physicsBody.categoryBitMask = wallCategory;
                            
                            wall2Texture = [buttonSprites textureNamed:@"Wall"];
                            wall2 = [SKSpriteNode spriteNodeWithTexture:wall2Texture];
                            wall2.position = CGPointMake(-self.frame.size.width * 2, -self.frame.size.width/2.3);
                            wall2.zPosition = 120;
                            wall2.size = CGSizeMake(wall2.frame.size.width/s, wall2.frame.size.height/s);
                            wall2.xScale = -1;
                            wall2.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall2.size];
                            wall2.physicsBody.dynamic = NO;
                            [self.reggyLayer addChild:wall2];
                            wall2.physicsBody.contactTestBitMask = wallCategory;
                            wall2.physicsBody.categoryBitMask = wallCategory;
                            
                            wall3Texture = [buttonSprites textureNamed:@"Wall"];
                            wall3 = [SKSpriteNode spriteNodeWithTexture:wall3Texture];
                            wall3.position = CGPointMake(-self.frame.size.width * 2, self.frame.size.width/2.3);
                            wall3.size = CGSizeMake(wall3.frame.size.width/s, wall3.frame.size.height/s);
                            wall3.zPosition = 120;
                            wall3.xScale = -1;
                            wall3.yScale = -1;
                            wall3.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall3.size];
                            wall3.physicsBody.dynamic = NO;
                            [self.reggyLayer addChild:wall3];
                            wall3.physicsBody.contactTestBitMask = wallCategory;
                            wall3.physicsBody.categoryBitMask = wallCategory;
                            
                            wall4Texture = [buttonSprites textureNamed:@"Wall"];
                            wall4 = [SKSpriteNode spriteNodeWithTexture:wall4Texture];
                            wall4.position = CGPointMake(self.frame.size.width * 2, self.frame.size.width/2.3);
                            wall4.size = CGSizeMake(wall4.frame.size.width/s, wall4.frame.size.height/s);
                            wall4.zPosition = 120;
                            wall4.yScale = -1;
                            wall4.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall4.size];
                            wall4.physicsBody.dynamic = NO;
                            [self.reggyLayer addChild:wall4];
                            wall4.physicsBody.contactTestBitMask = wallCategory;
                            wall4.physicsBody.categoryBitMask = wallCategory;
                            
                            ReggyBotTexture = [ReggyWave textureNamed:@"H1"];
                            ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                            ReggyBot.position = CGPointZero;
                            ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                            ReggyBot.zPosition = 2.99;
                            [self.reggyLayer addChild:ReggyBot];
                            
                            SKAction *WaveAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:H1_Anim_Start timePerFrame:0.08333333333],[SKAction animateWithTextures:H2_Anim_Start timePerFrame:0.08333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:H3_Anim_Start timePerFrame:0.08333333333]]]];
                            [ReggyBot runAction:WaveAnimSeq];
                            
                            [self.reggyLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74999999993],[SKAction runBlock:^{
                                [wall1 runAction:[SKAction moveToX:self.frame.size.width/2.5 duration:0.74999999997]];
                                [wall2 runAction:[SKAction moveToX:-self.frame.size.width/2.5 duration:0.74999999997]];
                                [wall3 runAction:[SKAction moveToX:-self.frame.size.width/2.5 duration:0.74999999997]];
                                [wall4 runAction:[SKAction moveToX:self.frame.size.width/2.5 duration:0.74999999997]];
                            }]]]];
                            
                            [self.reggyLayer runAction:[SKAction waitForDuration:2.5] completion:^{
                                
                                SKAction *moveWall1By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]] count:12];
                                SKAction *moveWall2By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]] count:12];
                                SKAction *moveWall3By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]] count:12];
                                SKAction *moveWall4By = [SKAction repeatAction:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]] count:12];
                                [wall1 runAction:moveWall1By];
                                [wall2 runAction:moveWall2By];
                                [wall3 runAction:moveWall3By];
                                [wall4 runAction:moveWall4By];
                                
                            }];
                        [self.reggyLayer runAction:[SKAction waitForDuration:17] completion:^{
                            
                            [ReggyBot runAction:[SKAction moveTo:CGPointMake(0, self.frame.size.height/45) duration:0.1] completion:^{
                                
                                //---------------------------------------------------Lightning Attack Animation---------------------------------------------------\\
                                
                                [self.reggyLayer removeAllChildren];
                                [self.reggyLayer removeAllActions];
                                z = 60;
                                t = 4.08333333;
                                [self reggyEnergyDecrease];
                                
                                lightningShadeTexture = [lightningAttackSprites5 textureNamed:@"Shade1"];
                                lightningShade = [SKSpriteNode spriteNodeWithTexture:lightningShadeTexture];
                                //lightningShade.position = CGPointZero;
                                lightningShade.size = CGSizeMake(lightningShade.frame.size.width/s, lightningShade.frame.size.height/s);
                                //lightningShade.zPosition = 51;
                                //[self.spriteLayer addChild:lightningShade];
                                SKSpriteNode *mask = [SKSpriteNode spriteNodeWithColor:[SKColor blackColor] size: CGSizeMake(self.frame.size.width, self.frame.size.height)];
                                SKCropNode *cropNode = [SKCropNode node];
                                [cropNode addChild: mask];
                                [cropNode setMaskNode: lightningShade];
                                [self.reggyLayer addChild: cropNode];
                                cropNode.alpha = 0.9;
                                lightningShade.alpha = 0;
                                mask.alpha = 0.9;
                                cropNode.position = CGPointZero;
                                cropNode.zPosition = 5;
                                lightningShade.zPosition = 5;
                                lightningShade.position = CGPointMake(-25, 4);
                                lightningShade.xScale = 0.58823529;
                                lightningShade.yScale = 0.58823529;
                                mask.zPosition = 5;
                                
                                NSArray *shadeSpites = @[[lightningAttackSprites5 textureNamed:@"Shade2"],
                                                         [lightningAttackSprites5 textureNamed:@"Shade3"],
                                                         [lightningAttackSprites5 textureNamed:@"Shade4"]];
                                
                                [lightningShade runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74],[SKAction group:@[[SKAction fadeAlphaTo:0.9 duration:0.1],[SKAction scaleTo:1 duration:2.333333333324],[SKAction moveTo:CGPointMake(-38, -22) duration:2.333333333324]]]]] completion:^{
                                    [lightningShade removeFromParent];
                                    [mask removeFromParent];
                                    [cropNode removeFromParent];
                                    lightningShadeTexture = [lightningAttackSprites5 textureNamed:@"Shade2"];
                                    lightningShade = [SKSpriteNode spriteNodeWithTexture:lightningShadeTexture];
                                    lightningShade.position = CGPointZero;
                                    lightningShade.zPosition = 5;
                                    [self.reggyLayer addChild:lightningShade];
                                    lightningShade.xScale = 1;
                                    lightningShade.yScale = 1;
                                    lightningShade.alpha = 0.9;
                                    [lightningShade runAction:[SKAction sequence:@[[SKAction animateWithTextures:shadeSpites timePerFrame:0.083333333333],[SKAction removeFromParent]]]];
                                    
                                }];
                                
                                ReggyBotTexture = [lightningAttackSprites1 textureNamed:@"G1"];
                                ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                                ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                                ReggyBot.position = CGPointZero;
                                ReggyBot.zPosition = 2.99;
                                [self runAction:[SKAction sequence:@[[SKAction waitForDuration:1.74],[SKAction runBlock:^{ReggyBot.name = @"reggyBot";}]]]];
                                
                                [self.reggyLayer addChild:ReggyBot];
                                
                                punchInt = 10;
                                
                                punchText = [SKSpriteNode spriteNodeWithImageNamed:@"PunchText"];
                                punchText.position = CGPointZero;
                                punchText.zPosition = 120;
                                punchText.size = CGSizeMake(punchText.frame.size.width/s, punchText.frame.size.height/s);
                                [self.reggyLayer addChild:punchText];
                                
                                punchLabel = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
                                punchLabel.name = @"punchLabel";
                                punchLabel.position = CGPointMake(self.frame.size.width/7.7, self.frame.size.height/2.25);
                                punchLabel.colorBlendFactor = 1;
                                punchLabel.fontColor = [UIColor whiteColor];
                                punchLabel.zPosition = 209;
                                punchLabel.fontSize = 35;
                                punchLabel.text = [NSString stringWithFormat:@"%li", (long)punchInt];
                                [self.reggyLayer addChild:punchLabel];
                                
                                SKAction *playLightnigSoundSequence = [SKAction sequence:@[[SKAction waitForDuration:1.74999999993],[SKAction runBlock:^{
                                    NSString *sound = [[NSBundle mainBundle]pathForResource:@"LightningAttack" ofType:@"wav"];
                                    reggyLightning = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
                                    reggyLightning.delegate = self;
                                    [reggyLightning play];}]]];
                                [self.reggyLayer runAction:playLightnigSoundSequence];
                                
                                SKAction *lightningSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_Start timePerFrame:0.08333333333]]];
                                [ReggyBot runAction:lightningSeq completion:^{
                                    
                                    [punchLabel removeFromParent];
                                    [punchText removeFromParent];
                                    
                                    if (punchInt > 0) {
                                        
                                        SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_End timePerFrame:0.08333333333]]];
                                        [ReggyBot runAction:EndSeq];
                                        
                                        [punchText removeFromParent];
                                        
                                        SKAction *alpha1 = [SKAction fadeAlphaTo:0.8 duration:0];
                                        SKAction *alpha2 = [SKAction fadeAlphaTo:0.1 duration:0.33];
                                        SKAction *alpha3 = [SKAction fadeAlphaTo:0.8 duration:0.33];
                                        SKAction *repeatGroup10 = [SKAction repeatActionForever:[SKAction sequence:@[alpha2,alpha3]]];
                                        SKAction *sequenceR1 = [SKAction sequence:@[alpha1,repeatGroup10]];
                                        
                                        [self.foodsLayer runAction:[SKAction sequence:@[sequenceR1]] withKey:@"spriteFade"];
                                        SKAction *frozenSeq = [SKAction sequence:@[[SKAction runBlock:^{
                                            if (noFreeze == NO) {
                                                canSwipe = NO;
                                                frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
                                                frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
                                                frozenScreen.size = CGSizeMake(frozenScreen.frame.size.width/s, frozenScreen.frame.size.height/s);
                                                frozenScreen.position = CGPointZero;
                                                frozenScreen.zPosition = 9000000;
                                                [self.reggyLayer addChild:frozenScreen];
                                            }
                                        }],[SKAction waitForDuration:1],[SKAction runBlock:^{
                                            canSwipe = YES;
                                            SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
                                            [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
                                        }]]];
                                        [self.reggyLayer runAction:frozenSeq];
                                        
                                    }
                                    if (punchInt <= 0) {
                                        
                                        SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:Gg_Anim_End timePerFrame:0.08333333333]]];
                                        [ReggyBot runAction:EndSeq];
                                        
                                        [punchText removeFromParent];
                                        
                                    }
                                    
                                }];
                            [self.reggyLayer runAction:[SKAction waitForDuration:10.2] completion:^{
                                
                                //---------------------------------------------------Eat Animation---------------------------------------------------\\
                                
                                [ReggyBot runAction:[SKAction moveTo:CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7) duration:0.1] completion:^{
                                    
                                    canBat = NO;
                                    
                                    [self.reggyLayer removeAllChildren];
                                    [self.reggyLayer removeAllActions];
                                    [self.foodsLayer removeActionForKey:@"spriteFade"];
                                    [self.foodsLayer runAction:[SKAction fadeAlphaTo:1.0 duration:0]];

                                    
                                    ReggyBotTexture = [ReggyEatSprites textureNamed:@"E40"];
                                    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
                                    ReggyBot.position = CGPointMake(CGRectGetMidX(self.frame), self.frame.size.height/7.6);
                                    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height/s);
                                    ReggyBot.zPosition = 2.99;
                                    [self.reggyLayer addChild:ReggyBot];
                                    
                                    [ReggyBot runAction:[SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333333] completion:^{
                                        
                                        eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
                                        eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
                                        eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
                                        eatRadius.size = CGSizeMake(eatRadius.frame.size.width/s, eatRadius.frame.size.height/s);
                                        eatRadius.alpha = 0.0;
                                        eatRadius.zPosition = 3.3;
                                        [self.reggyLayer addChild:eatRadius];
                                        eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
                                        eatRadius.physicsBody.dynamic = NO;
                                        eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
                                        
                                                            }];
                                    
                                                        }];
                                
                                                    }];
                                
                                                }];
                                
                                            }];
                                
                                        }];
                                
                                    }];
                                
                                }];
                                
                            }];
                            
                        }];
                        
                    }];
                    
                }];
                
            }];
            
        }];
        
    }
    
}
-(void)retryBattle {
    
    NSUserDefaults *defaults8 = [NSUserDefaults standardUserDefaults];
    [defaults8 setFloat:g forKey:@"GRVTY"];
    [defaults8 synchronize];
    
    reviveButtonTexture = [buttonSprites textureNamed:@"ReviveButton"];
    reviveButton = [SKSpriteNode spriteNodeWithTexture:reviveButtonTexture];
    reviveButton.position = CGPointMake(self.frame.size.width/3, self.frame.size.height/2.5);
    reviveButton.size = CGSizeMake(reviveButton.frame.size.width/s, reviveButton.frame.size.height/s);
    reviveButton.zPosition = 1000;
    reviveButton.name = @"revive";
    [self.spriteLayer addChild:reviveButton];
   
    retryBattleTexture = [buttonSprites textureNamed:@"RetryFight"];
    retryBattle = [SKSpriteNode spriteNodeWithTexture:retryBattleTexture];
    retryBattle.position = CGPointZero;
    retryBattle.size = CGSizeMake(retryBattle.frame.size.width/s, retryBattle.frame.size.height / s);
    retryBattle.zPosition = 1000;
    retryBattle.name = @"retryBB";
    [self.spriteLayer addChild:retryBattle];
    
}
-(void)continueBattle {
    
    continueBattleTexture = [buttonSprites textureNamed:@"ContinueFight"];
    continueBattle = [SKSpriteNode spriteNodeWithTexture:continueBattleTexture];
    continueBattle.position = CGPointZero;
    continueBattle.size = CGSizeMake(continueBattle.frame.size.width/s, continueBattle.frame.size.height / s);
    continueBattle.zPosition = 1000;
    continueBattle.name = @"continueBB";
    [self.spriteLayer addChild:continueBattle];
    
}
                                                                                                        // Lightning Attack
-(void)reggyFight2 {
    
    ReggyBotTexture = [lightningAttackSprites1 textureNamed:@"G1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.zPosition = 3.2;
    ReggyBot.name = @"reggyBot";
    [self.reggyLayer addChild:ReggyBot];
    
    punchInt = 10;
    
    punchTextTexture = [lightningAttackSprites5 textureNamed:@"PunchText"];
    punchText = [SKSpriteNode spriteNodeWithTexture:punchTextTexture];
    punchText.position = CGPointZero;
    punchText.zPosition = 120;
    [self.spriteLayer addChild:punchText];
    
    punchLabel = [SKLabelNode labelNodeWithFontNamed:@"DimitriSwank"];
    punchLabel.name = @"punchLabel";
    punchLabel.position = CGPointMake(-self.frame.size.width/40, -self.frame.size.height/3.4);
    punchLabel.colorBlendFactor = 1;
    punchLabel.fontColor = [UIColor blackColor];
    punchLabel.zPosition = 209;
    punchLabel.fontSize = 50;
    punchLabel.text = [NSString stringWithFormat:@"%li", (long)punchInt];
    [self addChild:punchLabel];
    
    SKAction *lightningSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_Start timePerFrame:0.08333333333]]];
    [ReggyBot runAction:lightningSeq];
    
    SKAction *endAnimCheck = [SKAction sequence:@[[SKAction waitForDuration:2.41666657],[SKAction runBlock:^{
        
        if (punchInt > 0) {
            
            SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:G_Anim_End timePerFrame:0.08333333333]]];
            [ReggyBot runAction:EndSeq];
            
            [punchText removeFromParent];
            
        }
        if (punchInt == 0) {
            
            SKAction *EndSeq = [SKAction sequence:@[[SKAction animateWithTextures:Gg_Anim_End timePerFrame:0.08333333333]]];
            [ReggyBot runAction:EndSeq];
            
            [punchText removeFromParent];
            
        }
        
    }]]];
    [self runAction:endAnimCheck];
    
    SKAction *playLightnigSoundSequence = [SKAction sequence:@[[SKAction runBlock:^{
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"LightningAttack" ofType:@"wav"];
        reggyLightning = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        reggyLightning.delegate = self;
        [reggyLightning play];}]]];
    [self runAction:playLightnigSoundSequence];
    
} //--O O O O O O O O O O--//
                                                                                                        // Bat Attack
-(void)reggyFight3 {
    
    canBat = YES;
    
    ReggyBotTexture = [ReggyBatPull textureNamed:@"F1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.zPosition = 3.2;
    [self.reggyLayer addChild:ReggyBot];
    
    batRadiusTexture = [buttonSprites textureNamed:@"BatRadius"];
    batRadius = [SKSpriteNode spriteNodeWithTexture:batRadiusTexture];
    batRadius.position = CGPointZero;
    batRadius.zPosition = 120;
    batRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:batRadius.size];
    batRadius.physicsBody.dynamic = NO;
    [self.sensorLayer addChild:batRadius];
    batRadius.physicsBody.categoryBitMask = batCategory;
    
    SKAction *batSwayAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:F1_Anim_Start timePerFrame:0.08333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:F2_Anim_Start timePerFrame:0.08333333333]]]];
    [ReggyBot runAction:batSwayAnimSeq withKey:@"batSway"];
    
    
    
} //--O O O O O O O O O O--//
                                                                                                        // Wall
-(void)reggyFight4 {
    
    //self.reggyLayer = [SKNode node];
    //self.reggyLayer.position = CGPointZero;
    
    //[self.spriteLayer addChild:self.reggyLayer];
    
    wall1Texture = [buttonSprites textureNamed:@"Wall"];
    wall1 = [SKSpriteNode spriteNodeWithTexture:wall1Texture];
    wall1.position = CGPointMake(self.frame.size.width/2.5, -self.frame.size.width/2.3);
    wall1.zPosition = 120;
    wall1.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall1.size];
    wall1.physicsBody.dynamic = NO;
    [self.spriteLayer addChild:wall1];
    wall1.physicsBody.contactTestBitMask = wallCategory;
    wall1.physicsBody.categoryBitMask = wallCategory;
    
    wall2Texture = [buttonSprites textureNamed:@"Wall"];
    wall2 = [SKSpriteNode spriteNodeWithTexture:wall2Texture];
    wall2.position = CGPointMake(-self.frame.size.width/2.5, -self.frame.size.width/2.3);
    wall2.zPosition = 120;
    wall2.xScale = -1;
    wall2.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall2.size];
    wall2.physicsBody.dynamic = NO;
    [self.spriteLayer addChild:wall2];
    wall2.physicsBody.contactTestBitMask = wallCategory;
    wall2.physicsBody.categoryBitMask = wallCategory;
    
    wall3Texture = [buttonSprites textureNamed:@"Wall"];
    wall3 = [SKSpriteNode spriteNodeWithTexture:wall3Texture];
    wall3.position = CGPointMake(-self.frame.size.width/2.5, self.frame.size.width/2.3);
    wall3.zPosition = 120;
    wall3.xScale = -1;
    wall3.yScale = -1;
    wall3.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall3.size];
    wall3.physicsBody.dynamic = NO;
    [self.spriteLayer addChild:wall3];
    wall3.physicsBody.contactTestBitMask = wallCategory;
    wall3.physicsBody.categoryBitMask = wallCategory;
    
    wall4Texture = [buttonSprites textureNamed:@"Wall"];
    wall4 = [SKSpriteNode spriteNodeWithTexture:wall4Texture];
    wall4.position = CGPointMake(self.frame.size.width/2.5, self.frame.size.width/2.3);
    wall4.zPosition = 120;
    wall4.yScale = -1;
    wall4.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:wall4.size];
    wall4.physicsBody.dynamic = NO;
    [self.spriteLayer addChild:wall4];
    wall4.physicsBody.contactTestBitMask = wallCategory;
    wall4.physicsBody.categoryBitMask = wallCategory;
    
    ReggyBotTexture = [ReggyWave textureNamed:@"H1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.zPosition = 3.2;
    [self.reggyLayer addChild:ReggyBot];
    
    SKAction *WaveAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:H1_Anim_Start timePerFrame:0.08333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:H2_Anim_Start timePerFrame:0.08333333333]]]];
    [ReggyBot runAction:WaveAnimSeq];
    
    SKAction *moveWall1By = [SKAction repeatActionForever:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]]];
    SKAction *moveWall2By = [SKAction repeatActionForever:[SKAction sequence:@[[SKAction moveToY:-self.frame.size.width/1 duration:0.5],[SKAction moveToY:-self.frame.size.width/2.3 duration:0.75]]]];
    SKAction *moveWall3By = [SKAction repeatActionForever:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]]];
    SKAction *moveWall4By = [SKAction repeatActionForever:[SKAction sequence:@[[SKAction moveToY:self.frame.size.width/1 duration:0.5],[SKAction moveToY:self.frame.size.width/2.3 duration:0.75]]]];
    [wall1 runAction:moveWall1By];
    [wall2 runAction:moveWall2By];
    [wall3 runAction:moveWall3By];
    [wall4 runAction:moveWall4By];
    
} //--O O O O O O O O O O--//
                                                                                                        // Smash Attack
-(void)reggyFight5 {
    
    ReggyBotTexture = [ReggySmashSprites textureNamed:@"C1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.zPosition = 3.2;
    [self.spriteLayer addChild:ReggyBot];
    
    // Make A Rumble Matter for @2x~iphone
    
    rubbleTexture = [ReggySmashSprites textureNamed:@"BossBattleRumleMatter"];
    rubble = [SKSpriteNode spriteNodeWithTexture:rubbleTexture];
    rubble.position = CGPointMake(0, 1500);
    rubble.zPosition = 1000;
    [self.spriteLayer addChild:rubble];
    
    //SKAction *moveUp = [SKAction moveByX:0 y:40 duration:1.5];
    //SKAction *resize = [SKAction scaleBy:0.5 duration:1.5];
   // SKAction *moveBehind = [SKAction runBlock:(dispatch_block_t)^(){
       // ReggyBot.zPosition = 2.9;
    //}];
    //SKAction *groupAnim = [SKAction group:@[resize,moveUp,moveBehind]];
    //SKAction *sequenceAnim = [SKAction sequence:@[groupAnim]];
    //[ReggyBot runAction:sequenceAnim];
    
    SKAction *wait7 = [SKAction waitForDuration:0.5];
    SKAction *reggySquatTextures = [SKAction animateWithTextures:C1_Anim_Start timePerFrame:0.083333333];
    SKAction *moveUp7 = [SKAction moveByX:0 y:1000 duration:0.333333332];
    SKAction *wait8 = [SKAction waitForDuration:1.0416666625];
    SKAction *moveDown7 = [SKAction moveByX:0 y:-1000 duration:0.249999999];
    SKAction *reggySmashTextures = [SKAction animateWithTextures:C2_Anim_Start timePerFrame:0.083333333];
    SKAction *sequence8 = [SKAction sequence:@[wait7,reggySquatTextures,moveUp7,wait8,moveDown7,reggySmashTextures]];
    [ReggyBot runAction:sequence8];
    
    SKAction *frozenSeq = [SKAction sequence:@[[SKAction waitForDuration:2.825],[SKAction runBlock:^{
        canSwipe = NO;
        frozenScreenTexture = [ReggySmashSprites textureNamed:@"FrozenScreen"];
        frozenScreen = [SKSpriteNode spriteNodeWithTexture:frozenScreenTexture];
        frozenScreen.position = CGPointZero;
        frozenScreen.zPosition = 9000000;
        [self.spriteLayer addChild:frozenScreen];
    }],[SKAction waitForDuration:1],[SKAction runBlock:^{
        canSwipe = YES;
        SKAction *fade = [SKAction fadeAlphaTo:0 duration:0.5];
        [frozenScreen runAction:[SKAction sequence:@[fade,[SKAction removeFromParent]]]];
    }]]];
    [self runAction:frozenSeq];
    
    SKAction *wait9 = [SKAction waitForDuration:2.9];
    SKAction *rotateScene1 = [SKAction rotateToAngle:0.523598776 duration:0.083333333];
    SKAction *rotateScene2 = [SKAction rotateToAngle:-0.523598776 duration:0.083333333];
    SKAction *rotateSeq = [SKAction sequence:@[rotateScene1,[SKAction rotateToAngle:0 duration:0.083333333],rotateScene2]];
    SKAction *repeatRotate = [SKAction repeatAction:rotateSeq count:20];
    SKAction *sequenceR = [SKAction sequence:@[wait9,repeatRotate,[SKAction rotateToAngle:0 duration:0.083333333]]];
    //[_background runAction:sequenceR];
    //[foodDropper runAction:sequenceR];
    //[foodCatcher runAction:sequenceR];
    //[sprite runAction:sequenceR];
    [background runAction:sequenceR];
    [self.gameLayer runAction:sequenceR];
    SKAction *rumbleSequence = [SKAction sequence:@[wait9,[SKAction moveByX:0 y:-2800 duration:3.5],[SKAction removeFromParent]]];
    [rubble runAction:rumbleSequence];
    
    SKAction *reggyBashSoundSeq = [SKAction sequence:@[wait7,[SKAction runBlock:^{
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyBash" ofType:@"wav"];
        reggySmash = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        reggySmash.delegate = self;
        [reggySmash play];}]]];
    [self runAction:reggyBashSoundSeq];
    
}
                                                                                                        // Food Fall Attack
-(void)reggyFight6 {
    
    
    ReggyBotTexture = [ReggyFoodFallSprites textureNamed:@"I1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.zPosition = 3.2;
    [self.spriteLayer addChild:ReggyBot];
    
    SKAction *foodFallAnimSeq = [SKAction sequence:@[[SKAction animateWithTextures:I_Anim_Start timePerFrame:0.08333333333]]];
    [ReggyBot runAction:foodFallAnimSeq];
    
}
                                                                                                        // Eat
-(void)reggyFight7 {
    
    
    ReggyBotTexture = [ReggyEatSprites textureNamed:@"E1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointZero;
    ReggyBot.zPosition = 3.2;
    [self.spriteLayer addChild:ReggyBot];
    
    
    /*SKAction *eatSeq = [SKAction sequence:@[[SKAction waitForDuration:0],[SKAction runBlock:^{
        [self removeActionForKey:@"f1"];
        [self removeActionForKey:@"f2"];
        [self removeActionForKey:@"FlyBot1"];
        [self removeActionForKey:@"FlyBot2"];*/
        eatRadiusTexture = [buttonSprites textureNamed:@"EatRadius"];
        eatRadius = [SKSpriteNode spriteNodeWithTexture:eatRadiusTexture];
        eatRadius.position = CGPointMake(-self.frame.size.width/1000, self.frame.size.height/6.3);
        eatRadius.alpha = 0.0;
        eatRadius.zPosition = 3.3;
        [self.spriteLayer addChild:eatRadius];
        eatRadius.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:eatRadius.size];
        eatRadius.physicsBody.dynamic = NO;
        eatRadius.physicsBody.categoryBitMask = eatRadiusCategory;
    /*}],[SKAction runBlock:^{
        SKAction *reggyEatAttempt = [SKAction animateWithTextures:E2_Anim_Start timePerFrame:0.083333333];
        SKAction *foodChase = [SKAction group:@[reggyEatAttempt,[SKAction scaleTo:0.6 duration:0],[SKAction moveTo:CGPointMake(0, 0) duration:0.2]]];
        [ReggyBot runAction:foodChase];
        SKAction *radiusFollow = [SKAction group:@[[SKAction scaleTo:0.6 duration:0],[SKAction moveTo:CGPointMake(0, 90) duration:0.2]]];
        [eatRadius runAction:radiusFollow];
    }],[SKAction runBlock:^{
        SKAction *tiredReggy = [SKAction animateWithTextures:E1_Anim_Start timePerFrame:0.083333333];
        SKAction *reggyOoB = [SKAction group:@[[SKAction moveTo:CGPointMake(0, -30) duration:0.5],tiredReggy]];
        [ReggyBot runAction:reggyOoB withKey:@"CatchesBreath"];
    }]]];
    [self runAction:[SKAction repeatActionForever:eatSeq]];*/
    
}
                                                                                                        // Sheild Attack
-(void)reggyFight8 {
    
    ReggyBotTexture = [ReggySheildSprites textureNamed:@"D1"];
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointMake(-self.frame.size.width/3, 0);
    ReggyBot.zPosition = 3.2;
    [self.spriteLayer addChild:ReggyBot];
    
    ReggySheildTexture = [ReggySheildSprites textureNamed:@"DSheild1"];
    ReggySheild = [SKSpriteNode spriteNodeWithTexture:ReggySheildTexture];
    //ReggySheild.position = CGPointMake(ReggyBot.position.x + 10, ReggyBot.position.y - 20);
    ReggySheild.position = CGPointMake(-self.frame.size.width/3.8, -ReggySheild.frame.size.width/2);
    ReggySheild.zPosition = 3.2;
    [self.spriteLayer addChild:ReggySheild];
    
    [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:D1_Anim_Start timePerFrame:0.083333333333333],[SKAction repeatActionForever:[SKAction animateWithTextures:D2_Anim_Start timePerFrame:0.083333333333333]]]]];
    [ReggySheild runAction:[SKAction repeatActionForever:[SKAction animateWithTextures:ReggySheild_Anim_Start timePerFrame:0.083333333333333]]];
    
    SKAction *canBlockSeq = [SKAction sequence:@[[SKAction runBlock:^{
        canBlock = YES;
    }],[SKAction waitForDuration:150],[SKAction runBlock:^{
        canBlock = NO;
        sprite.physicsBody.collisionBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
        sprite.physicsBody.contactTestBitMask = leftSensorCategory | rightSensorCategory | bottomSensorCategory;
    }]]];
    [self runAction:canBlockSeq];
    
}


-(void)reggyLogic {
    
    int rNum;
    rNum = arc4random() % 20;
    
    

    
    NMPointsLabel *foodCollectedLabel = (NMPointsLabel *)[self childNodeWithName:@"foodCollectedLabel"];

    // ------------------------------------------------------------ Rank 1 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 0 & attack == YES) {
        
        
        
    }
    // ------------------------------------------------------------ Rank 1 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 1 & attack == YES) {
        
        
        
    }
    // ------------------------------------------------------------ Rank 1 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 2 & attack == YES) {
        
        
        
    }
    // ------------------------------------------------------------ Rank 2 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 3 & attack == YES) {
       
        
        
    }
    // ------------------------------------------------------------ Rank 2 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 4) {
        
        
        
    }
    // ------------------------------------------------------------ Rank 2 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 5) {
        
        
        
    }
    // ------------------------------------------------------------ Rank 3 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 6) {
        
    
        
    }
    // ------------------------------------------------------------ Rank 3 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 7) {
        
        
        
    }
    // ------------------------------------------------------------ Rank 3 obj: 3 ------------------------------------------------------------ \\
    
    if ((rankNumber <= 8) & (rankNumber <= 26)) {
        reggyAnimSprites = [self textureAtlasNamed:@"ReggyAnimSprites"];
    }
    if (rankNumber == 8 & attack == YES & cantAnim == NO) {
        
        if (foodCollectedLabel.number == 35) {
            
            [self reggyAnims];
            attack = NO;
            cantAnim = YES;
        }
        
    }
    // ------------------------------------------------------------ Rank 4 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 9 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attack = NO;
        cantAnim = YES;
        
    }
    // ------------------------------------------------------------ Rank 4 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 10 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attack = NO;
        cantAnim = YES;
        
    }
    // ------------------------------------------------------------ Rank 4 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 11 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attack = NO;
        cantAnim = YES;
        
    }
    // ------------------------------------------------------------ Rank 5 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 12 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attack = NO;
        cantAnim = YES;
        
    }
    // ------------------------------------------------------------ Rank 5 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 13 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attack = NO;
        cantAnim = YES;
        
    }
    // ------------------------------------------------------------ Rank 5 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 14 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attack = NO;
        cantAnim = YES;
        
    }
    // ------------------------------------------------------------ Rank 6 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 15 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 2) {
        attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 6 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 16 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 2) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 6 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 17 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 2) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 7 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 18 & attack == YES & cantAnim == NO) {
    
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 3) {
            attack = NO;
        }
    
    }
    // ------------------------------------------------------------ Rank 7 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 19 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 3) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 7 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 20 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 3) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 8 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 21 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 3) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 8 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 22 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 3) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 8 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 23 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 3) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 9 obj: 1 ------------------------------------------------------------ \\
    
    if (rankNumber == 24 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 4) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 9 obj: 2 ------------------------------------------------------------ \\
    
    if (rankNumber == 25 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 4) {
            attack = NO;
        }
        
    }
    // ------------------------------------------------------------ Rank 9 obj: 3 ------------------------------------------------------------ \\
    
    if (rankNumber == 26 & attack == YES & cantAnim == NO) {
        
        [self performSelector:@selector(reggyAnims) withObject:nil afterDelay:rNum];
        attackNum++;
        cantAnim = YES;
        if (attackNum == 4) {
            attack = NO;
        }
        
    }
}

-(void)reggyAnims {
    
    if (gameOver == NO) {
        
        reggyAnimSprites = [self textureAtlasNamed:@"ReggyAnimSprites"];
        
    ReggyBotTexture = [reggyAnimSprites textureNamed:@"HappyFlyReggy1"];
    
    ReggyBot = [SKSpriteNode spriteNodeWithTexture:ReggyBotTexture];
    ReggyBot.position = CGPointMake(self.frame.size.width * 2, 0);
    ReggyBot.size = CGSizeMake(ReggyBot.frame.size.width/s, ReggyBot.frame.size.height / s);
    ReggyBot.zPosition = 2.9;
    [self.spriteLayer addChild:ReggyBot];
    
    rockTexture = [reggyAnimSprites textureNamed:@"Rock0001"];
    
    rock = [SKSpriteNode spriteNodeWithTexture:rockTexture];
    rock.position = CGPointMake(self.frame.size.width * 2, 0);
    rock.size = CGSizeMake(rock.frame.size.width/s, rock.frame.size.height / s);
    rock.zPosition = 133;
    [self.spriteLayer addChild:rock];
    rock.hidden = YES;
    
    curtainTexture = [reggyAnimSprites textureNamed:@"Curtain"];
    
    curtain = [SKSpriteNode spriteNodeWithTexture:curtainTexture];
    curtain.position = CGPointZero;
    curtain.size = CGSizeMake(curtain.frame.size.width/s, curtain.frame.size.height / s);
    curtain.zPosition = 133;
    [ReggyBot addChild:curtain];
    curtain.hidden = YES;
    
    
    raNum = arc4random() % 4;
    
    if (raNum == 0) {
    SKAction *reggyRockThrowSequence = [SKAction sequence:@[[SKAction moveTo:CGPointZero duration:0.3],[SKAction animateWithTextures:RockThrowReggy_Anim_Start timePerFrame:0.08333333],
                                              [SKAction moveTo:CGPointMake(-self.frame.size.width * 2, 0) duration:0.3],[SKAction removeFromParent]]];
    SKAction *rockSequence = [SKAction sequence:@[[SKAction moveTo:CGPointZero duration:0.3],[SKAction waitForDuration:0.66666664],[SKAction runBlock:^{rock.hidden = NO;}],[SKAction animateWithTextures:Rock_Anim_Start timePerFrame:0.08333333],[SKAction removeFromParent]]];
    SKAction *crackedScreenAct = [SKAction sequence:@[[SKAction waitForDuration:1.16666662],[SKAction runBlock:^{
        
        crackedScreenTexture = [reggyAnimSprites textureNamed:@"BrokenScreen"];
        
        crackedScreen = [SKSpriteNode spriteNodeWithTexture:crackedScreenTexture];
        crackedScreen.position = CGPointZero;
        crackedScreen.size = CGSizeMake(crackedScreen.frame.size.width/s, crackedScreen.frame.size.height/s);
        crackedScreen.zPosition = 133;
        [self.spriteLayer addChild:crackedScreen];
        
    }]]];
    [self.spriteLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:0.3],[SKAction runBlock:^{
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyJavileToss" ofType:@"wav"];
        rockPull = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        rockPull.delegate = self;
        [rockPull play];
    }]]]];
    [self.spriteLayer runAction:crackedScreenAct];
    [rock runAction:rockSequence];
    [ReggyBot runAction:reggyRockThrowSequence];
    [self.spriteLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:15]]] completion:^{
            cantAnim = NO;
        [crackedScreen removeFromParent];
        }];
    }
    
    if (raNum == 1) {
    SKAction *reggyEggThrowSequence = [SKAction sequence:@[[SKAction moveTo:CGPointZero duration:0.3],[SKAction animateWithTextures:EggThrowReggy_Anim_Start timePerFrame:0.08333333],
                                                            [SKAction moveTo:CGPointMake(-self.frame.size.width * 2, 0) duration:0.3],[SKAction removeFromParent]]];
    SKAction *eggSequence = [SKAction sequence:@[[SKAction moveTo:CGPointZero duration:0.3],[SKAction waitForDuration:0.66666664],[SKAction runBlock:^{egg.hidden = NO;}],[SKAction animateWithTextures:Egg_Anim_Start timePerFrame:0.08333333],[SKAction removeFromParent]]];
    SKAction *eggedScreenAct = [SKAction sequence:@[[SKAction waitForDuration:1.16666662],[SKAction runBlock:^{
        
        eggedScreenTexture = [reggyAnimSprites textureNamed:@"EggSplat"];
        
        eggedScreen = [SKSpriteNode spriteNodeWithTexture:eggedScreenTexture];
        eggedScreen.position = CGPointMake(0, self.frame.size.height / 9);
        eggedScreen.size = CGSizeMake(eggedScreen.frame.size.width/s, eggedScreen.frame.size.height/s);
        eggedScreen.zPosition = 133;
        [self.spriteLayer addChild:eggedScreen];
        
    }]]];
    [self.spriteLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:0.3],[SKAction runBlock:^{
        NSString *sound = [[NSBundle mainBundle]pathForResource:@"ReggyJavileToss" ofType:@"wav"];
        rockPull = [[AVAudioPlayer alloc]initWithContentsOfURL:[NSURL fileURLWithPath:sound]  error:NULL];
        rockPull.delegate = self;
        [rockPull play];
    }]]]];
    [self.spriteLayer runAction:eggedScreenAct];
    [egg runAction:eggSequence];
    [ReggyBot runAction:reggyEggThrowSequence];
    [self.spriteLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:15]]] completion:^{
        cantAnim = NO;
        [eggedScreen removeFromParent];
        }];
    }
    
    if (raNum == 2) {
    SKAction *reggyCurtainPullSequence = [SKAction sequence:@[[SKAction moveTo:CGPointZero duration:0.3],[SKAction animateWithTextures:CurtainPullReggy_Anim_Start timePerFrame:0.08333333],[SKAction waitForDuration:10],
                                                            [SKAction moveTo:CGPointMake(-self.frame.size.width * 2, 0) duration:0.3],[SKAction removeFromParent]]];
        SKAction *curtainSequence = [SKAction sequence:@[[SKAction waitForDuration:11.4999997],
                                                                  [SKAction moveTo:CGPointMake(-self.frame.size.width * 2, 0) duration:0.3],[SKAction removeFromParent]]];
    
    [ReggyBot runAction:reggyCurtainPullSequence];
        [curtain runAction:curtainSequence];
    [self.spriteLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:0.3],[SKAction runBlock:^{
        curtain.hidden = NO;
    }],[SKAction runBlock:^{
    
        [curtain runAction:[SKAction repeatActionForever:[SKAction sequence:@[[SKAction moveToY:75 duration:1],[SKAction moveToY:53 duration:1],[SKAction moveToY:32 duration:1],[SKAction moveToY:53 duration:1],[SKAction moveToY:75 duration:1],[SKAction moveToY:53 duration:1],[SKAction moveToY:32 duration:1],[SKAction moveToY:53 duration:1],[SKAction moveToY:75 duration:1],[SKAction moveToY:53 duration:1]]]]];
        [ReggyBot runAction:[SKAction repeatActionForever:[SKAction sequence:@[[SKAction moveToY:75 duration:1],[SKAction moveToY:53 duration:1],[SKAction moveToY:32 duration:1],[SKAction moveToY:53 duration:1],[SKAction moveToY:75 duration:1],[SKAction moveToY:53 duration:1],[SKAction moveToY:32 duration:1],[SKAction moveToY:53 duration:1],[SKAction moveToY:75 duration:1],[SKAction moveToY:53 duration:1]]]]];
        
    }]]]];
    }
    
    /*if (raNum == 3) {
    SKAction *foodBlowReggySequence = [SKAction sequence:@[[SKAction runBlock:^{
        
        foodBlowReggy = YES;
        
        UIColor *sensorColor = [UIColor redColor];
        double sensorWidth = 20.0;
        double sensorHeight = 20.0;
        
        foodBlowSensor = [SKSpriteNode spriteNodeWithColor:sensorColor size:CGSizeMake(sensorWidth, sensorHeight)];
        foodBlowSensor.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:foodBlowSensor.size];
        foodBlowSensor.alpha = 0.0;
        foodBlowSensor.zPosition = 200;
        foodBlowSensor.physicsBody.dynamic = NO;
        foodBlowSensor.position = CGPointMake(0, -self.frame.size.height/12);
        [self.sensorLayer addChild:foodBlowSensor];
        foodBlowSensor.physicsBody.categoryBitMask = foodBlowerCategory;
        
        
    }],[SKAction waitForDuration:10],[SKAction runBlock:^{foodBlowReggy = NO;[foodBlowSensor removeFromParent];[self removeActionForKey:@"foodBlowerAnim"];}],[SKAction runBlock:^{[ReggyBot runAction:[SKAction sequence:@[[SKAction moveTo:CGPointMake(-self.frame.size.width * 2, 0) duration:0.3],[SKAction removeFromParent]]]];}]]];
    [self.spriteLayer runAction:foodBlowReggySequence];
    }*/
    
    if (raNum == 3) {
    SKAction *foodDropReggy = [SKAction sequence:@[[SKAction runBlock:^{
        ReggyBot.zPosition = 3.11;
        [ReggyBot runAction:[SKAction sequence:@[[SKAction animateWithTextures:FoodDropReggy2_Anim_Start timePerFrame:0.0833333],[SKAction moveTo:CGPointZero duration:0.3],[SKAction waitForDuration:2],[SKAction animateWithTextures:FoodDropReggy1_Anim_Start timePerFrame:0.08333333],[SKAction animateWithTextures:FoodDropReggy2_Anim_Start timePerFrame:0.0833333]]]];
    }]]];
    [self.spriteLayer runAction:foodDropReggy];
    [self.spriteLayer runAction:[SKAction sequence:@[[SKAction waitForDuration:2.63333332],[SKAction performSelector:@selector(foodDropShuffle) onTarget:self]]]];
    }
    }
}
-(void)foodBlowAnim {
    
    if (self.isAVeggy == YES & self.rightWay == YES) {
        ReggyBot.xScale = 1;
        SKAction *foodBlowerSequence = [SKAction sequence:@[[SKAction moveTo:CGPointMake(self.frame.size.width/2.7, -self.frame.size.height/8) duration:0.3],[SKAction animateWithTextures:FoodBlowerPullReggy_Anim_Start timePerFrame:0.08333333],[SKAction repeatActionForever:[SKAction animateWithTextures:FoodBlowerReggy_Anim_Start timePerFrame:0.08333333]]]];
        [ReggyBot runAction:foodBlowerSequence withKey:@"foodBlowerAnim"];
        
    }
    if (self.isAFruit == YES & self.rightWay == YES) {
        ReggyBot.xScale = -1;
        SKAction *foodBlowerSequence = [SKAction sequence:@[[SKAction moveTo:CGPointMake(-self.frame.size.width/2.7, -self.frame.size.height/8) duration:0.3],[SKAction animateWithTextures:FoodBlowerPullReggy_Anim_Start timePerFrame:0.08333333],[SKAction repeatActionForever:[SKAction animateWithTextures:FoodBlowerReggy_Anim_Start timePerFrame:0.08333333]]]];
        [ReggyBot runAction:foodBlowerSequence withKey:@"foodBlowerAnim"];
        
    }
    if (self.isAVeggy == YES & self.rightWay == NO) {
        ReggyBot.xScale = -1;
        SKAction *foodBlowerSequence = [SKAction sequence:@[[SKAction moveTo:CGPointMake(-self.frame.size.width/2.7, -self.frame.size.height/8) duration:0.3],[SKAction animateWithTextures:FoodBlowerPullReggy_Anim_Start timePerFrame:0.08333333],[SKAction repeatActionForever:[SKAction animateWithTextures:FoodBlowerReggy_Anim_Start timePerFrame:0.08333333]]]];
        [ReggyBot runAction:foodBlowerSequence withKey:@"foodBlowerAnim"];
        
    }
    if (self.isAFruit == YES & self.rightWay == NO) {
        ReggyBot.xScale = 1;
        SKAction *foodBlowerSequence = [SKAction sequence:@[[SKAction moveTo:CGPointMake(self.frame.size.width/2.7, -self.frame.size.height/8) duration:0.3],[SKAction animateWithTextures:FoodBlowerPullReggy_Anim_Start timePerFrame:0.08333333],[SKAction repeatActionForever:[SKAction animateWithTextures:FoodBlowerReggy_Anim_Start timePerFrame:0.08333333]]]];
        [ReggyBot runAction:foodBlowerSequence withKey:@"foodBlowerAnim"];
        
    }
    
}
-(void)addFoodForReggyDrop {
 
 foodNum = arc4random() % (foodArray.count);
 
 NSString *currentelement = [foodArray objectAtIndex:foodNum];
 spriteTexture = [foodSprites textureNamed:currentelement];
 
 foodName = [NSString stringWithFormat:@"%@", [foodArray objectAtIndex:foodNum]];
 
            fakeSpriteTexture = [foodSprites textureNamed:currentelement];
        
        fakeSprite = [SKSpriteNode spriteNodeWithTexture:fakeSpriteTexture];
        fakeSprite.position = CGPointMake(0*SpawnWidth + SpawnWidth/2, 0*SpawnHeight + SpawnHeight/2);
        fakeSprite.zPosition = 3;
        fakeSprite.size = CGSizeMake(fakeSprite.frame.size.width/s, fakeSprite.frame.size.height/s);
        [self.foodsLayer addChild:fakeSprite];
        fakeSprite.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:fakeSprite.size];
        fakeSprite.physicsBody.categoryBitMask = fakeFoodCategory;
        fakeSprite.physicsBody.collisionBitMask = bottomSensorCategory;
        fakeSprite.physicsBody.contactTestBitMask = bottomSensorCategory;
        
        [fakeSprite runAction:[SKAction sequence:@[[SKAction scaleTo:0 duration:0],[SKAction scaleTo:1 duration:0.2]]]];
 
} //--Done--//
-(void)foodDropShuffle {
    fdNum +=1;
        [self addFoodForReggyDrop];
    
} //--Done--//
@end
